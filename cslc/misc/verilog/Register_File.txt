//Monica
// November 07, 2007
// Verilog code for Register_file;

`define  ADDR_WIDTH 3
`define  DATA_WIDTH 6
module RF_register_file_memory(clock,
                               reset,
                               data_in,
                               data_out,
                               wr_addr,
                               rd_addr,
                               wr_en,
                               rd_en,
                               valid);
  
  parameter NUM_WORDS = (1 << `ADDR_WIDTH);
  input clock;
  input reset;
  input [`DATA_WIDTH - 1:0] data_in;
  input [`ADDR_WIDTH - 1:0] wr_addr;
  input [`ADDR_WIDTH - 1:0] rd_addr;
  input wr_en;
  input rd_en;
  output reg [`DATA_WIDTH - 1:0] data_out;
  output reg valid;
  integer addr;
  
  reg [`DATA_WIDTH - 1:0] internal_memory [0 : NUM_WORDS - 1] ;

  always @( posedge clock or negedge reset )  begin 
    if ( ~reset )  begin 
       valid <= 1'b0;   

end
    else  begin 
   
      if ( rd_en )  begin 
        data_out <= internal_memory[rd_addr];
           valid <= rd_en;
      end
      if ( wr_en )  begin 
        internal_memory[wr_addr] <= data_in;
      end
    end
  end
endmodule

module RF(reset,
          clock,
          wr_addr,
          rd_addr,
          data_in,
          data_out,
          wr_en,
          rd_en,
          valid);

  parameter NUM_WORDS = (1'b1 << `ADDR_WIDTH);
  input reset;
  
  input clock;
  input [`ADDR_WIDTH -1:0] wr_addr;
  input [`ADDR_WIDTH -1:0] rd_addr;
  input [`DATA_WIDTH -1:0] data_in;
  input wr_en;
  input rd_en;
  output [`DATA_WIDTH -1:0]data_out;
  output valid;
  RF_register_file_memory register_file_memory_instance(.clock(clock),
                                                        .data_in(data_in),
                                                        .data_out(data_out),
                                                        .rd_addr(rd_addr),
                                                        .rd_en(rd_en),
                                                        .reset(reset),
                                                        .valid(valid),
                                                        .wr_addr(wr_addr),
                                                        .wr_en(wr_en));
endmodule


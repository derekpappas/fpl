// Generated by ./csl_csv_gen_20Jun08.pl 
// CSL library filename      = msi_phase_1.ifc.lib.csl       
// Design Hierarchy filename = msi_phase_1.hier
// CSL csv filename          = msi_phase_1.csv       
// Generated CSL filename    = generated/msi_phase_1.csl


// predeclare the units
 ;
csl_unit mfd_sec;
csl_unit ddr_buf_ctrl;
csl_unit sfd_trans;
csl_unit msi_rx;
csl_unit sfd_data_lba;
csl_unit sd_flash_lba;
csl_unit spi_cntl_cluster;
csl_unit sfd_data;
csl_unit sfd_trans_lba;
csl_unit eth_fab_cluster;
csl_unit sd_flash;
csl_unit sfd_stig_lba;
csl_unit sfd_data_cluster;
csl_unit avalon_fab_cluster;
csl_unit mfd_sec_cluster;
csl_unit eth_io;
csl_unit eth_mac;
csl_unit ddr_bridge_ctrl;
csl_unit spi_cntl;
csl_unit i2c_lba;
csl_unit spi_cntl_lba;
csl_unit ddr_ctrl;
csl_unit mfd_data;
csl_unit sd_flash_cluster;
csl_unit i2c;
csl_unit mfd_trans_lba;
csl_unit sfd_trans_cluster;
csl_unit mfd_sec_lba;
csl_unit sfd_stig;
csl_unit mfd_data_lba;
csl_unit i2c_cluster;
csl_unit eth_rx;
csl_unit nina;
csl_unit mfd_trans;
csl_unit mfd_data_cluster;
csl_unit msi_fabric_if;
csl_unit eth_tx;
csl_unit eth_bridge;
csl_unit avalon_bridge;
csl_unit mfd_trans_cluster;
csl_unit sfd_stig_cluster;
csl_unit ddr_fab_cluster;


csl_unit msi_fabric_if {
  ifc_1 fab_add; // from ifc
  ifc_2 lba; // from ifc
  ifc_1 fab_drop; // to ifc
  ifc_3 lb; // to ifc
  msi_fabric_if () {
    fab_drop.reverse(); // this is an endpoint so reverse the interface
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit mfd_sec {
  ifc_3 lb; // to ifc
  mfd_sec () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit ddr_buf_ctrl {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  ddr_buf_ctrl () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sfd_trans {
  ifc_3 lb; // to ifc
  sfd_trans () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sfd_data_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  sfd_data_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sd_flash_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  sd_flash_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit spi_cntl_cluster {
  spi_cntl spi_cntl  ; 
  spi_cntl_lba spi_cntl_lba  ; 
  msi_fabric_if spi_cntl_fab  ; 
  spi_cntl_cluster () {
  }
};


csl_unit sfd_data {
  ifc_3 lb; // to ifc
  sfd_data () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sfd_trans_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  sfd_trans_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit eth_fab_cluster {
  eth_tx eth_tx  ; 
  eth_mac eth_mac  ; 
  eth_io eth_io  ; 
  eth_bridge eth_bridge  ; 
  msi_fabric_if eth_fab  ; 
  eth_rx eth_rx  ; 
  eth_fab_cluster () {
  }
};


csl_unit sd_flash {
  ifc_3 lb; // to ifc
  sd_flash () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sfd_stig_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  sfd_stig_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sfd_data_cluster {
  sfd_data sfd_data  ; 
  msi_fabric_if sfd_data_fab  ; 
  sfd_data_lba sfd_data_lba  ; 
  sfd_data_cluster () {
  }
};


csl_unit avalon_fab_cluster {
  msi_fabric_if avalon_fab  ; 
  avalon_bridge avalon_bridge  ; 
  avalon_fab_cluster () {
  }
};


csl_unit mfd_sec_cluster {
  msi_fabric_if mfd_sec_fab  ; 
  mfd_sec_lba mfd_sec_lba  ; 
  mfd_sec mfd_sec  ; 
  mfd_sec_cluster () {
  }
};


csl_unit eth_io {
  eth_io () {
  }
};


csl_unit eth_mac {
  ifc_3 lb; // to ifc
  eth_mac () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit ddr_bridge_ctrl {
  ddr_bridge_ctrl () {
  }
};


csl_unit spi_cntl {
  ifc_3 lb; // to ifc
  spi_cntl () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit i2c_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  i2c_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit spi_cntl_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  spi_cntl_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit ddr_ctrl {
  ifc_3 lb; // to ifc
  ddr_ctrl () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit mfd_data {
  mfd_data () {
  }
};


csl_unit sd_flash_cluster {
  sd_flash sd_flash  ; 
  msi_fabric_if sd_flash_fab  ; 
  sd_flash_lba sd_flash_lba  ; 
  sd_flash_cluster () {
  }
};


csl_unit i2c {
  ifc_3 lb; // to ifc
  i2c () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit mfd_trans_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  mfd_trans_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sfd_trans_cluster {
  sfd_trans sfd_trans  ; 
  msi_fabric_if sfd_trans_fab  ; 
  sfd_trans_lba sfd_trans_lba  ; 
  sfd_trans_cluster () {
  }
};


csl_unit mfd_sec_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  mfd_sec_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit sfd_stig {
  ifc_3 lb; // to ifc
  sfd_stig () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit mfd_data_lba {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  mfd_data_lba () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit i2c_cluster {
  msi_fabric_if i2c_fab  ; 
  i2c i2c  ; 
  i2c_lba i2c_lba  ; 
  i2c_cluster () {
  }
};


csl_unit eth_rx {
  eth_rx () {
  }
};


csl_unit nina {
  ifc_3 lb; // to ifc
  nina () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit mfd_trans {
  ifc_3 lb; // to ifc
  mfd_trans () {
    lb.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit mfd_data_cluster {
  msi_fabric_if mfd_data_fab  ; 
  mfd_data_lba mfd_data_lba  ; 
  mfd_data mfd_data  ; 
  mfd_data_cluster () {
  }
};


csl_unit eth_tx {
  eth_tx () {
  }
};


csl_unit eth_bridge {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  eth_bridge () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit avalon_bridge {
  ifc_3 lb; // from ifc
  ifc_2 lba; // to ifc
  avalon_bridge () {
    lba.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit mfd_trans_cluster {
  mfd_trans mfd_trans  ; 
  mfd_trans_lba mfd_trans_lba  ; 
  msi_fabric_if mfd_trans_fab  ; 
  mfd_trans_cluster () {
  }
};


csl_unit sfd_stig_cluster {
  sfd_stig sfd_stig  ; 
  sfd_stig_lba sfd_stig_lba  ; 
  msi_fabric_if sfd_stig_fab  ; 
  sfd_stig_cluster () {
  }
};


csl_unit ddr_fab_cluster {
  ddr_ctrl ddr_ctrl  ; 
  ddr_bridge_ctrl ddr_bridge_ctrl  ; 
  ddr_buf_ctrl ddr_buf_ctrl  ; 
  msi_fabric_if ddr_fab  ; 
  ddr_fab_cluster () {
  }
};


csl_unit msi_rx {
  nina nina  ; 
  mfd_trans_cluster mfd_trans_cluster  ; 
  sd_flash_cluster sd_flash_cluster  ; 
  avalon_fab_cluster avalon_fab_cluster  ; 
  sfd_data_cluster sfd_data_cluster  ; 
  sfd_trans_cluster sfd_trans_cluster  ; 
  eth_fab_cluster eth_fab_cluster  ; 
  spi_cntl_cluster spi_cntl_cluster  ; 
  mfd_data_cluster mfd_data_cluster  ; 
  mfd_sec_cluster mfd_sec_cluster  ; 
  ddr_fab_cluster ddr_fab_cluster  ; 
  i2c_cluster i2c_cluster  ; 
  sfd_stig_cluster sfd_stig_cluster  ; 
  msi_rx () {
    mfd_sec_cluster.mfd_sec_fab.fab_add.connect_by_name(mfd_trans_cluster.mfd_trans_fab.fab_drop ,msf_mtf_fab);
    mfd_data_cluster.mfd_data_fab.fab_add.connect_by_name(mfd_sec_cluster.mfd_sec_fab.fab_drop ,mdf_msf_fab);
    sfd_stig_cluster.sfd_stig_fab.fab_add.connect_by_name(mfd_data_cluster.mfd_data_fab.fab_drop ,ssf_mdf_fab);
    sfd_data_cluster.sfd_data_fab.fab_add.connect_by_name(sfd_stig_cluster.sfd_stig_fab.fab_drop ,sdf_ssf_fab);
    spi_cntl_cluster.spi_cntl_fab.fab_add.connect_by_name(sfd_data_cluster.sfd_data_fab.fab_drop ,scf_sdf_fab);
    sd_flash_cluster.sd_flash_fab.fab_add.connect_by_name(spi_cntl_cluster.spi_cntl_fab.fab_drop ,sff_scf_fab);
    i2c_cluster.i2c_fab.fab_add.connect_by_name(sd_flash_cluster.sd_flash_fab.fab_drop ,if_sff_fab);
    avalon_fab_cluster.avalon_fab.fab_add.connect_by_name(i2c_cluster.i2c_fab.fab_drop ,af_if_fab);
    ddr_fab_cluster.ddr_fab.fab_add.connect_by_name(avalon_fab_cluster.avalon_fab.fab_drop ,df_af_fab);
    eth_fab_cluster.eth_fab.fab_add.connect_by_name(ddr_fab_cluster.ddr_fab.fab_drop ,ef_df_fab);
    sfd_trans_cluster.sfd_trans_fab.fab_add.connect_by_name(eth_fab_cluster.eth_fab.fab_drop ,stf_ef_fab);
    mfd_trans_cluster.mfd_trans_fab.fab_add.connect_by_name(sfd_trans_cluster.sfd_trans_fab.fab_drop ,mtf_stf_fab);
    mfd_sec_cluster.mfd_sec_fab.lba.connect_by_name(mfd_sec_cluster.mfd_sec_lba.lba ,msf_msl_lba);
    mfd_data_cluster.mfd_data_fab.lba.connect_by_name(mfd_data_cluster.mfd_data_lba.lba ,mdf_mdl_lba);
    sfd_stig_cluster.sfd_stig_fab.lba.connect_by_name(sfd_stig_cluster.sfd_stig_lba.lba ,ssf_ssl_lba);
    sfd_data_cluster.sfd_data_fab.lba.connect_by_name(sfd_data_cluster.sfd_data_lba.lba ,sdf_sdl_lba);
    spi_cntl_cluster.spi_cntl_fab.lba.connect_by_name(spi_cntl_cluster.spi_cntl_lba.lba ,scf_scl_lba);
    sd_flash_cluster.sd_flash_fab.lba.connect_by_name(sd_flash_cluster.sd_flash_lba.lba ,sff_sfl_lba);
    i2c_cluster.i2c_fab.lba.connect_by_name(i2c_cluster.i2c_lba.lba ,if_il_lba);
    avalon_fab_cluster.avalon_fab.lba.connect_by_name(avalon_fab_cluster.avalon_bridge.lba ,af_ab_lba);
    ddr_fab_cluster.ddr_fab.lba.connect_by_name(ddr_fab_cluster.ddr_buf_ctrl.lba ,df_dbc_fab);
    eth_fab_cluster.eth_fab.lba.connect_by_name(eth_fab_cluster.eth_bridge.lba ,ef_eb_fab);
    sfd_trans_cluster.sfd_trans_fab.lba.connect_by_name(sfd_trans_cluster.sfd_trans_lba.lba ,stf_stl_fab);
    mfd_trans_cluster.mfd_trans_fab.lba.connect_by_name(mfd_trans_cluster.mfd_trans_lba.lba ,mtf_mtl_fab);
    mfd_sec_cluster.mfd_sec_lba.lb.connect_by_name(mfd_sec_cluster.mfd_sec.lb ,msl_ms_lb);
    mfd_data_cluster.mfd_data_lba.lb.connect_by_name(mfd_data_cluster.mfd_data_fab.lb ,mdl_md_lb);
    sfd_stig_cluster.sfd_stig_lba.lb.connect_by_name(sfd_stig_cluster.sfd_stig.lb ,ssl_ss_lb);
    sfd_data_cluster.sfd_data_lba.lb.connect_by_name(sfd_data_cluster.sfd_data.lb ,sd_sd_lb);
    spi_cntl_cluster.spi_cntl_lba.lb.connect_by_name(spi_cntl_cluster.spi_cntl.lb ,scl_sc_lb);
    sd_flash_cluster.sd_flash_lba.lb.connect_by_name(sd_flash_cluster.sd_flash.lb ,sfl_sf_lb);
    i2c_cluster.i2c_lba.lb.connect_by_name(i2c_cluster.i2c.lb ,il_i_lb);
    avalon_fab_cluster.avalon_bridge.lb.connect_by_name(nina.lb ,ab_nina_lb);
    ddr_fab_cluster.ddr_buf_ctrl.lb.connect_by_name(ddr_fab_cluster.ddr_ctrl.lb ,dbc_dc_lb);
    eth_fab_cluster.eth_bridge.lb.connect_by_name(eth_fab_cluster.eth_mac.lb ,eb_em_lb);
    sfd_trans_cluster.sfd_trans_lba.lb.connect_by_name(sfd_trans_cluster.sfd_trans.lb ,stl_st_lb);
    mfd_trans_cluster.mfd_trans_lba.lb.connect_by_name(mfd_trans_cluster.mfd_trans.lb ,mtl_mt_lb);
  }
};

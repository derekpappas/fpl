#ifndef INC_GUARD_ssm_demo_h
#define INC_GUARD_ssm_demo_h

#include "systemc.h"
#include "SystemCVectorWriterTrace.h"

SC_MODULE(ssm_demo) {
  sc_signal<sc_uint<1> > master_a2p_arm_address;
  sc_signal<sc_uint<1> > master_a2p_arm_write_data;
  sc_signal<sc_uint<1> > master_a2p_arm_read;
  sc_signal<sc_uint<1> > master_a2p_arm_write;
  sc_signal<sc_uint<1> > master_a2p_arm_read_data;
  sc_signal<sc_uint<1> > master_a2p_arm_ready;
  sc_signal<sc_uint<1> > master_a2p_arm_error;
  sc_signal<sc_uint<1> > master_dummy1_address;
  sc_signal<sc_uint<1> > master_dummy1_write_data;
  sc_signal<sc_uint<1> > master_dummy1_read;
  sc_signal<sc_uint<1> > master_dummy1_write;
  sc_signal<sc_uint<1> > master_dummy1_read_data;
  sc_signal<sc_uint<1> > master_dummy1_ready;
  sc_signal<sc_uint<1> > master_dummy1_error;
  sc_signal<sc_uint<1> > master_dummy2_address;
  sc_signal<sc_uint<1> > master_dummy2_write_data;
  sc_signal<sc_uint<1> > master_dummy2_read;
  sc_signal<sc_uint<1> > master_dummy2_write;
  sc_signal<sc_uint<1> > master_dummy2_read_data;
  sc_signal<sc_uint<1> > master_dummy2_ready;
  sc_signal<sc_uint<1> > master_dummy2_error;
  sc_signal<sc_uint<1> > master_dummy3_address;
  sc_signal<sc_uint<1> > master_dummy3_write_data;
  sc_signal<sc_uint<1> > master_dummy3_read;
  sc_signal<sc_uint<1> > master_dummy3_write;
  sc_signal<sc_uint<1> > master_dummy3_read_data;
  sc_signal<sc_uint<1> > master_dummy3_ready;
  sc_signal<sc_uint<1> > master_dummy3_error;
  sc_signal<sc_uint<1> > ring_arm_dsp_grant;
  sc_signal<sc_uint<1> > ring_arm_dsp_request;
  sc_signal<sc_uint<1> > ring_arm_dsp_in;
  sc_signal<sc_uint<1> > ring_arm_dsp_aphi;
  sc_signal<sc_uint<1> > ring_arm_dsp_write;
  sc_signal<sc_uint<1> > ring_arm_dsp_read;
  sc_signal<sc_uint<1> > ring_arm_dsp_ready;
  sc_signal<sc_uint<1> > ring_arm_dsp_error;
  sc_signal<sc_uint<1> > ring_dsp_h264_grant;
  sc_signal<sc_uint<1> > ring_dsp_h264_request;
  sc_signal<sc_uint<1> > ring_dsp_h264_in;
  sc_signal<sc_uint<1> > ring_dsp_h264_aphi;
  sc_signal<sc_uint<1> > ring_dsp_h264_write;
  sc_signal<sc_uint<1> > ring_dsp_h264_read;
  sc_signal<sc_uint<1> > ring_dsp_h264_ready;
  sc_signal<sc_uint<1> > ring_dsp_h264_error;
  sc_signal<sc_uint<1> > ring_h264_cmpr_grant;
  sc_signal<sc_uint<1> > ring_h264_cmpr_request;
  sc_signal<sc_uint<1> > ring_h264_cmpr_in;
  sc_signal<sc_uint<1> > ring_h264_cmpr_aphi;
  sc_signal<sc_uint<1> > ring_h264_cmpr_write;
  sc_signal<sc_uint<1> > ring_h264_cmpr_read;
  sc_signal<sc_uint<1> > ring_h264_cmpr_ready;
  sc_signal<sc_uint<1> > ring_h264_cmpr_error;
  sc_signal<sc_uint<1> > ring_cmpr_arm_grant;
  sc_signal<sc_uint<1> > ring_cmpr_arm_request;
  sc_signal<sc_uint<1> > ring_cmpr_arm_in;
  sc_signal<sc_uint<1> > ring_cmpr_arm_aphi;
  sc_signal<sc_uint<1> > ring_cmpr_arm_write;
  sc_signal<sc_uint<1> > ring_cmpr_arm_read;
  sc_signal<sc_uint<1> > ring_cmpr_arm_ready;
  sc_signal<sc_uint<1> > ring_cmpr_arm_error;
  sc_signal<sc_uint<32> > slave_taparm_mbc_read_data;
  sc_signal<sc_uint<1> > slave_taparm_mbc_ready;
  sc_signal<sc_uint<1> > slave_taparm_mbc_error;
  sc_signal<sc_uint<20> > slave_taparm_mbc_address;
  sc_signal<sc_uint<32> > slave_taparm_mbc_data;
  sc_signal<sc_uint<1> > slave_taparm_mbc_read;
  sc_signal<sc_uint<1> > slave_taparm_mbc_write;
  sc_signal<sc_uint<32> > slave_tapdsp_mbc_read_data;
  sc_signal<sc_uint<1> > slave_tapdsp_mbc_ready;
  sc_signal<sc_uint<1> > slave_tapdsp_mbc_error;
  sc_signal<sc_uint<20> > slave_tapdsp_mbc_address;
  sc_signal<sc_uint<32> > slave_tapdsp_mbc_data;
  sc_signal<sc_uint<1> > slave_tapdsp_mbc_read;
  sc_signal<sc_uint<1> > slave_tapdsp_mbc_write;
  sc_signal<sc_uint<32> > slave_taph264_mbc_read_data;
  sc_signal<sc_uint<1> > slave_taph264_mbc_ready;
  sc_signal<sc_uint<1> > slave_taph264_mbc_error;
  sc_signal<sc_uint<20> > slave_taph264_mbc_address;
  sc_signal<sc_uint<32> > slave_taph264_mbc_data;
  sc_signal<sc_uint<1> > slave_taph264_mbc_read;
  sc_signal<sc_uint<1> > slave_taph264_mbc_write;
  sc_signal<sc_uint<32> > slave_tapcmpr_mbc_read_data;
  sc_signal<sc_uint<1> > slave_tapcmpr_mbc_ready;
  sc_signal<sc_uint<1> > slave_tapcmpr_mbc_error;
  sc_signal<sc_uint<20> > slave_tapcmpr_mbc_address;
  sc_signal<sc_uint<32> > slave_tapcmpr_mbc_data;
  sc_signal<sc_uint<1> > slave_tapcmpr_mbc_read;
  sc_signal<sc_uint<1> > slave_tapcmpr_mbc_write;
  sc_signal<sc_uint<32> > mbc_arm_mbc_address;
  sc_signal<sc_uint<32> > mbc_arm_mbc_write_data;
  sc_signal<sc_uint<1> > mbc_arm_mbc_write;
  sc_signal<sc_uint<1> > mbc_arm_mbc_read;
  sc_signal<sc_uint<32> > mbc_arm_mbc_read_data;
  sc_signal<sc_uint<32> > mbc_arm_mbc_control;
  sc_signal<sc_uint<32> > mbc_dsp_mbc_address;
  sc_signal<sc_uint<32> > mbc_dsp_mbc_write_data;
  sc_signal<sc_uint<1> > mbc_dsp_mbc_write;
  sc_signal<sc_uint<1> > mbc_dsp_mbc_read;
  sc_signal<sc_uint<32> > mbc_dsp_mbc_read_data;
  sc_signal<sc_uint<32> > mbc_dsp_mbc_control;
  sc_signal<sc_uint<32> > mbc_h264_mbc_address;
  sc_signal<sc_uint<32> > mbc_h264_mbc_write_data;
  sc_signal<sc_uint<1> > mbc_h264_mbc_write;
  sc_signal<sc_uint<1> > mbc_h264_mbc_read;
  sc_signal<sc_uint<32> > mbc_h264_mbc_read_data;
  sc_signal<sc_uint<32> > mbc_h264_mbc_control;
  sc_signal<sc_uint<32> > mbc_cmpr_mbc_address;
  sc_signal<sc_uint<32> > mbc_cmpr_mbc_write_data;
  sc_signal<sc_uint<1> > mbc_cmpr_mbc_write;
  sc_signal<sc_uint<1> > mbc_cmpr_mbc_read;
  sc_signal<sc_uint<32> > mbc_cmpr_mbc_read_data;
  sc_signal<sc_uint<32> > mbc_cmpr_mbc_control;
                              h264 *h264_;
  a2rtap *a2rtap_arm_;
  mcb *mcb_h264_;
  cmpr *cmpr_;
  host_processor *host_processor_;
  mcb *mcb_arm_;
  a2rtap *a2rtap_dsp_;
  mcb *mcb_dsp_;
  dsp *dsp_;
  a2rtap *a2rtap_cmpr_;
  a2rtap *a2rtap_h264_;
  ssm_master *ssm_master_;
  dummy_unit_synth_removes *dumb_;
  mcb *mcb_cmpr_;

  SC_CTOR(ssm_demo) {
      h264_ = new h264("h264_");
      a2rtap_arm_ = new a2rtap("a2rtap_arm_");
      mcb_h264_ = new mcb("mcb_h264_");
      cmpr_ = new cmpr("cmpr_");
      host_processor_ = new host_processor("host_processor_");
      mcb_arm_ = new mcb("mcb_arm_");
      a2rtap_dsp_ = new a2rtap("a2rtap_dsp_");
      mcb_dsp_ = new mcb("mcb_dsp_");
      dsp_ = new dsp("dsp_");
      a2rtap_cmpr_ = new a2rtap("a2rtap_cmpr_");
      a2rtap_h264_ = new a2rtap("a2rtap_h264_");
      ssm_master_ = new ssm_master("ssm_master_");
      dumb_ = new dummy_unit_synth_removes("dumb_");
      mcb_cmpr_ = new mcb("mcb_cmpr_");
      h264_->mbc_out_ifc_address(mbc_h264_mbc_address);
      h264_->mbc_out_ifc_control(mbc_h264_mbc_control);
      h264_->mbc_out_ifc_read(mbc_h264_mbc_read);
      h264_->mbc_out_ifc_read_data(mbc_h264_mbc_read_data);
      h264_->mbc_out_ifc_write(mbc_h264_mbc_write);
      h264_->mbc_out_ifc_write_data(mbc_h264_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_h264_;  
      // expected vector file 
      sc_trace_file * expVecFile_h264_;  
      // create the vector files
      stimVecFile_h264_ = sc_create_vec_file("stim_vec_h264_",2,4);
      ((vec_file*)stimVecFile_h264_)->sc_set_vcd_time_unit(-9);
      expVecFile_h264_ = sc_create_vec_file("exp_vec_h264_",2,4);
      ((vec_file*)expVecFile_h264_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_h264_, h264_->mbc_out_ifc_address, std::string("mbc_out_ifc_address") );
      sc_trace(stimVecFile_h264_, h264_->mbc_out_ifc_write_data, std::string("mbc_out_ifc_write_data") );
      sc_trace(stimVecFile_h264_, h264_->mbc_out_ifc_write, std::string("mbc_out_ifc_write") );
      sc_trace(stimVecFile_h264_, h264_->mbc_out_ifc_read, std::string("mbc_out_ifc_read") );
      sc_trace(expVecFile_h264_, h264_->mbc_out_ifc_read_data, std::string("mbc_out_ifc_read_data") );
      sc_trace(expVecFile_h264_, h264_->mbc_out_ifc_control, std::string("mbc_out_ifc_control") );

      a2rtap_arm_->a2rtap_master_ifc_address(master_a2p_arm_address);
      a2rtap_arm_->a2rtap_master_ifc_error(master_a2p_arm_error);
      a2rtap_arm_->a2rtap_master_ifc_read(master_a2p_arm_read);
      a2rtap_arm_->a2rtap_master_ifc_read_data(master_a2p_arm_read_data);
      a2rtap_arm_->a2rtap_master_ifc_ready(master_a2p_arm_ready);
      a2rtap_arm_->a2rtap_master_ifc_write(master_a2p_arm_write);
      a2rtap_arm_->a2rtap_master_ifc_write_data(master_a2p_arm_write_data);
      a2rtap_arm_->a2rtap_slave_out_ifc_address(slave_taparm_mbc_address);
      a2rtap_arm_->a2rtap_slave_out_ifc_data(slave_taparm_mbc_data);
      a2rtap_arm_->a2rtap_slave_out_ifc_error(slave_taparm_mbc_error);
      a2rtap_arm_->a2rtap_slave_out_ifc_read(slave_taparm_mbc_read);
      a2rtap_arm_->a2rtap_slave_out_ifc_read_data(slave_taparm_mbc_read_data);
      a2rtap_arm_->a2rtap_slave_out_ifc_ready(slave_taparm_mbc_ready);
      a2rtap_arm_->a2rtap_slave_out_ifc_write(slave_taparm_mbc_write);
      a2rtap_arm_->ring_in_ifc_aphi(ring_cmpr_arm_aphi);
      a2rtap_arm_->ring_in_ifc_error(ring_cmpr_arm_error);
      a2rtap_arm_->ring_in_ifc_grant(ring_cmpr_arm_grant);
      a2rtap_arm_->ring_in_ifc_in(ring_cmpr_arm_in);
      a2rtap_arm_->ring_in_ifc_read(ring_cmpr_arm_read);
      a2rtap_arm_->ring_in_ifc_ready(ring_cmpr_arm_ready);
      a2rtap_arm_->ring_in_ifc_request(ring_cmpr_arm_request);
      a2rtap_arm_->ring_in_ifc_write(ring_cmpr_arm_write);
      a2rtap_arm_->ring_out_ifc_aphi(ring_arm_dsp_aphi);
      a2rtap_arm_->ring_out_ifc_error(ring_arm_dsp_error);
      a2rtap_arm_->ring_out_ifc_grant(ring_arm_dsp_grant);
      a2rtap_arm_->ring_out_ifc_in(ring_arm_dsp_in);
      a2rtap_arm_->ring_out_ifc_read(ring_arm_dsp_read);
      a2rtap_arm_->ring_out_ifc_ready(ring_arm_dsp_ready);
      a2rtap_arm_->ring_out_ifc_request(ring_arm_dsp_request);
      a2rtap_arm_->ring_out_ifc_write(ring_arm_dsp_write);
      // stimulus vector file 
      sc_trace_file * stimVecFile_a2rtap_arm_;  
      // expected vector file 
      sc_trace_file * expVecFile_a2rtap_arm_;  
      // create the vector files
      stimVecFile_a2rtap_arm_ = sc_create_vec_file("stim_vec_a2rtap_arm_",2,4);
      ((vec_file*)stimVecFile_a2rtap_arm_)->sc_set_vcd_time_unit(-9);
      expVecFile_a2rtap_arm_ = sc_create_vec_file("exp_vec_a2rtap_arm_",2,4);
      ((vec_file*)expVecFile_a2rtap_arm_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_master_ifc_read_data, std::string("a2rtap_master_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_master_ifc_ready, std::string("a2rtap_master_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_master_ifc_error, std::string("a2rtap_master_ifc_error") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_grant, std::string("ring_out_ifc_grant") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_request, std::string("ring_out_ifc_request") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_in, std::string("ring_out_ifc_in") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_aphi, std::string("ring_out_ifc_aphi") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_write, std::string("ring_out_ifc_write") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_read, std::string("ring_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_ready, std::string("ring_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->ring_out_ifc_error, std::string("ring_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_slave_out_ifc_read_data, std::string("a2rtap_slave_out_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_slave_out_ifc_ready, std::string("a2rtap_slave_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_slave_out_ifc_error, std::string("a2rtap_slave_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_slave_out_ifc_address, std::string("a2rtap_slave_out_ifc_address") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_slave_out_ifc_data, std::string("a2rtap_slave_out_ifc_data") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_slave_out_ifc_read, std::string("a2rtap_slave_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_slave_out_ifc_write, std::string("a2rtap_slave_out_ifc_write") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_master_ifc_address, std::string("a2rtap_master_ifc_address") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_master_ifc_write_data, std::string("a2rtap_master_ifc_write_data") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_master_ifc_read, std::string("a2rtap_master_ifc_read") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->a2rtap_master_ifc_write, std::string("a2rtap_master_ifc_write") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_grant, std::string("ring_in_ifc_grant") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_request, std::string("ring_in_ifc_request") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_in, std::string("ring_in_ifc_in") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_aphi, std::string("ring_in_ifc_aphi") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_write, std::string("ring_in_ifc_write") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_read, std::string("ring_in_ifc_read") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_ready, std::string("ring_in_ifc_ready") );
      sc_trace(expVecFile_a2rtap_arm_, a2rtap_arm_->ring_in_ifc_error, std::string("ring_in_ifc_error") );

      mcb_h264_->a2rtap_slave_in_ifc_address(slave_taph264_mbc_address);
      mcb_h264_->a2rtap_slave_in_ifc_data(slave_taph264_mbc_data);
      mcb_h264_->a2rtap_slave_in_ifc_error(slave_taph264_mbc_error);
      mcb_h264_->a2rtap_slave_in_ifc_read(slave_taph264_mbc_read);
      mcb_h264_->a2rtap_slave_in_ifc_read_data(slave_taph264_mbc_read_data);
      mcb_h264_->a2rtap_slave_in_ifc_ready(slave_taph264_mbc_ready);
      mcb_h264_->a2rtap_slave_in_ifc_write(slave_taph264_mbc_write);
      mcb_h264_->mbc_in_ifc_address(mbc_h264_mbc_address);
      mcb_h264_->mbc_in_ifc_control(mbc_h264_mbc_control);
      mcb_h264_->mbc_in_ifc_read(mbc_h264_mbc_read);
      mcb_h264_->mbc_in_ifc_read_data(mbc_h264_mbc_read_data);
      mcb_h264_->mbc_in_ifc_write(mbc_h264_mbc_write);
      mcb_h264_->mbc_in_ifc_write_data(mbc_h264_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_mcb_h264_;  
      // expected vector file 
      sc_trace_file * expVecFile_mcb_h264_;  
      // create the vector files
      stimVecFile_mcb_h264_ = sc_create_vec_file("stim_vec_mcb_h264_",2,4);
      ((vec_file*)stimVecFile_mcb_h264_)->sc_set_vcd_time_unit(-9);
      expVecFile_mcb_h264_ = sc_create_vec_file("exp_vec_mcb_h264_",2,4);
      ((vec_file*)expVecFile_mcb_h264_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_mcb_h264_, mcb_h264_->mbc_in_ifc_read_data, std::string("mbc_in_ifc_read_data") );
      sc_trace(stimVecFile_mcb_h264_, mcb_h264_->mbc_in_ifc_control, std::string("mbc_in_ifc_control") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->a2rtap_slave_in_ifc_read_data, std::string("a2rtap_slave_in_ifc_read_data") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->a2rtap_slave_in_ifc_ready, std::string("a2rtap_slave_in_ifc_ready") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->a2rtap_slave_in_ifc_error, std::string("a2rtap_slave_in_ifc_error") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->a2rtap_slave_in_ifc_address, std::string("a2rtap_slave_in_ifc_address") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->a2rtap_slave_in_ifc_data, std::string("a2rtap_slave_in_ifc_data") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->a2rtap_slave_in_ifc_read, std::string("a2rtap_slave_in_ifc_read") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->a2rtap_slave_in_ifc_write, std::string("a2rtap_slave_in_ifc_write") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->mbc_in_ifc_address, std::string("mbc_in_ifc_address") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->mbc_in_ifc_write_data, std::string("mbc_in_ifc_write_data") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->mbc_in_ifc_write, std::string("mbc_in_ifc_write") );
      sc_trace(expVecFile_mcb_h264_, mcb_h264_->mbc_in_ifc_read, std::string("mbc_in_ifc_read") );

      cmpr_->mbc_out_ifc_address(mbc_cmpr_mbc_address);
      cmpr_->mbc_out_ifc_control(mbc_cmpr_mbc_control);
      cmpr_->mbc_out_ifc_read(mbc_cmpr_mbc_read);
      cmpr_->mbc_out_ifc_read_data(mbc_cmpr_mbc_read_data);
      cmpr_->mbc_out_ifc_write(mbc_cmpr_mbc_write);
      cmpr_->mbc_out_ifc_write_data(mbc_cmpr_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_cmpr_;  
      // expected vector file 
      sc_trace_file * expVecFile_cmpr_;  
      // create the vector files
      stimVecFile_cmpr_ = sc_create_vec_file("stim_vec_cmpr_",2,4);
      ((vec_file*)stimVecFile_cmpr_)->sc_set_vcd_time_unit(-9);
      expVecFile_cmpr_ = sc_create_vec_file("exp_vec_cmpr_",2,4);
      ((vec_file*)expVecFile_cmpr_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_cmpr_, cmpr_->mbc_out_ifc_address, std::string("mbc_out_ifc_address") );
      sc_trace(stimVecFile_cmpr_, cmpr_->mbc_out_ifc_write_data, std::string("mbc_out_ifc_write_data") );
      sc_trace(stimVecFile_cmpr_, cmpr_->mbc_out_ifc_write, std::string("mbc_out_ifc_write") );
      sc_trace(stimVecFile_cmpr_, cmpr_->mbc_out_ifc_read, std::string("mbc_out_ifc_read") );
      sc_trace(expVecFile_cmpr_, cmpr_->mbc_out_ifc_read_data, std::string("mbc_out_ifc_read_data") );
      sc_trace(expVecFile_cmpr_, cmpr_->mbc_out_ifc_control, std::string("mbc_out_ifc_control") );

      host_processor_->mbc_out_ifc_address(mbc_arm_mbc_address);
      host_processor_->mbc_out_ifc_control(mbc_arm_mbc_control);
      host_processor_->mbc_out_ifc_read(mbc_arm_mbc_read);
      host_processor_->mbc_out_ifc_read_data(mbc_arm_mbc_read_data);
      host_processor_->mbc_out_ifc_write(mbc_arm_mbc_write);
      host_processor_->mbc_out_ifc_write_data(mbc_arm_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_host_processor_;  
      // expected vector file 
      sc_trace_file * expVecFile_host_processor_;  
      // create the vector files
      stimVecFile_host_processor_ = sc_create_vec_file("stim_vec_host_processor_",2,4);
      ((vec_file*)stimVecFile_host_processor_)->sc_set_vcd_time_unit(-9);
      expVecFile_host_processor_ = sc_create_vec_file("exp_vec_host_processor_",2,4);
      ((vec_file*)expVecFile_host_processor_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_host_processor_, host_processor_->mbc_out_ifc_address, std::string("mbc_out_ifc_address") );
      sc_trace(stimVecFile_host_processor_, host_processor_->mbc_out_ifc_write_data, std::string("mbc_out_ifc_write_data") );
      sc_trace(stimVecFile_host_processor_, host_processor_->mbc_out_ifc_write, std::string("mbc_out_ifc_write") );
      sc_trace(stimVecFile_host_processor_, host_processor_->mbc_out_ifc_read, std::string("mbc_out_ifc_read") );
      sc_trace(expVecFile_host_processor_, host_processor_->mbc_out_ifc_read_data, std::string("mbc_out_ifc_read_data") );
      sc_trace(expVecFile_host_processor_, host_processor_->mbc_out_ifc_control, std::string("mbc_out_ifc_control") );

      mcb_arm_->a2rtap_slave_in_ifc_address(slave_taparm_mbc_address);
      mcb_arm_->a2rtap_slave_in_ifc_data(slave_taparm_mbc_data);
      mcb_arm_->a2rtap_slave_in_ifc_error(slave_taparm_mbc_error);
      mcb_arm_->a2rtap_slave_in_ifc_read(slave_taparm_mbc_read);
      mcb_arm_->a2rtap_slave_in_ifc_read_data(slave_taparm_mbc_read_data);
      mcb_arm_->a2rtap_slave_in_ifc_ready(slave_taparm_mbc_ready);
      mcb_arm_->a2rtap_slave_in_ifc_write(slave_taparm_mbc_write);
      mcb_arm_->mbc_in_ifc_address(mbc_arm_mbc_address);
      mcb_arm_->mbc_in_ifc_control(mbc_arm_mbc_control);
      mcb_arm_->mbc_in_ifc_read(mbc_arm_mbc_read);
      mcb_arm_->mbc_in_ifc_read_data(mbc_arm_mbc_read_data);
      mcb_arm_->mbc_in_ifc_write(mbc_arm_mbc_write);
      mcb_arm_->mbc_in_ifc_write_data(mbc_arm_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_mcb_arm_;  
      // expected vector file 
      sc_trace_file * expVecFile_mcb_arm_;  
      // create the vector files
      stimVecFile_mcb_arm_ = sc_create_vec_file("stim_vec_mcb_arm_",2,4);
      ((vec_file*)stimVecFile_mcb_arm_)->sc_set_vcd_time_unit(-9);
      expVecFile_mcb_arm_ = sc_create_vec_file("exp_vec_mcb_arm_",2,4);
      ((vec_file*)expVecFile_mcb_arm_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_mcb_arm_, mcb_arm_->mbc_in_ifc_read_data, std::string("mbc_in_ifc_read_data") );
      sc_trace(stimVecFile_mcb_arm_, mcb_arm_->mbc_in_ifc_control, std::string("mbc_in_ifc_control") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->a2rtap_slave_in_ifc_read_data, std::string("a2rtap_slave_in_ifc_read_data") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->a2rtap_slave_in_ifc_ready, std::string("a2rtap_slave_in_ifc_ready") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->a2rtap_slave_in_ifc_error, std::string("a2rtap_slave_in_ifc_error") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->a2rtap_slave_in_ifc_address, std::string("a2rtap_slave_in_ifc_address") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->a2rtap_slave_in_ifc_data, std::string("a2rtap_slave_in_ifc_data") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->a2rtap_slave_in_ifc_read, std::string("a2rtap_slave_in_ifc_read") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->a2rtap_slave_in_ifc_write, std::string("a2rtap_slave_in_ifc_write") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->mbc_in_ifc_address, std::string("mbc_in_ifc_address") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->mbc_in_ifc_write_data, std::string("mbc_in_ifc_write_data") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->mbc_in_ifc_write, std::string("mbc_in_ifc_write") );
      sc_trace(expVecFile_mcb_arm_, mcb_arm_->mbc_in_ifc_read, std::string("mbc_in_ifc_read") );

      a2rtap_dsp_->a2rtap_master_ifc_address(master_dummy1_address);
      a2rtap_dsp_->a2rtap_master_ifc_error(master_dummy1_error);
      a2rtap_dsp_->a2rtap_master_ifc_read(master_dummy1_read);
      a2rtap_dsp_->a2rtap_master_ifc_read_data(master_dummy1_read_data);
      a2rtap_dsp_->a2rtap_master_ifc_ready(master_dummy1_ready);
      a2rtap_dsp_->a2rtap_master_ifc_write(master_dummy1_write);
      a2rtap_dsp_->a2rtap_master_ifc_write_data(master_dummy1_write_data);
      a2rtap_dsp_->a2rtap_slave_out_ifc_address(slave_tapdsp_mbc_address);
      a2rtap_dsp_->a2rtap_slave_out_ifc_data(slave_tapdsp_mbc_data);
      a2rtap_dsp_->a2rtap_slave_out_ifc_error(slave_tapdsp_mbc_error);
      a2rtap_dsp_->a2rtap_slave_out_ifc_read(slave_tapdsp_mbc_read);
      a2rtap_dsp_->a2rtap_slave_out_ifc_read_data(slave_tapdsp_mbc_read_data);
      a2rtap_dsp_->a2rtap_slave_out_ifc_ready(slave_tapdsp_mbc_ready);
      a2rtap_dsp_->a2rtap_slave_out_ifc_write(slave_tapdsp_mbc_write);
      a2rtap_dsp_->ring_in_ifc_aphi(ring_arm_dsp_aphi);
      a2rtap_dsp_->ring_in_ifc_error(ring_arm_dsp_error);
      a2rtap_dsp_->ring_in_ifc_grant(ring_arm_dsp_grant);
      a2rtap_dsp_->ring_in_ifc_in(ring_arm_dsp_in);
      a2rtap_dsp_->ring_in_ifc_read(ring_arm_dsp_read);
      a2rtap_dsp_->ring_in_ifc_ready(ring_arm_dsp_ready);
      a2rtap_dsp_->ring_in_ifc_request(ring_arm_dsp_request);
      a2rtap_dsp_->ring_in_ifc_write(ring_arm_dsp_write);
      a2rtap_dsp_->ring_out_ifc_aphi(ring_dsp_h264_aphi);
      a2rtap_dsp_->ring_out_ifc_error(ring_dsp_h264_error);
      a2rtap_dsp_->ring_out_ifc_grant(ring_dsp_h264_grant);
      a2rtap_dsp_->ring_out_ifc_in(ring_dsp_h264_in);
      a2rtap_dsp_->ring_out_ifc_read(ring_dsp_h264_read);
      a2rtap_dsp_->ring_out_ifc_ready(ring_dsp_h264_ready);
      a2rtap_dsp_->ring_out_ifc_request(ring_dsp_h264_request);
      a2rtap_dsp_->ring_out_ifc_write(ring_dsp_h264_write);
      // stimulus vector file 
      sc_trace_file * stimVecFile_a2rtap_dsp_;  
      // expected vector file 
      sc_trace_file * expVecFile_a2rtap_dsp_;  
      // create the vector files
      stimVecFile_a2rtap_dsp_ = sc_create_vec_file("stim_vec_a2rtap_dsp_",2,4);
      ((vec_file*)stimVecFile_a2rtap_dsp_)->sc_set_vcd_time_unit(-9);
      expVecFile_a2rtap_dsp_ = sc_create_vec_file("exp_vec_a2rtap_dsp_",2,4);
      ((vec_file*)expVecFile_a2rtap_dsp_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_master_ifc_read_data, std::string("a2rtap_master_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_master_ifc_ready, std::string("a2rtap_master_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_master_ifc_error, std::string("a2rtap_master_ifc_error") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_grant, std::string("ring_out_ifc_grant") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_request, std::string("ring_out_ifc_request") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_in, std::string("ring_out_ifc_in") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_aphi, std::string("ring_out_ifc_aphi") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_write, std::string("ring_out_ifc_write") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_read, std::string("ring_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_ready, std::string("ring_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_out_ifc_error, std::string("ring_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_slave_out_ifc_read_data, std::string("a2rtap_slave_out_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_slave_out_ifc_ready, std::string("a2rtap_slave_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_slave_out_ifc_error, std::string("a2rtap_slave_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_slave_out_ifc_address, std::string("a2rtap_slave_out_ifc_address") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_slave_out_ifc_data, std::string("a2rtap_slave_out_ifc_data") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_slave_out_ifc_read, std::string("a2rtap_slave_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_slave_out_ifc_write, std::string("a2rtap_slave_out_ifc_write") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_master_ifc_address, std::string("a2rtap_master_ifc_address") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_master_ifc_write_data, std::string("a2rtap_master_ifc_write_data") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_master_ifc_read, std::string("a2rtap_master_ifc_read") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->a2rtap_master_ifc_write, std::string("a2rtap_master_ifc_write") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_grant, std::string("ring_in_ifc_grant") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_request, std::string("ring_in_ifc_request") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_in, std::string("ring_in_ifc_in") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_aphi, std::string("ring_in_ifc_aphi") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_write, std::string("ring_in_ifc_write") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_read, std::string("ring_in_ifc_read") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_ready, std::string("ring_in_ifc_ready") );
      sc_trace(expVecFile_a2rtap_dsp_, a2rtap_dsp_->ring_in_ifc_error, std::string("ring_in_ifc_error") );

      mcb_dsp_->a2rtap_slave_in_ifc_address(slave_tapdsp_mbc_address);
      mcb_dsp_->a2rtap_slave_in_ifc_data(slave_tapdsp_mbc_data);
      mcb_dsp_->a2rtap_slave_in_ifc_error(slave_tapdsp_mbc_error);
      mcb_dsp_->a2rtap_slave_in_ifc_read(slave_tapdsp_mbc_read);
      mcb_dsp_->a2rtap_slave_in_ifc_read_data(slave_tapdsp_mbc_read_data);
      mcb_dsp_->a2rtap_slave_in_ifc_ready(slave_tapdsp_mbc_ready);
      mcb_dsp_->a2rtap_slave_in_ifc_write(slave_tapdsp_mbc_write);
      mcb_dsp_->mbc_in_ifc_address(mbc_dsp_mbc_address);
      mcb_dsp_->mbc_in_ifc_control(mbc_dsp_mbc_control);
      mcb_dsp_->mbc_in_ifc_read(mbc_dsp_mbc_read);
      mcb_dsp_->mbc_in_ifc_read_data(mbc_dsp_mbc_read_data);
      mcb_dsp_->mbc_in_ifc_write(mbc_dsp_mbc_write);
      mcb_dsp_->mbc_in_ifc_write_data(mbc_dsp_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_mcb_dsp_;  
      // expected vector file 
      sc_trace_file * expVecFile_mcb_dsp_;  
      // create the vector files
      stimVecFile_mcb_dsp_ = sc_create_vec_file("stim_vec_mcb_dsp_",2,4);
      ((vec_file*)stimVecFile_mcb_dsp_)->sc_set_vcd_time_unit(-9);
      expVecFile_mcb_dsp_ = sc_create_vec_file("exp_vec_mcb_dsp_",2,4);
      ((vec_file*)expVecFile_mcb_dsp_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_mcb_dsp_, mcb_dsp_->mbc_in_ifc_read_data, std::string("mbc_in_ifc_read_data") );
      sc_trace(stimVecFile_mcb_dsp_, mcb_dsp_->mbc_in_ifc_control, std::string("mbc_in_ifc_control") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->a2rtap_slave_in_ifc_read_data, std::string("a2rtap_slave_in_ifc_read_data") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->a2rtap_slave_in_ifc_ready, std::string("a2rtap_slave_in_ifc_ready") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->a2rtap_slave_in_ifc_error, std::string("a2rtap_slave_in_ifc_error") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->a2rtap_slave_in_ifc_address, std::string("a2rtap_slave_in_ifc_address") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->a2rtap_slave_in_ifc_data, std::string("a2rtap_slave_in_ifc_data") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->a2rtap_slave_in_ifc_read, std::string("a2rtap_slave_in_ifc_read") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->a2rtap_slave_in_ifc_write, std::string("a2rtap_slave_in_ifc_write") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->mbc_in_ifc_address, std::string("mbc_in_ifc_address") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->mbc_in_ifc_write_data, std::string("mbc_in_ifc_write_data") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->mbc_in_ifc_write, std::string("mbc_in_ifc_write") );
      sc_trace(expVecFile_mcb_dsp_, mcb_dsp_->mbc_in_ifc_read, std::string("mbc_in_ifc_read") );

      dsp_->mbc_out_ifc_address(mbc_dsp_mbc_address);
      dsp_->mbc_out_ifc_control(mbc_dsp_mbc_control);
      dsp_->mbc_out_ifc_read(mbc_dsp_mbc_read);
      dsp_->mbc_out_ifc_read_data(mbc_dsp_mbc_read_data);
      dsp_->mbc_out_ifc_write(mbc_dsp_mbc_write);
      dsp_->mbc_out_ifc_write_data(mbc_dsp_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_dsp_;  
      // expected vector file 
      sc_trace_file * expVecFile_dsp_;  
      // create the vector files
      stimVecFile_dsp_ = sc_create_vec_file("stim_vec_dsp_",2,4);
      ((vec_file*)stimVecFile_dsp_)->sc_set_vcd_time_unit(-9);
      expVecFile_dsp_ = sc_create_vec_file("exp_vec_dsp_",2,4);
      ((vec_file*)expVecFile_dsp_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_dsp_, dsp_->mbc_out_ifc_address, std::string("mbc_out_ifc_address") );
      sc_trace(stimVecFile_dsp_, dsp_->mbc_out_ifc_write_data, std::string("mbc_out_ifc_write_data") );
      sc_trace(stimVecFile_dsp_, dsp_->mbc_out_ifc_write, std::string("mbc_out_ifc_write") );
      sc_trace(stimVecFile_dsp_, dsp_->mbc_out_ifc_read, std::string("mbc_out_ifc_read") );
      sc_trace(expVecFile_dsp_, dsp_->mbc_out_ifc_read_data, std::string("mbc_out_ifc_read_data") );
      sc_trace(expVecFile_dsp_, dsp_->mbc_out_ifc_control, std::string("mbc_out_ifc_control") );

      a2rtap_cmpr_->a2rtap_master_ifc_address(master_dummy3_address);
      a2rtap_cmpr_->a2rtap_master_ifc_error(master_dummy3_error);
      a2rtap_cmpr_->a2rtap_master_ifc_read(master_dummy3_read);
      a2rtap_cmpr_->a2rtap_master_ifc_read_data(master_dummy3_read_data);
      a2rtap_cmpr_->a2rtap_master_ifc_ready(master_dummy3_ready);
      a2rtap_cmpr_->a2rtap_master_ifc_write(master_dummy3_write);
      a2rtap_cmpr_->a2rtap_master_ifc_write_data(master_dummy3_write_data);
      a2rtap_cmpr_->a2rtap_slave_out_ifc_address(slave_tapcmpr_mbc_address);
      a2rtap_cmpr_->a2rtap_slave_out_ifc_data(slave_tapcmpr_mbc_data);
      a2rtap_cmpr_->a2rtap_slave_out_ifc_error(slave_tapcmpr_mbc_error);
      a2rtap_cmpr_->a2rtap_slave_out_ifc_read(slave_tapcmpr_mbc_read);
      a2rtap_cmpr_->a2rtap_slave_out_ifc_read_data(slave_tapcmpr_mbc_read_data);
      a2rtap_cmpr_->a2rtap_slave_out_ifc_ready(slave_tapcmpr_mbc_ready);
      a2rtap_cmpr_->a2rtap_slave_out_ifc_write(slave_tapcmpr_mbc_write);
      a2rtap_cmpr_->ring_in_ifc_aphi(ring_h264_cmpr_aphi);
      a2rtap_cmpr_->ring_in_ifc_error(ring_h264_cmpr_error);
      a2rtap_cmpr_->ring_in_ifc_grant(ring_h264_cmpr_grant);
      a2rtap_cmpr_->ring_in_ifc_in(ring_h264_cmpr_in);
      a2rtap_cmpr_->ring_in_ifc_read(ring_h264_cmpr_read);
      a2rtap_cmpr_->ring_in_ifc_ready(ring_h264_cmpr_ready);
      a2rtap_cmpr_->ring_in_ifc_request(ring_h264_cmpr_request);
      a2rtap_cmpr_->ring_in_ifc_write(ring_h264_cmpr_write);
      a2rtap_cmpr_->ring_out_ifc_aphi(ring_cmpr_arm_aphi);
      a2rtap_cmpr_->ring_out_ifc_error(ring_cmpr_arm_error);
      a2rtap_cmpr_->ring_out_ifc_grant(ring_cmpr_arm_grant);
      a2rtap_cmpr_->ring_out_ifc_in(ring_cmpr_arm_in);
      a2rtap_cmpr_->ring_out_ifc_read(ring_cmpr_arm_read);
      a2rtap_cmpr_->ring_out_ifc_ready(ring_cmpr_arm_ready);
      a2rtap_cmpr_->ring_out_ifc_request(ring_cmpr_arm_request);
      a2rtap_cmpr_->ring_out_ifc_write(ring_cmpr_arm_write);
      // stimulus vector file 
      sc_trace_file * stimVecFile_a2rtap_cmpr_;  
      // expected vector file 
      sc_trace_file * expVecFile_a2rtap_cmpr_;  
      // create the vector files
      stimVecFile_a2rtap_cmpr_ = sc_create_vec_file("stim_vec_a2rtap_cmpr_",2,4);
      ((vec_file*)stimVecFile_a2rtap_cmpr_)->sc_set_vcd_time_unit(-9);
      expVecFile_a2rtap_cmpr_ = sc_create_vec_file("exp_vec_a2rtap_cmpr_",2,4);
      ((vec_file*)expVecFile_a2rtap_cmpr_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_master_ifc_read_data, std::string("a2rtap_master_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_master_ifc_ready, std::string("a2rtap_master_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_master_ifc_error, std::string("a2rtap_master_ifc_error") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_grant, std::string("ring_out_ifc_grant") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_request, std::string("ring_out_ifc_request") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_in, std::string("ring_out_ifc_in") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_aphi, std::string("ring_out_ifc_aphi") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_write, std::string("ring_out_ifc_write") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_read, std::string("ring_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_ready, std::string("ring_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_out_ifc_error, std::string("ring_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_slave_out_ifc_read_data, std::string("a2rtap_slave_out_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_slave_out_ifc_ready, std::string("a2rtap_slave_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_slave_out_ifc_error, std::string("a2rtap_slave_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_slave_out_ifc_address, std::string("a2rtap_slave_out_ifc_address") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_slave_out_ifc_data, std::string("a2rtap_slave_out_ifc_data") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_slave_out_ifc_read, std::string("a2rtap_slave_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_slave_out_ifc_write, std::string("a2rtap_slave_out_ifc_write") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_master_ifc_address, std::string("a2rtap_master_ifc_address") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_master_ifc_write_data, std::string("a2rtap_master_ifc_write_data") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_master_ifc_read, std::string("a2rtap_master_ifc_read") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->a2rtap_master_ifc_write, std::string("a2rtap_master_ifc_write") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_grant, std::string("ring_in_ifc_grant") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_request, std::string("ring_in_ifc_request") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_in, std::string("ring_in_ifc_in") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_aphi, std::string("ring_in_ifc_aphi") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_write, std::string("ring_in_ifc_write") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_read, std::string("ring_in_ifc_read") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_ready, std::string("ring_in_ifc_ready") );
      sc_trace(expVecFile_a2rtap_cmpr_, a2rtap_cmpr_->ring_in_ifc_error, std::string("ring_in_ifc_error") );

      a2rtap_h264_->a2rtap_master_ifc_address(master_dummy2_address);
      a2rtap_h264_->a2rtap_master_ifc_error(master_dummy2_error);
      a2rtap_h264_->a2rtap_master_ifc_read(master_dummy2_read);
      a2rtap_h264_->a2rtap_master_ifc_read_data(master_dummy2_read_data);
      a2rtap_h264_->a2rtap_master_ifc_ready(master_dummy2_ready);
      a2rtap_h264_->a2rtap_master_ifc_write(master_dummy2_write);
      a2rtap_h264_->a2rtap_master_ifc_write_data(master_dummy2_write_data);
      a2rtap_h264_->a2rtap_slave_out_ifc_address(slave_taph264_mbc_address);
      a2rtap_h264_->a2rtap_slave_out_ifc_data(slave_taph264_mbc_data);
      a2rtap_h264_->a2rtap_slave_out_ifc_error(slave_taph264_mbc_error);
      a2rtap_h264_->a2rtap_slave_out_ifc_read(slave_taph264_mbc_read);
      a2rtap_h264_->a2rtap_slave_out_ifc_read_data(slave_taph264_mbc_read_data);
      a2rtap_h264_->a2rtap_slave_out_ifc_ready(slave_taph264_mbc_ready);
      a2rtap_h264_->a2rtap_slave_out_ifc_write(slave_taph264_mbc_write);
      a2rtap_h264_->ring_in_ifc_aphi(ring_dsp_h264_aphi);
      a2rtap_h264_->ring_in_ifc_error(ring_dsp_h264_error);
      a2rtap_h264_->ring_in_ifc_grant(ring_dsp_h264_grant);
      a2rtap_h264_->ring_in_ifc_in(ring_dsp_h264_in);
      a2rtap_h264_->ring_in_ifc_read(ring_dsp_h264_read);
      a2rtap_h264_->ring_in_ifc_ready(ring_dsp_h264_ready);
      a2rtap_h264_->ring_in_ifc_request(ring_dsp_h264_request);
      a2rtap_h264_->ring_in_ifc_write(ring_dsp_h264_write);
      a2rtap_h264_->ring_out_ifc_aphi(ring_h264_cmpr_aphi);
      a2rtap_h264_->ring_out_ifc_error(ring_h264_cmpr_error);
      a2rtap_h264_->ring_out_ifc_grant(ring_h264_cmpr_grant);
      a2rtap_h264_->ring_out_ifc_in(ring_h264_cmpr_in);
      a2rtap_h264_->ring_out_ifc_read(ring_h264_cmpr_read);
      a2rtap_h264_->ring_out_ifc_ready(ring_h264_cmpr_ready);
      a2rtap_h264_->ring_out_ifc_request(ring_h264_cmpr_request);
      a2rtap_h264_->ring_out_ifc_write(ring_h264_cmpr_write);
      // stimulus vector file 
      sc_trace_file * stimVecFile_a2rtap_h264_;  
      // expected vector file 
      sc_trace_file * expVecFile_a2rtap_h264_;  
      // create the vector files
      stimVecFile_a2rtap_h264_ = sc_create_vec_file("stim_vec_a2rtap_h264_",2,4);
      ((vec_file*)stimVecFile_a2rtap_h264_)->sc_set_vcd_time_unit(-9);
      expVecFile_a2rtap_h264_ = sc_create_vec_file("exp_vec_a2rtap_h264_",2,4);
      ((vec_file*)expVecFile_a2rtap_h264_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_master_ifc_read_data, std::string("a2rtap_master_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_master_ifc_ready, std::string("a2rtap_master_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_master_ifc_error, std::string("a2rtap_master_ifc_error") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_grant, std::string("ring_out_ifc_grant") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_request, std::string("ring_out_ifc_request") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_in, std::string("ring_out_ifc_in") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_aphi, std::string("ring_out_ifc_aphi") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_write, std::string("ring_out_ifc_write") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_read, std::string("ring_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_ready, std::string("ring_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->ring_out_ifc_error, std::string("ring_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_slave_out_ifc_read_data, std::string("a2rtap_slave_out_ifc_read_data") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_slave_out_ifc_ready, std::string("a2rtap_slave_out_ifc_ready") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_slave_out_ifc_error, std::string("a2rtap_slave_out_ifc_error") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_slave_out_ifc_address, std::string("a2rtap_slave_out_ifc_address") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_slave_out_ifc_data, std::string("a2rtap_slave_out_ifc_data") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_slave_out_ifc_read, std::string("a2rtap_slave_out_ifc_read") );
      sc_trace(stimVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_slave_out_ifc_write, std::string("a2rtap_slave_out_ifc_write") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_master_ifc_address, std::string("a2rtap_master_ifc_address") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_master_ifc_write_data, std::string("a2rtap_master_ifc_write_data") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_master_ifc_read, std::string("a2rtap_master_ifc_read") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->a2rtap_master_ifc_write, std::string("a2rtap_master_ifc_write") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_grant, std::string("ring_in_ifc_grant") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_request, std::string("ring_in_ifc_request") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_in, std::string("ring_in_ifc_in") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_aphi, std::string("ring_in_ifc_aphi") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_write, std::string("ring_in_ifc_write") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_read, std::string("ring_in_ifc_read") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_ready, std::string("ring_in_ifc_ready") );
      sc_trace(expVecFile_a2rtap_h264_, a2rtap_h264_->ring_in_ifc_error, std::string("ring_in_ifc_error") );

      ssm_master_->a2rtap_master_ifc_address(master_a2p_arm_address);
      ssm_master_->a2rtap_master_ifc_error(master_a2p_arm_error);
      ssm_master_->a2rtap_master_ifc_read(master_a2p_arm_read);
      ssm_master_->a2rtap_master_ifc_read_data(master_a2p_arm_read_data);
      ssm_master_->a2rtap_master_ifc_ready(master_a2p_arm_ready);
      ssm_master_->a2rtap_master_ifc_write(master_a2p_arm_write);
      ssm_master_->a2rtap_master_ifc_write_data(master_a2p_arm_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_ssm_master_;  
      // expected vector file 
      sc_trace_file * expVecFile_ssm_master_;  
      // create the vector files
      stimVecFile_ssm_master_ = sc_create_vec_file("stim_vec_ssm_master_",2,4);
      ((vec_file*)stimVecFile_ssm_master_)->sc_set_vcd_time_unit(-9);
      expVecFile_ssm_master_ = sc_create_vec_file("exp_vec_ssm_master_",2,4);
      ((vec_file*)expVecFile_ssm_master_)->sc_set_vcd_time_unit(-9);

      dumb_->dummy1_master_ifc_address(master_dummy1_address);
      dumb_->dummy1_master_ifc_error(master_dummy1_error);
      dumb_->dummy1_master_ifc_read(master_dummy1_read);
      dumb_->dummy1_master_ifc_read_data(master_dummy1_read_data);
      dumb_->dummy1_master_ifc_ready(master_dummy1_ready);
      dumb_->dummy1_master_ifc_write(master_dummy1_write);
      dumb_->dummy1_master_ifc_write_data(master_dummy1_write_data);
      dumb_->dummy2_master_ifc_address(master_dummy2_address);
      dumb_->dummy2_master_ifc_error(master_dummy2_error);
      dumb_->dummy2_master_ifc_read(master_dummy2_read);
      dumb_->dummy2_master_ifc_read_data(master_dummy2_read_data);
      dumb_->dummy2_master_ifc_ready(master_dummy2_ready);
      dumb_->dummy2_master_ifc_write(master_dummy2_write);
      dumb_->dummy2_master_ifc_write_data(master_dummy2_write_data);
      dumb_->dummy3_master_ifc_address(master_dummy3_address);
      dumb_->dummy3_master_ifc_error(master_dummy3_error);
      dumb_->dummy3_master_ifc_read(master_dummy3_read);
      dumb_->dummy3_master_ifc_read_data(master_dummy3_read_data);
      dumb_->dummy3_master_ifc_ready(master_dummy3_ready);
      dumb_->dummy3_master_ifc_write(master_dummy3_write);
      dumb_->dummy3_master_ifc_write_data(master_dummy3_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_dumb_;  
      // expected vector file 
      sc_trace_file * expVecFile_dumb_;  
      // create the vector files
      stimVecFile_dumb_ = sc_create_vec_file("stim_vec_dumb_",2,4);
      ((vec_file*)stimVecFile_dumb_)->sc_set_vcd_time_unit(-9);
      expVecFile_dumb_ = sc_create_vec_file("exp_vec_dumb_",2,4);
      ((vec_file*)expVecFile_dumb_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_dumb_, dumb_->dummy1_master_ifc_address, std::string("dummy1_master_ifc_address") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy1_master_ifc_write_data, std::string("dummy1_master_ifc_write_data") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy1_master_ifc_read, std::string("dummy1_master_ifc_read") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy1_master_ifc_write, std::string("dummy1_master_ifc_write") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy2_master_ifc_address, std::string("dummy2_master_ifc_address") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy2_master_ifc_write_data, std::string("dummy2_master_ifc_write_data") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy2_master_ifc_read, std::string("dummy2_master_ifc_read") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy2_master_ifc_write, std::string("dummy2_master_ifc_write") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy3_master_ifc_address, std::string("dummy3_master_ifc_address") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy3_master_ifc_write_data, std::string("dummy3_master_ifc_write_data") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy3_master_ifc_read, std::string("dummy3_master_ifc_read") );
      sc_trace(stimVecFile_dumb_, dumb_->dummy3_master_ifc_write, std::string("dummy3_master_ifc_write") );
      sc_trace(expVecFile_dumb_, dumb_->dummy1_master_ifc_read_data, std::string("dummy1_master_ifc_read_data") );
      sc_trace(expVecFile_dumb_, dumb_->dummy1_master_ifc_ready, std::string("dummy1_master_ifc_ready") );
      sc_trace(expVecFile_dumb_, dumb_->dummy1_master_ifc_error, std::string("dummy1_master_ifc_error") );
      sc_trace(expVecFile_dumb_, dumb_->dummy2_master_ifc_read_data, std::string("dummy2_master_ifc_read_data") );
      sc_trace(expVecFile_dumb_, dumb_->dummy2_master_ifc_ready, std::string("dummy2_master_ifc_ready") );
      sc_trace(expVecFile_dumb_, dumb_->dummy2_master_ifc_error, std::string("dummy2_master_ifc_error") );
      sc_trace(expVecFile_dumb_, dumb_->dummy3_master_ifc_read_data, std::string("dummy3_master_ifc_read_data") );
      sc_trace(expVecFile_dumb_, dumb_->dummy3_master_ifc_ready, std::string("dummy3_master_ifc_ready") );
      sc_trace(expVecFile_dumb_, dumb_->dummy3_master_ifc_error, std::string("dummy3_master_ifc_error") );

      mcb_cmpr_->a2rtap_slave_in_ifc_address(slave_tapcmpr_mbc_address);
      mcb_cmpr_->a2rtap_slave_in_ifc_data(slave_tapcmpr_mbc_data);
      mcb_cmpr_->a2rtap_slave_in_ifc_error(slave_tapcmpr_mbc_error);
      mcb_cmpr_->a2rtap_slave_in_ifc_read(slave_tapcmpr_mbc_read);
      mcb_cmpr_->a2rtap_slave_in_ifc_read_data(slave_tapcmpr_mbc_read_data);
      mcb_cmpr_->a2rtap_slave_in_ifc_ready(slave_tapcmpr_mbc_ready);
      mcb_cmpr_->a2rtap_slave_in_ifc_write(slave_tapcmpr_mbc_write);
      mcb_cmpr_->mbc_in_ifc_address(mbc_cmpr_mbc_address);
      mcb_cmpr_->mbc_in_ifc_control(mbc_cmpr_mbc_control);
      mcb_cmpr_->mbc_in_ifc_read(mbc_cmpr_mbc_read);
      mcb_cmpr_->mbc_in_ifc_read_data(mbc_cmpr_mbc_read_data);
      mcb_cmpr_->mbc_in_ifc_write(mbc_cmpr_mbc_write);
      mcb_cmpr_->mbc_in_ifc_write_data(mbc_cmpr_mbc_write_data);
      // stimulus vector file 
      sc_trace_file * stimVecFile_mcb_cmpr_;  
      // expected vector file 
      sc_trace_file * expVecFile_mcb_cmpr_;  
      // create the vector files
      stimVecFile_mcb_cmpr_ = sc_create_vec_file("stim_vec_mcb_cmpr_",2,4);
      ((vec_file*)stimVecFile_mcb_cmpr_)->sc_set_vcd_time_unit(-9);
      expVecFile_mcb_cmpr_ = sc_create_vec_file("exp_vec_mcb_cmpr_",2,4);
      ((vec_file*)expVecFile_mcb_cmpr_)->sc_set_vcd_time_unit(-9);
      sc_trace(stimVecFile_mcb_cmpr_, mcb_cmpr_->mbc_in_ifc_read_data, std::string("mbc_in_ifc_read_data") );
      sc_trace(stimVecFile_mcb_cmpr_, mcb_cmpr_->mbc_in_ifc_control, std::string("mbc_in_ifc_control") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->a2rtap_slave_in_ifc_read_data, std::string("a2rtap_slave_in_ifc_read_data") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->a2rtap_slave_in_ifc_ready, std::string("a2rtap_slave_in_ifc_ready") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->a2rtap_slave_in_ifc_error, std::string("a2rtap_slave_in_ifc_error") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->a2rtap_slave_in_ifc_address, std::string("a2rtap_slave_in_ifc_address") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->a2rtap_slave_in_ifc_data, std::string("a2rtap_slave_in_ifc_data") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->a2rtap_slave_in_ifc_read, std::string("a2rtap_slave_in_ifc_read") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->a2rtap_slave_in_ifc_write, std::string("a2rtap_slave_in_ifc_write") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->mbc_in_ifc_address, std::string("mbc_in_ifc_address") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->mbc_in_ifc_write_data, std::string("mbc_in_ifc_write_data") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->mbc_in_ifc_write, std::string("mbc_in_ifc_write") );
      sc_trace(expVecFile_mcb_cmpr_, mcb_cmpr_->mbc_in_ifc_read, std::string("mbc_in_ifc_read") );

    dont_initialize();
  }
};

#endif

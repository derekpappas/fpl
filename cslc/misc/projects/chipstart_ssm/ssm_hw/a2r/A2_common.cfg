/*==============================================================================================================================

   Copyright © 2003..2004 Advanced Architectures

   All rights reserved
   Confidential Information
   Limited Distribution to Authorized Persons Only
   Created and Protected as an Unpublished Work under the U.S.Copyright act of 1976.

   Project Name         : All A2 IP Cores Consolidation
   Description          : Common configuration defines etc..

   Author               : RTT
   Version              : 1.0
   Creation Date        : 5/27/2003

   REVISION CONTROL CS-RCS
   $Revision: 1.0 $
       $Date: 2006-10-20 08:57:19-07 $

   Revision History:
   $Log: A2_common.cfg,v $
   Revision 1.0  2006-10-20 08:57:19-07  roger
   Initial revision

   Revision 1.0  2006-09-26 21:05:11-07  roger
   Initial revision

   Revision 1.0  2006-08-19 11:05:46-07  roger
   Initial revision

================================================================================================================================
   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS
   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   AND ON ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
================================================================================================================================
   Notes for Use and Synthesis
==============================================================================================================================*/

`ifndef     A2_common_config
`define     A2_common_config

// Timescale ===================================================================================================================

// define the time for Clock -> Q (tCQ) for flip-flops and unit delay for gates (tUD)

// synopsys  translate_off
// synthesis translate_off
`ifndef  synthesis

`define  tCQ  #1
`define  tUD  #1

`timescale  1ns/1ps

`endif
// synthesis translate_on
// synopsys  translate_on

`ifndef  tCQ
`define  tCQ
`endif
`ifndef  tUD
`define  tUD
`endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set Flip-flop configurations
//
// All A2 IP cores use flip-flops specified in the same manner.  This block allows for the core to use rising or falling edge
// clocks and synchronous or asynchronous, positive or negative edge or level of reset.  The standard form is:
//
//    always @(`ACTIVE_EDGE clock `or_ACTIVE_EDGE_reset) begin
//       if (`ACTIVE_LEVEL_reset) begin
//          reset statement;
//          end
//       else begin
//          assignment statement;
//          end
//       end
//
// Selecting (by uncommenting) one of the options below any style of flip-flop style is supported by all A2 IP cores
//
// Set CLOCK configuration -----------------------------------------------------------------------------------------------------
//
// POSITIVE_CLOCK (default) - rising  edge
// NEGATIVE_CLOCK           - falling edge

  `define     POSITIVE_EDGE
//`define     NEGATIVE CLOCK

// Set flip-flop reset mode -- Choose one --------------------------------------------------------------------------------------

//`define     SYNC_HIGH_RESET
  `define     ASYNC_HIGH_RESET
//`define     SYNC_LOW_RESET
//`define     ASYNC_LOW_RESET

// =============================================================================================================================
// SELECTION DONE HERE BASED ON ABOVE DEFINES!
//
// ********* DO NOT MODIFY THIS SECTION *****************************
//

`ifdef NEGATIVE_CLOCK
   `define ACTIVE_EDGE   negedge
   `define INACTIVE_EDGE posedge
`else
   `define ACTIVE_EDGE   posedge
   `define INACTIVE_EDGE negedge
`endif

`ifdef SYNC_HIGH_RESET
   // Active High Synchronous Reset
   `define or_ACTIVE_EDGE_reset
   `define or_ACTIVE_EDGE_RESET
   `define ACTIVE_LEVEL_reset    reset
   `define ACTIVE_LEVEL_RESET    RESET
   `define reset_ON              1'b 1
   `define RESET_ON              1'b 1
   `define reset_OFF             1'b 0
   `define RESET_OFF             1'b 0
`else
   `ifdef ASYNC_HIGH_RESET
      // Positive Edge Active High Asynchronous Reset
      `define or_ACTIVE_EDGE_reset  or posedge reset
      `define or_ACTIVE_EDGE_RESET  or posedge RESET
      `define ACTIVE_LEVEL_reset    reset
      `define ACTIVE_LEVEL_RESET    RESET
      `define reset_ON              1'b 1
      `define RESET_ON              1'b 1
      `define reset_OFF             1'b 0
      `define RESET_OFF             1'b 0
   `else
      `ifdef SYNC_LOW_RESET
         // Active Low  Synchronous Reset
         `define or_ACTIVE_EDGE_reset
         `define or_ACTIVE_EDGE_RESET
         `define ACTIVE_LEVEL_reset    !reset
         `define ACTIVE_LEVEL_RESET    !RESET
         `define reset_ON              1'b 0
         `define RESET_ON              1'b 0
         `define reset_OFF             1'b 1
         `define RESET_OFF             1'b 1
      `else
          // Negative Edge Active Low  Asynchronous Reset
         `define or_ACTIVE_EDGE_reset  or negedge reset
         `define or_ACTIVE_EDGE_RESET  or negedge RESET
         `define ACTIVE_LEVEL_reset    !reset
         `define ACTIVE_LEVEL_RESET    !RESET
         `define reset_ON              1'b 0
         `define RESET_ON              1'b 0
         `define reset_OFF             1'b 1
         `define RESET_OFF             1'b 1
      `endif
   `endif
`endif
// =============================================================================================================================

`endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

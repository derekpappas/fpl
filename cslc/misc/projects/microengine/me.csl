// Copyright FastPath Logic (2009)
// Interface Library File v1.0, this is autogenerated by FastPath Generator 2010-03-12 22:48
//----------------------------------------------------------------------
// Copyright (c) 2005-2008 Fastpathlogic
// All Rights Reserved.
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of Fastpathlogic;
// the contents of this file may not be disclosed to third parties,
// copied or duplicated in any form, in whole or in part, without the prior
// written permission of Fastpathlogic.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to
// restrictions as set forth in subdivision (c)(1)(ii) of the Rights in
// Technical Data and Computer Software clause at DFARS 252.227-7013,
// and/or in similar or succesor clauses in the FAR, DOD or NASA FAR Supplement.
// Unpublished rights reserved under the Copyright Laws of the United States
//----------------------------------------------------------------------




//------------------------------------------------------------
// Begin csl_interface declarations
//------------------------------------------------------------
csl_interface a2rtap_global_ifc { 
    csl_port clock ( output , wire , 1);
    csl_port reset ( output , wire , 1);
    csl_port a2rtap_pipe_en ( output , wire , 1);

    a2rtap_global_ifc() {
 }
};

csl_interface eu_rf_data_ifc { 
    csl_port data ( output , wire , 32);
    csl_port v_en ( output , wire , 1);

    eu_rf_data_ifc() {
 }
};

csl_interface mbc_ifc { 
    csl_port address ( input , wire , 32);
    csl_port write_data ( input , wire , 32);
    csl_port write ( input , wire , 1);
    csl_port read ( input , wire , 1);
    csl_port read_data ( output , wire , 32);
    csl_port control ( output , wire , 32);

    mbc_ifc() {
 }
};

csl_interface me_br_ifc { 
    csl_port qual_br ( output , wire , 1);

    me_br_ifc() {
 }
};

csl_interface me_control_ifc { 
    csl_port v ( output , wire , 1);
    csl_port pc ( output , wire , 8);
    csl_port npc ( output , wire , 8);
    csl_port ir ( output , wire , 32);
    csl_port br_offset ( output , wire , 8);

    me_control_ifc() {
 }
};

csl_interface me_data_ifc { 
    csl_port data ( output , wire , 32);
    csl_port v_en ( output , wire , 1);

    me_data_ifc() {
 }
};

csl_interface me_rf_data_ifc { 
    csl_port rd_data_a ( output , wire , 32);
    csl_port rd_data_b ( output , wire , 32);

    me_rf_data_ifc() {
 }
};

csl_interface me_rf_input_side_ifc { 
    csl_port wr_addr ( output , wire , 4);
    csl_port wr_en ( output , wire , 1);
    csl_port wr_data ( output , wire , 32);
    csl_port rd_addr_a ( output , wire , 4);
    csl_port rd_en_a ( output , wire , 1);
    csl_port rd_addr_b ( output , wire , 4);
    csl_port rd_en_b ( output , wire , 1);

    me_rf_input_side_ifc() { 
    }
};

//------------------------------------------------------------
// Begin csl_unit predecalaration
//------------------------------------------------------------
csl_unit eu;
csl_unit im;
csl_unit pc;
csl_unit rf;
csl_unit wb;
csl_unit me;



//------------------------------------------------------------
// Begin csl_unit declarations
//------------------------------------------------------------
//------------------------------------------------------
csl_unit wb {  // declaration
	// unit instances
	// interface instances
	me_control_ifc me_cntl_in; // receiver interface
	me_rf_data_ifc eu_wb_in; // receiver interface
	me_br_ifc br_out; // driver interface
	me_data_ifc wb_rf_out_ifc; // driver interface
	wb() { 
		me_cntl_in.reverse();
		eu_wb_in.reverse();
	}
};


//------------------------------------------------------
csl_unit rf {  // declaration
	// unit instances
	// interface instances
	me_rf_input_side_ifc im_rf_in_rfi; // receiver interface
	me_rf_data_ifc rf_eu_rfi; // driver interface
	me_rf_data_ifc eu_rf_in; // receiver interface
	me_br_ifc br_in; // receiver interface
	me_data_ifc wb_rf_ifc; // receiver interface
	me_data_ifc eu_rf_in_ifc; // receiver interface
	rf() { 
		im_rf_in_rfi.reverse();
		eu_rf_in.reverse();
		br_in.reverse();
		wb_rf_ifc.reverse();
		eu_rf_in_ifc.reverse();
	}
};


//------------------------------------------------------
csl_unit im {  // declaration
	// unit instances
	// interface instances
	me_rf_input_side_ifc im_rf_out_rfi; // driver interface
	me_control_ifc me_cntl_in; // receiver interface
	me_control_ifc me_cntl_out; // driver interface
	me_br_ifc br_in; // receiver interface
	im() { 
		me_cntl_in.reverse();
		br_in.reverse();
	}
};


//------------------------------------------------------
csl_unit pc {  // declaration
	// unit instances
	// interface instances
	me_control_ifc me_cntl_out; // driver interface
	pc() { 
	}
};


//------------------------------------------------------
csl_unit eu {  // declaration
	// unit instances
	// interface instances
	me_rf_data_ifc rf_eu_rfi; // receiver interface
	me_rf_data_ifc eu_im_out; // driver interface
	me_rf_data_ifc eu_rf_out; // driver interface
	me_br_ifc br_in; // receiver interface
	me_data_ifc eu_rf_out_ifc; // driver interface
	eu() { 
		rf_eu_rfi.reverse();
		br_in.reverse();
	}
};


//------------------------------------------------------
csl_unit me {  // declaration
	// unit instances
	pc pc; // unit instance
	wb wb; // unit instance
	eu eu; // unit instance
	rf rf; // unit instance
	im im; // unit instance
	// interface instances
	me() { 
		me.im.im_rf_out_rfi.connect_by_name(me.rf.im_rf_in_rfi,im_rf);
		me.pc.me_cntl_out.connect_by_name(me.im.me_cntl_in,pc_im_me_cntl);
		me.im.me_cntl_out.connect_by_name(me.wb.me_cntl_in,im_rf_me_cntl);
		me.rf.rf_eu_rfi.connect_by_name(me.eu.rf_eu_rfi,rf_eu_rfi);
		me.eu.eu_im_out.connect_by_name(me.wb.eu_wb_in,eu_wb_rfi);
		me.eu.eu_rf_out.connect_by_name(me.rf.eu_rf_in,eu_rf_rfi);
		me.wb.br_out.connect_by_name(me.rf.br_in,me_br);
		me.wb.br_out.connect_by_name(me.im.br_in,me_br);
		me.wb.br_out.connect_by_name(me.eu.br_in,me_br);
		me.wb.wb_rf_out_ifc.connect_by_name(me.rf.wb_rf_ifc,wb_rf_data);
		me.eu.eu_rf_out_ifc.connect_by_name(me.rf.eu_rf_in_ifc,eu_rf);
	}
};



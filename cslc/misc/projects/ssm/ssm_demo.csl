// Copyright FastPath Logic (2009)
// Interface Library File v1.0, this is autogenerated by FastPath Generator 2010-03-12 09:17
//----------------------------------------------------------------------
// Copyright (c) 2005-2008 Fastpathlogic
// All Rights Reserved.
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of Fastpathlogic;
// the contents of this file may not be disclosed to third parties,
// copied or duplicated in any form, in whole or in part, without the prior
// written permission of Fastpathlogic.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to
// restrictions as set forth in subdivision (c)(1)(ii) of the Rights in
// Technical Data and Computer Software clause at DFARS 252.227-7013,
// and/or in similar or succesor clauses in the FAR, DOD or NASA FAR Supplement.
// Unpublished rights reserved under the Copyright Laws of the United States
//----------------------------------------------------------------------




//------------------------------------------------------------
// Begin csl_interface declarations
//------------------------------------------------------------
csl_interface a2p_slave_ifc { 
    csl_port read_data ( input , wire , 32);
    csl_port ready ( input , wire , 1);
    csl_port error ( input , wire , 1);
    csl_port address ( input , wire , 20);
    csl_port data ( input , wire , 32);
    csl_port read ( input , wire , 1);
    csl_port write ( input , wire , 1);

    a2p_slave_ifc() {
 }
};

csl_interface a2rtap_global_ifc { 
    csl_port clock ( output , wire , 1);
    csl_port reset ( output , wire , 1);
    csl_port a2rtap_pipe_en ( output , wire , 1);

    a2rtap_global_ifc() {
 }
};

csl_interface a2rtap_isa_master_ifc { 
    csl_port address ( input , wire , 1);
    csl_port write_data ( input , wire , 1);
    csl_port read ( input , wire , 1);
    csl_port write ( input , wire , 1);
    csl_port read_data ( output , wire , 1);
    csl_port ready ( output , wire , 1);
    csl_port error ( output , wire , 1);

    a2rtap_isa_master_ifc() {
 }
};

csl_interface a2rtap_ring_ifc { 
    csl_port grant ( input , wire , 1);
    csl_port request ( input , wire , 1);
    csl_port in ( input , wire , 1);
    csl_port aphi ( input , wire , 1);
    csl_port write ( input , wire , 1);
    csl_port read ( input , wire , 1);
    csl_port ready ( input , wire , 1);
    csl_port error ( input , wire , 1);

    a2rtap_ring_ifc() {
 }
};

csl_interface mbc_ifc { 
    csl_port address ( input , wire , 32);
    csl_port write_data ( input , wire , 32);
    csl_port write ( input , wire , 1);
    csl_port read ( input , wire , 1);
    csl_port read_data ( output , wire , 32);
    csl_port control ( output , wire , 32);

    mbc_ifc() {
 }
};

csl_interface me_br_ifc { 
    csl_port qual_br ( output , wire , 1);

    me_br_ifc() {
 }
};

csl_interface me_control_ifc { 
    csl_port v ( output , wire , 1);
    csl_port pc ( output , wire , 8);
    csl_port npc ( output , wire , 8);
    csl_port ir ( output , wire , 32);
    csl_port br_offset ( output , wire , 8);

    me_control_ifc() {
 }
};

csl_interface me_rf_input_side_ifc { 
    csl_port wr_addr ( output , wire , 4);
    csl_port wr_en ( output , wire , 1);
    csl_port wr_data ( output , wire , 32);
    csl_port rd_addr_a ( output , wire , 4);
    csl_port rd_en_a ( output , wire , 1);
    csl_port rd_addr_b ( output , wire , 4);
    csl_port rd_en_b ( output , wire , 1);

    me_rf_input_side_ifc() {
 }
};

csl_interface me_rf_output_side_ifc { 
    csl_port rd_data_a ( output , wire , 32);
    csl_port rd_data_b ( output , wire , 32);

    me_rf_output_side_ifc() { 
    }
};

//------------------------------------------------------------
// Begin csl_unit predecalaration
//------------------------------------------------------------
csl_unit a2rtap;
csl_unit cmpr;
csl_unit dsp;
csl_unit dummy_unit_synth_removes;
csl_unit eu;
csl_unit h264;
csl_unit host_processor;
csl_unit im;
csl_unit mcb;
csl_unit me;
csl_unit pc;
csl_unit rf;
csl_unit ssm_demo;
csl_unit ssm_master;
csl_unit wb;



//------------------------------------------------------------
// Begin csl_unit declarations
//------------------------------------------------------------
//------------------------------------------------------
csl_unit im {  // declaration
	// unit instances
	// interface instances
	me_rf_input_side_ifc im_rf_out_rfi; // driver interface
	me_control_ifc me_cntl_in; // receiver interface
	me_control_ifc me_cntl_out; // driver interface
	me_br_ifc br_in; // receiver interface
	im() { 
		me_cntl_in.reverse();
		br_in.reverse();
	}
};


//------------------------------------------------------
csl_unit mcb {  // declaration
	// unit instances
	// interface instances
	a2p_slave_ifc a2rtap_slave_in_ifc; // receiver interface
	mbc_ifc mbc_in_ifc; // receiver interface
	mcb() { 
		a2rtap_slave_in_ifc.reverse();
		mbc_in_ifc.reverse();
	}
};


//------------------------------------------------------
csl_unit ssm_master {  // declaration
	// unit instances
	// interface instances
	a2rtap_isa_master_ifc a2rtap_master_ifc; // driver interface
	ssm_master() { 
	}
};


//------------------------------------------------------
csl_unit dsp {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	mbc_ifc mbc_out_ifc; // driver interface
	dsp() { 
	}
};


//------------------------------------------------------
csl_unit rf {  // declaration
	// unit instances
	// interface instances
	me_rf_input_side_ifc im_rf_in_rfi; // receiver interface
	me_rf_output_side_ifc rf_eu_rfi; // driver interface
	me_rf_output_side_ifc eu_rf_in; // receiver interface
	me_br_ifc br_in; // receiver interface
	rf() { 
		im_rf_in_rfi.reverse();
		eu_rf_in.reverse();
		br_in.reverse();
	}
};


//------------------------------------------------------
csl_unit host_processor {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	mbc_ifc mbc_out_ifc; // driver interface
	host_processor() { 
	}
};


//------------------------------------------------------
csl_unit cmpr {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	mbc_ifc mbc_out_ifc; // driver interface
	cmpr() { 
	}
};


//------------------------------------------------------
csl_unit a2rtap {  // declaration
	// unit instances
	// interface instances
	a2rtap_isa_master_ifc a2rtap_master_ifc; // receiver interface
	a2rtap_ring_ifc ring_out_ifc; // driver interface
	a2rtap_ring_ifc ring_in_ifc; // receiver interface
	a2p_slave_ifc a2rtap_slave_out_ifc; // driver interface
	a2rtap() { 
		a2rtap_master_ifc.reverse();
		ring_in_ifc.reverse();
	}
};


//------------------------------------------------------
csl_unit eu {  // declaration
	// unit instances
	// interface instances
	me_rf_output_side_ifc rf_eu_rfi; // receiver interface
	me_rf_output_side_ifc eu_im_out; // driver interface
	me_rf_output_side_ifc eu_rf_out; // driver interface
	me_br_ifc br_in; // receiver interface
	eu() { 
		rf_eu_rfi.reverse();
		br_in.reverse();
	}
};


//------------------------------------------------------
csl_unit pc {  // declaration
	// unit instances
	// interface instances
	me_control_ifc me_cntl_out; // driver interface
	pc() { 
	}
};


//------------------------------------------------------
csl_unit wb {  // declaration
	// unit instances
	// interface instances
	me_control_ifc me_cntl_in; // receiver interface
	me_rf_output_side_ifc eu_wb_in; // receiver interface
	me_br_ifc br_out; // driver interface
	wb() { 
		me_cntl_in.reverse();
		eu_wb_in.reverse();
	}
};


//------------------------------------------------------
csl_unit h264 {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	mbc_ifc mbc_out_ifc; // driver interface
	h264() { 
	}
};


//------------------------------------------------------
csl_unit dummy_unit_synth_removes {  // declaration
	// unit instances
	// interface instances
	a2rtap_isa_master_ifc dummy1_master_ifc; // driver interface
	a2rtap_isa_master_ifc dummy2_master_ifc; // driver interface
	a2rtap_isa_master_ifc dummy3_master_ifc; // driver interface
	dummy_unit_synth_removes() { 
	}
};


//------------------------------------------------------
csl_unit me {  // declaration
	// unit instances
	rf rf; // unit instance
	im im; // unit instance
	eu eu; // unit instance
	pc pc; // unit instance
	wb wb; // unit instance
	// interface instances
	me() { 
	}
};


//------------------------------------------------------
csl_unit ssm_demo {  // declaration
	// unit instances
	h264 h264; // unit instance
	a2rtap a2rtap_arm; // unit instance
	mcb mcb_h264; // unit instance
	cmpr cmpr; // unit instance
	host_processor host_processor; // unit instance
	mcb mcb_arm; // unit instance
	a2rtap a2rtap_dsp; // unit instance
	mcb mcb_dsp; // unit instance
	dsp dsp; // unit instance
	a2rtap a2rtap_cmpr; // unit instance
	a2rtap a2rtap_h264; // unit instance
	ssm_master ssm_master; // unit instance
	dummy_unit_synth_removes dumb; // unit instance
	mcb mcb_cmpr; // unit instance
	// interface instances
	ssm_demo() { 
		ssm_demo.ssm_master.a2rtap_master_ifc.connect_by_name(ssm_demo.a2rtap_arm.a2rtap_master_ifc,master_a2p_arm);
		ssm_demo.dumb.dummy1_master_ifc.connect_by_name(ssm_demo.a2rtap_dsp.a2rtap_master_ifc,master_dummy1);
		ssm_demo.dumb.dummy2_master_ifc.connect_by_name(ssm_demo.a2rtap_h264.a2rtap_master_ifc,master_dummy2);
		ssm_demo.dumb.dummy3_master_ifc.connect_by_name(ssm_demo.a2rtap_cmpr.a2rtap_master_ifc,master_dummy3);
		ssm_demo.a2rtap_arm.ring_out_ifc.connect_by_name(ssm_demo.a2rtap_dsp.ring_in_ifc,ring_arm_dsp);
		ssm_demo.a2rtap_dsp.ring_out_ifc.connect_by_name(ssm_demo.a2rtap_h264.ring_in_ifc,ring_dsp_h264);
		ssm_demo.a2rtap_h264.ring_out_ifc.connect_by_name(ssm_demo.a2rtap_cmpr.ring_in_ifc,ring_h264_cmpr);
		ssm_demo.a2rtap_cmpr.ring_out_ifc.connect_by_name(ssm_demo.a2rtap_arm.ring_in_ifc,ring_cmpr_arm);
		ssm_demo.a2rtap_arm.a2rtap_slave_out_ifc.connect_by_name(ssm_demo.mcb_arm.a2rtap_slave_in_ifc,slave_taparm_mbc);
		ssm_demo.a2rtap_dsp.a2rtap_slave_out_ifc.connect_by_name(ssm_demo.mcb_dsp.a2rtap_slave_in_ifc,slave_tapdsp_mbc);
		ssm_demo.a2rtap_h264.a2rtap_slave_out_ifc.connect_by_name(ssm_demo.mcb_h264.a2rtap_slave_in_ifc,slave_taph264_mbc);
		ssm_demo.a2rtap_cmpr.a2rtap_slave_out_ifc.connect_by_name(ssm_demo.mcb_cmpr.a2rtap_slave_in_ifc,slave_tapcmpr_mbc);
		ssm_demo.host_processor.mbc_out_ifc.connect_by_name(ssm_demo.mcb_arm.mbc_in_ifc,mbc_arm_mbc);
		ssm_demo.dsp.mbc_out_ifc.connect_by_name(ssm_demo.mcb_dsp.mbc_in_ifc,mbc_dsp_mbc);
		ssm_demo.h264.mbc_out_ifc.connect_by_name(ssm_demo.mcb_h264.mbc_in_ifc,mbc_h264_mbc);
		ssm_demo.cmpr.mbc_out_ifc.connect_by_name(ssm_demo.mcb_cmpr.mbc_in_ifc,mbc_cmpr_mbc);
		ssm_demo.dsp.me.im.im_rf_out_rfi.connect_by_name(ssm_demo.dsp.me.rf.im_rf_in_rfi,im_rf);
		ssm_demo.dsp.me.pc.me_cntl_out.connect_by_name(ssm_demo.dsp.me.im.me_cntl_in,pc_im_me_cntl);
		ssm_demo.dsp.me.im.me_cntl_out.connect_by_name(ssm_demo.dsp.me.wb.me_cntl_in,im_rf_me_cntl);
		ssm_demo.dsp.me.rf.rf_eu_rfi.connect_by_name(ssm_demo.dsp.me.eu.rf_eu_rfi,rf_eu_rfi);
		ssm_demo.dsp.me.eu.eu_im_out.connect_by_name(ssm_demo.dsp.me.wb.eu_wb_in,eu_wb_rfi);
		ssm_demo.dsp.me.eu.eu_rf_out.connect_by_name(ssm_demo.dsp.me.rf.eu_rf_in,eu_rf_rfi);
		ssm_demo.dsp.me.wb.br_out.connect_by_name(ssm_demo.dsp.me.rf.br_in,me_br);
		ssm_demo.dsp.me.wb.br_out.connect_by_name(ssm_demo.dsp.me.im.br_in,me_br);
		ssm_demo.dsp.me.wb.br_out.connect_by_name(ssm_demo.dsp.me.eu.br_in,me_br);
	}
};



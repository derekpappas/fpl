{\rtf1\ansi\deff0\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\froman\fprq2\fcharset0 Times{\*\falt Times New Roman};}{\f3\froman\fprq2\fcharset0 Book Antiqua;}{\f4\fnil\fprq2\fcharset2 Wingdings;}{\f5\froman\fprq2\fcharset2 Wingdings 2;}{\f6\fnil\fprq0\fcharset2 StarSymbol{\*\falt Arial Unicode MS};}{\f7\froman\fprq2\fcharset0 Times New Roman;}{\f8\fswiss\fprq2\fcharset0 Helvetica;}{\f9\fmodern\fprq0\fcharset0 Courier New;}{\f10\froman\fprq2\fcharset2 Symbol;}{\f11\fmodern\fprq0\fcharset0 Courier{\*\falt Courier New};}{\f12\fnil\fprq2\fcharset0 AGaramond{\*\falt Times New Roman};}{\f13\fnil\fprq2\fcharset0 XPCopperhead;}{\f14\fswiss\fprq2\fcharset0 Tahoma;}{\f15\fnil\fprq2\fcharset0 Arial;}{\f16\froman\fprq2\fcharset0 DejaVu Sans;}{\f17\fnil\fprq2\fcharset134 SimSun{\*\falt \'cb\'ce\'cc\'e5};}{\f18\froman\fprq2\fcharset128 @MS PMincho;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red128\green0\blue128;\red0\green0\blue0;\red255\green0\blue0;\red255\green255\blue255;\red255\green255\blue0;\red128\green128\blue128;}
{\stylesheet{\s1\li0\ri0\lin0\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\snext1 Normal;}
{\s2\li0\ri0\lin0\rin0\fi720\sb240\sa120\keepn\sl360\slmult1\qj\nooverflow\faroman\rtlch\af16\afs28\lang1025\ltrch\dbch\af16\langfe255\hich\f8\fs28\lang1033\loch\f8\fs28\lang1033\sbasedon1\snext3 Heading;}
{\s3\li0\ri0\lin0\rin0\fi720\sb240\sl480\slmult0\ql\nooverflow\faauto\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext3 Body Text;}
{\s4\li0\ri0\lin0\rin0\fi720\sb240\sl480\slmult0\nooverflow\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs24\lang1033\loch\f2\fs24\lang1033\sbasedon3\snext4 List;}
{\s5\li0\ri0\lin0\rin0\fi0\sa120\sl240\slmult1\ql\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs24\lang1033\b\loch\f2\fs24\lang1033\b\sbasedon1\snext1 caption;}
{\s6\li0\ri0\lin0\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs24\lang1033\loch\f2\fs24\lang1033\sbasedon1\snext6 Index;}
{\s7\ls0\ilvl0\outlinelevel0\li720\ri0\lin720\rin0\fi-720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1{\*\soutlvl0} heading 1;}
{\s8\ls0\ilvl1\outlinelevel1\li1440\ri0\lin1440\rin0\fi-720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1{\*\soutlvl1} heading 2;}
{\s9\ls0\ilvl2\outlinelevel2\li1728\ri0\lin1728\rin0\fi-288\sb240\scaps\sl480\slmult0\qc\ls1\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs28\lang1033\b\loch\f7\fs28\lang1033\b\sbasedon7\snext1{\*\soutlvl2} heading 3;}
{\s10\ls0\ilvl3\outlinelevel3\li2016\ri0\lin2016\rin0\fi-288\sb240\scaps\sl480\slmult0\qc\ls1\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs28\lang1033\b\loch\f7\fs28\lang1033\b\sbasedon7\snext1{\*\soutlvl3} heading 4;}
{\s11\ls0\ilvl4\outlinelevel4\li2304\ri0\lin2304\rin0\fi-288\sb240\scaps\sl480\slmult0\qc\ls1\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs28\lang1033\b\loch\f7\fs28\lang1033\b\sbasedon7\snext1{\*\soutlvl4} heading 5;}
{\s12\ls0\ilvl5\outlinelevel5\li2592\ri0\lin2592\rin0\fi-288\sb240\scaps\sl480\slmult0\qc\ls1\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs28\lang1033\b\loch\f7\fs28\lang1033\b\sbasedon7\snext1{\*\soutlvl5} heading 6;}
{\s13\ls0\ilvl6\outlinelevel6\li2880\ri0\lin2880\rin0\fi-288\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1{\*\soutlvl6} heading 7;}
{\s14\ls0\ilvl7\outlinelevel7\li3168\ri0\lin3168\rin0\fi-288\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1{\*\soutlvl7} heading 8;}
{\s15\ls0\ilvl8\outlinelevel8\li3888\ri0\lin3888\rin0\fi-720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1{\*\soutlvl8} heading 9;}
{\s16\li5040\ri0\lin5040\rin0\fi720\sl240\slmult0\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs24\lang1033\loch\f2\fs24\lang1033\sbasedon1\snext16 attorney;}
{\s17\li0\ri0\lin0\rin0\fi720\sb240\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext17 body text;}
{\s18\li720\ri7020\lin720\rin7020\fi720\sb240\box\brdrs\brdrw10\brdrcf1\brsp20{\*\brdrt\brdlncol1\brdlnin0\brdlnout10\brdlndist0}\brsp20{\*\brdrl\brdlncol1\brdlnin0\brdlnout10\brdlndist0}\brsp20{\*\brdrb\brdlncol1\brdlnin0\brdlnout10\brdlndist0}\brsp20{\*\brdrr\brdlncol1\brdlnin0\brdlnout10\brdlndist0}\brsp20\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext18 boxed;}
{\s19\li0\ri0\lin0\rin0\fi720\sb360\keepn\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext20 claim;}
{\s20\li1800\ri0\lin1800\rin0\fi-720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext20 E1;}
{\s21\li5040\ri0\lin5040\rin0\fi720\sb480\sl480\slmult0\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs24\lang1033\loch\f2\fs24\lang1033\sbasedon1\snext21 closing;}
{\s22\li720\ri0\lin720\rin0\fi720\sb240\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f11\fs24\lang1033\loch\f11\fs24\lang1033\sbasedon1\snext22 code;}
{\s23\li2160\ri0\lin2160\rin0\fi-720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon20\snext23 E2;}
{\s24\li720\ri0\lin720\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext24 Element;}
{\s25\li0\ri0\lin0\rin0\fi720\sb240\sl360\slmult1\qc\tqc\tx4680\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs26\lang1033\loch\f2\fs26\lang1033\sbasedon1\snext25 footer;}
{\s26\li0\ri0\lin0\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs20\lang1033\loch\f7\fs20\lang1033\sbasedon1\snext26 footnote text;}
{\s27\li0\ri-720\lin0\rin-720\fi0\sl480\slmult0\ql\tqr\tx9540\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f12\fs24\lang1033\loch\f12\fs24\lang1033\sbasedon1\snext27 header;}
{\s28\li1800\ri0\lin1800\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1 Index 6;}
{\s29\li360\ri0\lin360\rin0\fi-360\sb240\sl480\slmult0\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext29 List Bullet;}
{\s30\li1800\ri0\lin1800\rin0\fi-360\sb240\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext30 Method steps;}
{\s31\li0\ri0\lin0\rin0\fi720\sb240\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f11\fs20\lang1033\loch\f11\fs20\lang1033\sbasedon1\snext31 nettext;}
{\s32\li720\ri0\lin720\rin0\fi720\sb240\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext32 Normal indent;}
{\s33\li0\ri0\lin0\rin0\fi720\sb240\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext33 Preamble;}
{\s34\li0\ri0\lin0\rin0\fi720\sb240\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext34 Publication;}
{\s35\li1440\ri720\lin1440\rin720\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext35 quote;}
{\s36\li5040\ri0\lin5040\rin0\fi720\sl240\slmult0\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs24\lang1033\loch\f2\fs24\lang1033\sbasedon1\snext36 regno;}
{\s37\li0\ri0\lin0\rin0\fi720\sb240\sa60\scaps\sl360\slmult1\qc\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs28\lang1033\b\loch\f7\fs28\lang1033\b\sbasedon1\snext38 Title;}
{\s38\li0\ri0\lin0\rin0\fi720\sb240\sa120\keepn\sl360\slmult1\qc\nooverflow\faroman\rtlch\af16\afs28\lang1025\ai\ltrch\dbch\af16\langfe255\hich\f8\fs28\lang1033\i\loch\f8\fs28\lang1033\i\sbasedon2\snext3 Subtitle;}
{\s39\li0\ri0\lin0\rin0\fi720\sb240\sl360\slmult1\qc\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f13\fs24\lang1033\b\loch\f13\fs24\lang1033\b\sbasedon1\snext39 Title of Invention;}
{\s40\li540\ri180\lin540\rin180\fi-540\sb240\sl360\slmult0\qj\tx540\tldot\tqr\tx9440\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1 toc 1;}
{\s41\li720\ri720\lin720\rin720\fi-360\sb240\sl360\slmult0\qj\tldot\tqr\tx9440\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1 toc 2;}
{\s42\li1440\ri720\lin1440\rin720\fi-360\sb240\sl360\slmult0\qj\tldot\tx8280\tqr\tx8640\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext1 toc 3;}
{\s43\li2880\ri0\lin2880\rin0\fi-720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon23\snext43 E3;}
{\s44\li0\ri0\lin0\rin0\fi0\sl240\slmult1\qj\tx252\tx540\tldot\tqr\tx9440\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon40\snext44 Table;}
{\s45\li0\ri0\lin0\rin0\fi0\sl240\slmult1\qc\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext45 TableTitle;}
{\s46\li0\ri0\lin0\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs20\lang1033\loch\f7\fs20\lang1033\sbasedon1\snext46 Comment Text;}
{\s47\li0\ri0\lin0\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs20\lang1033\loch\f7\fs20\lang1033\sbasedon1\snext47 endnote text;}
{\s48\li540\ri0\lin540\rin0\fi0\sl240\slmult1\ql\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext48 zcc2;}
{\s49\li-1080\ri0\lin-1080\rin0\fi0\sb240\sl480\slmult0\ql\tx720\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon17\snext1 element0 (preamble);}
{\s50\li-3240\ri0\lin-3240\rin0\fi0\sl480\slmult1\ql\tx1980\aspalpha\faauto\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext50 Numbered0001;}
{\s51\li-720\ri0\lin-720\rin0\fi0\sl480\slmult1\ql\tx1980\aspalpha\faauto\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext51 Numbered0100;}
{\s52\li0\ri0\lin0\rin0\fi0\sb100\sa100\sl240\slmult1\ql\aspalpha\faauto\rtlch\af7\afs24\lang1025\ltrch\dbch\af17\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext52 Normal (Web);}
{\s53\li360\ri0\lin360\rin0\fi720\sa120\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext53 List Continue;}
{\s54\li360\ri0\lin360\rin0\fi720\sa120\sl360\slmult1\qj\nooverflow\faroman\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon1\snext54 Body Text Indent;}
{\s55\li0\ri0\lin0\rin0\fi720\sl360\slmult1\qj\nooverflow\faroman\rtlch\af14\afs16\lang1025\ltrch\dbch\af7\langfe255\hich\f14\fs16\lang1033\loch\f14\fs16\lang1033\sbasedon1\snext55 Balloon Text;}
{\s56\li0\ri0\lin0\rin0\fi720\sb240\sl480\slmult0\nooverflow\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033\sbasedon3\snext56 Frame contents;}
{\s57\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\sl360\slmult1\qj\nooverflow\faroman\rtlch\af16\afs21\lang1025\ab\ltrch\dbch\af16\langfe255\hich\f8\fs21\lang1033\b\loch\f8\fs21\lang1033\b\sbasedon2\snext3 Heading 10;}
{\*\cs59\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f3\fs24\lang1033\b\loch\f3\fs24\lang1033\b WW8Num2z0;}
{\*\cs60\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs18\lang1033\loch\f4\fs18\lang1033 WW8Num3z0;}
{\*\cs61\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f5\fs18\lang1033\loch\f5\fs18\lang1033 WW8Num3z1;}
{\*\cs62\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f6\fs18\lang1033\loch\f6\fs18\lang1033 WW8Num3z2;}
{\*\cs63\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs18\lang1033\loch\f4\fs18\lang1033 WW8Num4z0;}
{\*\cs64\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f5\fs18\lang1033\loch\f5\fs18\lang1033 WW8Num4z1;}
{\*\cs65\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f6\fs18\lang1033\loch\f6\fs18\lang1033 WW8Num4z2;}
{\*\cs66\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs18\lang1033\loch\f4\fs18\lang1033 WW8Num5z0;}
{\*\cs67\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f5\fs18\lang1033\loch\f5\fs18\lang1033 WW8Num5z1;}
{\*\cs68\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af15\langfe255\hich\f6\fs18\lang1033\loch\f6\fs18\lang1033 WW8Num5z2;}
{\*\cs69\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033 Default Paragraph Font;}
{\*\cs70\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033 Absatz-Standardschriftart;}
{\*\cs71\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033 WW-Absatz-Standardschriftart;}
{\*\cs72\cf0\rtlch\af9\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f9\fs24\lang1033\loch\f9\fs24\lang1033 WW8Num6z0;}
{\*\cs73\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 WW8Num6z2;}
{\*\cs74\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num6z3;}
{\*\cs75\cf0\rtlch\af7\afs24\lang255\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 WW8Num11z0;}
{\*\cs76\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f9\fs24\lang1033\loch\f9\fs24\lang1033 WW8Num11z1;}
{\*\cs77\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 WW8Num11z2;}
{\*\cs78\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num11z3;}
{\*\cs79\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f3\fs24\lang1033\b\loch\f3\fs24\lang1033\b WW8Num14z0;}
{\*\cs80\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f3\fs24\lang1033\b\loch\f3\fs24\lang1033\b WW8Num16z0;}
{\*\cs81\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num16z1;}
{\*\cs82\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num20z0;}
{\*\cs83\cf0\rtlch\af9\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f9\fs24\lang1033\loch\f9\fs24\lang1033 WW8Num20z1;}
{\*\cs84\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 WW8Num20z2;}
{\*\cs85\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f3\fs24\lang1033\b\loch\f3\fs24\lang1033\b WW8Num22z0;}
{\*\cs86\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num22z1;}
{\*\cs87\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f3\fs24\lang1033\b\loch\f3\fs24\lang1033\b WW8Num24z0;}
{\*\cs88\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num24z1;}
{\*\cs89\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num35z0;}
{\*\cs90\cf0\rtlch\af9\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f9\fs24\lang1033\loch\f9\fs24\lang1033 WW8Num35z1;}
{\*\cs91\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 WW8Num35z2;}
{\*\cs92\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f3\fs24\lang1033\b\loch\f3\fs24\lang1033\b WW8Num36z0;}
{\*\cs93\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num36z1;}
{\*\cs94\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f3\fs24\lang1033\b\loch\f3\fs24\lang1033\b WW8Num39z0;}
{\*\cs95\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num39z1;}
{\*\cs96\cf0\rtlch\af9\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f9\fs24\lang1033\loch\f9\fs24\lang1033 WW8Num40z0;}
{\*\cs97\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 WW8Num40z2;}
{\*\cs98\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8Num40z3;}
{\*\cs99\cf0\rtlch\af10\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 WW8NumSt33z0;}
{\*\cs100\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033 WW-Default Paragraph Font;}
{\*\cs101\cf0{\*\updnprop10000}\up2\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs16\lang1033\loch\f0\fs16\lang1033\sbasedon100 Footnote Symbol;}
{\*\cs102\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f7\fs18\lang1033\i\loch\f7\fs18\lang1033\i\sbasedon100 Line numbering;}
{\*\cs103\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033\sbasedon100 Page Number;}
{\*\cs104\cf2\ul\ulc0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033\sbasedon100 Internet link;}
{\*\cs105\cf3\ul\ulc0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033\sbasedon100 Visited Internet Link;}
{\*\cs106\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs16\lang1033\loch\f0\fs16\lang1033\sbasedon100 Comment Reference;}
{\*\cs107\cf0\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f0\fs24\lang1033\loch\f0\fs24\lang1033\sbasedon100 Endnote Symbol;}
{\*\cs108\cf4\embo\rtlch\af15\afs24\lang255\ltrch\dbch\af15\langfe255\hich\f7\fs16\lang1024\loch\f7\fs16\lang1024\sbasedon100 zzmpTrailerItem;}
{\*\cs109\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af6\langfe255\hich\f6\fs18\lang1033\loch\f6\fs18\lang1033 Bullet Symbols;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext ;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext ;}{\levelnumbers;}\fi-720\li1440}
{\listlevel\levelnfc3\leveljc0\levelstartat1\levelfollow0{\leveltext \'02.\'02;}{\levelnumbers\'02;}\fi-288\li1728}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02.\'03;}{\levelnumbers\'02;}\fi-288\li2016}
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'02)\'04;}{\levelnumbers\'02;}\fi-288\li2304}
{\listlevel\levelnfc2\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'05;}{\levelnumbers\'03;}\fi-288\li2592}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'06;}{\levelnumbers\'03;}\fi-288\li2880}
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'07;}{\levelnumbers\'03;}\fi-288\li3168}
{\listlevel\levelnfc2\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'08;}{\levelnumbers\'03;}\fi-720\li3888}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext ;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext ;}{\levelnumbers;}\fi-720\li1440}
{\listlevel\levelnfc3\leveljc0\levelstartat1\levelfollow0{\leveltext \'02.\'02;}{\levelnumbers\'02;}\fi-288\li1728}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02.\'03;}{\levelnumbers\'02;}\fi-288\li2016}
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'02)\'04;}{\levelnumbers\'02;}\fi-288\li2304}
{\listlevel\levelnfc2\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'05;}{\levelnumbers\'03;}\fi-288\li2592}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'06;}{\levelnumbers\'03;}\fi-288\li2880}
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'07;}{\levelnumbers\'03;}\fi-288\li3168}
{\listlevel\levelnfc2\leveljc0\levelstartat1\levelfollow0{\leveltext \'03()\'08;}{\levelnumbers\'03;}\fi-720\li3888}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls0}{\listoverride\listid2\listoverridecount0\ls1}}
{\*\revtbl {Unknown;}{xwen;}}

{\info{\title INTELLIGENT DATA SEARCHSOFTWARE ENGINE}{\author Derek E. Pappas}{\creatim\yr2007\mo8\dy18\hr16\min21}{\author xwen}{\revtim\yr2008\mo3\dy4\hr12\min22}{\printim\yr2003\mo10\dy25\hr15\min3}{\comment StarWriter}{\vern6800}}\deftab720\lytprtmet
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn720\margbsxn720\headery0{\*\headeryb664\headerxl0\headerxr0\headeryh720}{\header \pard\plain \s27\sl240\slmult1\qr\tqr\tx9540\nooverflow\faroman\margrsxn-187\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f12\fs24\lang1033\loch\f12\fs24\lang1033 {\rtlch \ltrch\loch\f12\fs24\lang1033\i0\b0 CSL001}
\par }
\footery0{\*\footeryt664\footerxl0\footerxr0\footeryh720}{\footer 
\pard\plain\pard\plain \absw847\absh-595\pvpara\posy1\phcol\posxc{\*\flymaincnt69\flyvert64\flyhorz2\flyanchor4}\s25\sl360\slmult1\qc\tqc\tx4680\nooverflow\faroman\margtsxn240\margbsxn0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs26\lang1033\loch\f2\fs26\lang1033{\field{\*\fldinst \\page}{\fldrslt 24}}{\rtlch \ltrch\loch\*\cs103\cf0 }
\par \pard
\pard\plain \s25\sl-200\slmult0\qr\tqc\tx4680\tqr\tx9360\nooverflow\faroman 
\par }
\pgdscnxt0 Standard;}}
{\*\pgdscno0}\paperh15840\paperw12240\margl1440\margr1440\margt720\margb720\sectd\sbknone\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1440\headery720{\header \pard\plain \s27\sl240\slmult1\qr\tqr\tx9540\nooverflow\faroman\margrsxn-187 {\rtlch \ltrch\loch\f12\fs24\lang1033\i0\b0 CSL001}
\par }
\footery720{\footer 
\pard\plain\pard\plain \absw847\absh-595\pvpara\posy1\phcol\posxc{\*\flymaincnt69\flyvert64\flyhorz2\flyanchor4}\s25\sl360\slmult1\qc\tqc\tx4680\nooverflow\faroman\margtsxn960\margbsxn720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f2\fs26\lang1033\loch\f2\fs26\lang1033{\field{\*\fldinst \\page}{\fldrslt 24}}{\rtlch \ltrch\loch\*\cs103\cf0 }
\par \pard
\pard\plain \s25\sl-200\slmult0\qr\tqc\tx4680\tqr\tx9360\nooverflow\faroman 
\par }
\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain {\listtext\pard\plain \li720\ri360\lin720\rin360\fi-720\scaps\f7\fs28\b\f7\fs28\b\f7\fs20\lang1025\sl360\slmult1\qc\tx720\nooverflow\faroman \tab}\ltrpar\s7\ls0\ilvl0\outlinelevel0\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0{\rtlch \ltrch\loch\f7\fs28\lang1033\i0\b\caps\cf1\ul\ulc0\ltrch\dbch flexible and efficient method for Computer chip design}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\caps\cf1\af7\ul\ulc0\af7\af7\lang1025\sl360\slmult1\qc\tx720\tx5040\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\caps\cf1\sl360\slmult1\qc\tx720\tx5040\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\caps\cf1\f7\ul\ulc0\f7\fs24\f7\lang1025\sl360\slmult1\qc\tx720\tx5040\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\qj\nooverflow\faroman\li1440\ri0\lin1440\rin0\fi-720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 Background}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\qj\tx720\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\cf1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi720\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 The present disclosure relates to computer chip design technologies.}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx720\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 Conventional computer chips are commonly designed with schematics of the gates and their connections. Designing computer circuits using gates is a slow process. Hardware description languages and tools are developed without requiring details to describe ci
rcuits. A compiler is used to synthesize/transform files in Hardware Description Language (HDL) into circuits, thus abstracting the design description. The software describes the functional behavior or structural Boolean equations but does not describe the
 physical implementation of the actual circuits. Instead, a synthesis compiler determines the physical timing and hence the gate sizes and topology pf the circuits. A designer of a computer chip can create a software description of a computer chip design u
sing in Register Transfer Language (RTL) code or drawing schematics. This process can be quite time consuming for the designer because all implementation details are described in software and gates. Designs and verification environments need to be interfac
ed with one another in order to verify the design with known good values. Creating the verification environment and connecting the stimulus and expected vectors to the design are typically done manually, which can be quite labor intensive. }
\par \pard\plain \ltrpar\s3\sl360\slmult1\qj\tx720\nooverflow\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\caps\cf1\f7\ul\ulc0\f7\fs24\f7\lang1025\sl360\slmult1\qc\tx720\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\caps\cf1\sl360\slmult1\qc\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 Summary}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx0\tx720\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx0\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab In a general aspect, the present invention relates to }
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx0\tx720\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx0\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ In another general aspect, the present invention relates to }}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx0\tx720\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\qj\nooverflow\faroman\li1440\ri0\lin1440\rin0\fi-720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ In another general aspect, the present invention relates to }}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx0\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx0\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Implementations of the language may include one or more of the following.  }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The disclosure may include one or more of the following advantages. The disclosed systems and methods provide more efficient tools for circuit design and verification compared to conventional systems. A high level language is used to generate equivalent c
onstants and functions in different languages. The equivalent code in different languages eliminates parallel code streams and guarantees that the different teams are using the same numbers and methods. A high level language specification is compiled and t
he compiler generates RTL and C++ code and documentation in different languages and forms from the same original specification.}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx0\tx720\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx0\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ In a general aspect, a method, including a high level language that is used to specify and is compiled to create parts of computer chip designs, verification frameworks, and simulator skeletons. The missing parts are in turn designed by software programme
rs and designers and are then in turn \'93plugged\'94 into the frameworks and skeletons to form a working design, verification environment, and simulator. While many of the elements described below are available in point tools we are not aware of a single soluti
on in the industry that offers the combined features and hence efficiency of the solution described in this patent.}}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab In another general aspect, the present invention relates to a method, including which uses}}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1  a higher level of design abstraction  and design capture mechanism to capture the cross functional relationships between functional units on a chip which is not pos
sible with an RTL language or schematics. The higher level language must describe the architectural details at a higher level. The higher level language must be a language that can describe the architecture of the chip, the implementation \'93skeleton\'94, and t
he verification framework of the chip. The high level language is then compiled and it generates RTL and C++ code and documentation.}}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\cf1\sl360\slmult1\ql\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch         }{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab In yet another general aspect, the present invention relates to a method, including A shared specification that has one source to avoid confusion and misunderstandings, eliminate duplication of the source in documents and source code, and to facil
itate rapid changes to the specification which can be immediately propagated throughout the design team. A single programmatic source for the specification achieves all of the above goals. \tab }
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab A set of language constructs that describe the various aspects of chip architecture specifications, chip verification  specifications, and chip design implementations and a compiler which can check the different parts of the specification against one anot
her. This is not available in other tools that we know of.}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\qj\nooverflow\faroman\li1440\ri0\lin1440\rin0\fi-720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab The method can further include constructing the object models comprising a plurality of categories each defined by a category name, wherein each of plurality of categories is associated with a plurality of language syntax elements in the language, wherein
 each language syntax element is associated with other language syntax elements. }
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\cf1\sl360\slmult1\ql\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 The method can further include constructing the verification environment automatically and connecting the stimulus and expected vectors to the design using the single interconnect and verification component specification. }
\par \pard\plain {\listtext\pard\plain \li1728\ri360\lin1728\rin360\fi-288\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx0\tx720\nooverflow\faroman \tab}\ltrpar\s9\ls0\ilvl2\outlinelevel2\scaps\sl480\slmult0\qc\tx0\tx720\ls1\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs28\lang1033\b\loch\f7\fs28\lang1033\b{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The disclosed systems and methods provide a unified tool solution that can replace several conventional manual tools for circuit design and verification, which results in significant savings in time and cost.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\caps\cf1\f7\ul\ulc0\f7\fs24\f7\lang1025\sl360\slmult1\qc\tx720\tx5040\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\caps\cf1\sl360\slmult1\qc\tx720\tx5040\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 Brief Description of the Drawings}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab The following drawings, which are incorporated in and form a part of the specification, illustrate embodiments of the present invention and, together with the description, serve to explain the principles of the invention.}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx3420\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 1 is a schematic flow diagram for conventional CSL design and verification. }
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 2 is a schematic flow diagram of improved process for CSL design and verification in accordance to the present invention. }
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 3 illustrates front-end flow for RTL and C++ code generations. }
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 4 illustrates an ISA compatible with the CSL in the improved process for CSL design and verification in Figure 2.}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 5 illustrates a memory map compatible with the CSL in the improved process for CSL design and verification in Figure 2.}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 6 illustrates interfaces between two modules across hierarchical boundaries compatible with the CSL in the improved process for CSL design and verification in Figure 2.}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 7 illustrates interactions between two modules across hierarchical boundaries in Figure 6.}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Figure 8 illustrates an exemplified instruction set architecture compatible with the CSL in the improved process for CSL design and verification in Figure 2.}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\cf1\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\caps\cf1\f7\ul\ulc0\f7\fs24\f7\lang1025\sl360\slmult1\qj\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\caps\cf1\sl360\slmult1\qj\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\caps\cf1\f7\ul\ulc0\f7\fs24\f7\lang1025\sl360\slmult1\qc\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\caps\cf1\sl360\slmult1\qc\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 detailed description}
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\ql\tx720\tx1440\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab The present specification addresses several drawbacks in conventional chip design, design verification, and design workflows. }
\par \pard\plain {\listtext\pard\plain \li1440\ri360\lin1440\rin360\fi-720\keepn\scaps\f7\ul\ulc0\f7\fs24\f7\fs20\lang1025\sl360\slmult1\tx720\tx1440\nooverflow\faroman \tab}\ltrpar\s8\ls0\ilvl1\outlinelevel1\sl360\slmult1\qj\nooverflow\faroman\li1440\ri0\lin1440\rin0\fi-720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab Examples of chip design languages are Verilog and VHDL which are used to describe circuits using behavioral and structural descriptions. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab CSL is a high level language used to capture a chip design's architecture, design implementation, and verification infrastructure details. RTL describes computer designs at a logic level. CSL describes cross functional areas such as the chip's memory map,
 the chip's instruction set architecture, the chip's hierarchy and interconnect, the aggregate structures such as special registers, FIFO's and register files, connections between simulation models and the test benches used to verify designs and the design
s. Moreover, the CSL language is used to implement more complex aggregate structures such as networks on a chip, SOC fabrics, hierarchical MBIST.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab CSL is an object oriented language that uses many of the same syntax elements as C++ (classes, constructors, inheritance) and additional syntactic sugar borrowed from RTL languages (formal to actual mappings, bit ranges).}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The CSL compiler (CSLC) parses CSL files, creates an object model in memory, elaborates the object model using algorithms to transform the higher level description into a lower level detailed model which is the implementation model, checks the implementat
ion model for correctness, and finally generates RTL, C++, and documentation.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab One of the main features of CSL and cslc is the }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7 generation of the same information}{ in multiple output languages. This reduces and/or eliminates the \'93book keeping\'94 required to ensure that the different language files for a particular aspect of the design c
ontain the same information. Different teams on the project need to use the same (including but not limited to) numbers, symbol names, and protocols but need to code in different languages. Use of a specification with these numbers, symbol names, and proto
cols which is then compiled into different languages ensures that all teams use the same specification concurrently. A single CSL source for the specification can be checked by a compiler for specification correctness. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\rtlch In the present specification, chip components can include algorithmic chip components and infrastructure chip components.  Connections can include connections between chip components and chip components, connections between verification components and chi
p components, and connections between verification components and verification components. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1\rtlch \tab A functional simulator infrastructure can include C++ simulator's design hierarchy and interconnect, any memories or register files which state data is extracted from, the generated C++ constants and functions representing things like bit field widths, me
mory addresses, instruction set opcodes, and other constants. Functional simulator can be a cycle based C++ simulator}
\par \pard\plain \ltrpar\s1\cf1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Verification refers to components or infrastructure that is not an actual design implementation of the chip in RTL. Test bench diagram shows the verification infrastructure:}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 the C++ simulator state data writers-they generate files containing memory images when a specific transaction takes place the C++ simulator vector writers-they generate files containing vectors when a specific transaction takes place. In a test bench, veri
fication infrastructure can include the vector memories and address generator.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A chip infrastructure is the part of the chip which are not related to algorithms and which can be generated automatically by the CSL compiler. Examples of chip infrastructure include the design hierarchy and interconnects, memories or register files from
 which state data is extracted, the generated C++ constants and functions representing properties like bit field widths, memory addresses, instruction set opcodes, and other constants.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab A cross functional area is defined as a set of related functions which are defined across many functional units. Memory maps affect }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7 many functional units}{ on a chip. The hierarchy and interconnect on a chip affect many units. The instruction set architectu
re (ISA) affects many units and defines to a certain extent the pipeline(s) on chip. These cross functional areas need to be specified in architecture, implemented by designers, tested by the verification team, used by the software team, and documented by 
the documentation team. The cross functional areas are therefore a shared specification used across the chip and by many different teams.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab In addition, cross functional areas are related to each other. This will be described later in this document. Relationships between cross functional areas in the past have been checked by generating code, checking for compilation errors and simulating and
 checking for simulation errors. This process is expensive in terms of engineering time, computing time and resources, and EDA licenses for RTL simulation tools. Finding errors in the specification prior to simulation is facilitated by using a specificatio
n language (CSL), which is checked by a specification compiler (CSLC).}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx3420\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\chcbpat7 Figure 1}{\cf1  is a schematic flow diagram for conventional CSL design and verification. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Modern designs have connections between connectivity objects (signals, port, signal groups, and interfaces) and containers (FIFO, Register Files, memories) and registers and functional logic. Connections between these objects can be made manually or using
 point to point connections and an auto router. A point to point connection is a set of end points in functional unit (ports, pins on combinational and state elements,...) that are connected to other end points. The rules for making the connections are def
ined in academic books. Driver contention is to be avoided. For example, a simple wire must have a one driver and one or more receivers. The connections between the end point can traverse through the design hierarchy (e.g. in Verilog RTL the design hierarc
hy is created with modules, module interfaces  which contain ports, and instantiations of the module instances with formal to actual mappings connecting upper level signals and ports to the module instance's ports). Intermediate signals in modules may only
 be connected to other ports and signals and not to logic. The end points are connected to logic elements and state elements (flip flips, registers, memories,...) The connections between the end points can vary depending on the architecture and design/impl
ementation choices made by the architecture and design teams. Limitations in in the number of metal layers between block boundaries (referred to as \'93metal limited\'94 in designer jargon) some times is discovered late in the design process and requires changes
 in the RTL design hierarchy and RTL module interfaces. Changes in the RTL design hierarchy ripple through to the test benches and simulator interfaces and vectors produced by the simulators for verification of the design under test. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7 Making hierarchy and interface changes late in the design cycle (project) can be very expensive and delay the development of the project.}{ Automating the design hierarchy and interconnect generation process reduces the impact of design changes by facilitat
ing rapid changes in the design hierarchy and interconnect without affecting the underlying functional logic of the design. Automation of the design hierarchy and interconnect generation process can be achieved by using a high level language to describe th
e point to point connections on the chip and the design hierarchy. The point to point connections on the chip are routed from leaf module to leaf module through the design hierarchy using a automatic routing tool to create the intermediate connections in t
he modules between the two endpoints. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b [Derek, please add more details about the problem shown in Figure 1]}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\cf1\sl360\slmult1\ql\tx720\tx3420\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx3420\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab To address the above described problems, referring to }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\chcbpat7 Figures 2}{\cf1  and 3, a process is shown to improve CSL design and verification.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL enumerated Type Specification}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab Enumerated types which are identical to C++ enumerated types may be specified.  Enumerated types may be associated with signals and fields. ACSL can receive codes from source files such as a CSL library, Verilog, \'85 }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\ltrch\dbch\hich\b\loch\b [please add soruces]}{ The CSL facilitates
 the architecture, design, implementation, }{\cf1 simulation, generation of test, generation of software tools }{and documentation of complex chips. A chip is a set of functional units. Units have interfaces (ports), which are connected to other ports or to the pad
s of the chip (the system interface). The functional unit hierarchy and interconnections are described using CSL. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Other high level and RTL languages do not generate decoders from enumerated types associated with hardware elements and connectivity objects (e.g. wires).  CSL generates decoders from enumerated types associated with fields in hardware elements and connec
tivity objects (e.g. wires).  The decoders are constructed correctly by the CSL compiler.  Constants in functional languages such as C++ are generated correctly by the CSL compiler and can be used to construct software which aligns information (values) in 
the correct position associated with the field in the hardware model or actual hardware that is connected to the decoder. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\ltrch\dbch\hich\b\loch\b [Derek, Please simplify the description below for Figure 2. We should focus on key invention features. Other features will be kept as trade secret]}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Register Specifications}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level language can be used to specify registers. The registers can be added to the high level language memory map specification. The registers can be addressed for read and/or write operations. The CSLC generates hardware which selects the register
s for read and/or write operations. instruction set architecture's can be associated with registers. Fields in registers can be defined. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level language register specification can be associated with other high level specifications such as but not limited to connections, memory map locations, decoders, enumerated types.  A high level language register specification can be used as a bu
ilding block to construct aggregate structures described in the hig level language.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Decoder Specifications}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A CSL can be used to specify that decoders be generated from signals, registers, fields, and instruction set architecture's. The fields can reside in signals or registers. Decoders can be generated from registers with instruction set architecture's assoc
iated with them. The decoders can have enable signals which qualify the decoder\'92s outputs. Decoders can be generated to decode the memory addresses using the CSL memory map specification.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Pipeline Specifications}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab Digital pipelines can be specified using CSL, checked for correctness by a compiler, and the compiler can then generate code in different languages for use by members of a hardware and software team. The functional units contain logic which implements an 
algorithm or  instruction set architecture as a digital pipeline. Pipelines contain pipe stages. The pipe stages in a pipeline share signals such as clock, reset, stalls, v}}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch alid, data, and control signals}{. Moreover, there are signals common to the connectio
n between each pipe stage such as data, valid, and control. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A digital pipeline can be specified using a high level language, the high level language specification can be checked for correctness by a compiler, and the compiler can then generate code in different languages for use by members of a hardware and softwa
re team. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab In fact sets of data, valid, and control signals can be modeled as three separate pipelines whose latencies, clock, reset, and stalls are connected identically in each pipeline. Branches and merges of the three different types of parallel pipelines requir
e careful design and any changes to one pipeline must be mirrored in the two other pipelines. }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch The user must use the CSL pipeline mirroring commands to associate pipelines.}{ Register leaks (data loss due to a pipeline continuing to execute when a downstream 
pipe stage is stalled) or register data duplication (as a result of failing to qualify a valid bit with a down stream stall signal) are all problems faced by designers of digital pipelines. Pipeline design and subsequent changes can be simplified  by speci
fying the digital pipeline in a CSL specification. The specification can be checked by cslc for the above mentioned problems and the designer can make the necessary changes. CSL pipelines can be combined with interconnect aggregate structures (signal group
s) to create maintainable pipelines where the definition of the signals in the pipeline is done once in a signal group and the signals are then added to the pipeline from a starting pipe stage to an ending pipe stage.  The pipeline specification can be che
cked for correctness by CSLC, the CSL compiler.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Valid bit qualification on stall and valid bit cancellation on pipe stage branch are just some of the pipeline properties checked in the CSL compiler. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A digital pipeline can be specified using CSL, checked for correctness by a compiler, and the compiler can then generate code in different languages for use by members of a hardware and software team. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A digital pipeline can be specified using a high level language can  specify that  stall signals be correctly connected to all state elements automatically. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch  }{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 The stall signal digital pipeline specification using a high level language can be checked for register leaks and duplicate data in the pipeline. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The valid bit signal digital pipeline specification using a high level language can be checked for correct qualification in branch and merge points and when the pipeline is connected to stall signal(s).  The high level language pipeline specification with
 branch points can be compiled and that the down stream merge point can have a checker to verify that only one branch has a valid bit at any point in time at the merge point.  }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The digital pipeline specification using a high level language can be used to create copies of the pipeline for use but not limited to the generation of parallel control, data, and valid pipelines.  Signals which contain many fields or group of signals wh
ich are pipelined can be connected to each input and output of the pipe stages in the  pipeline automatically and that the signals are automatically named.  A that hierarchical identifiers can be used to access parts of signals in pipelines which may conta
in many fields at any point in the pipeline.  A high level specification language can be used to specify the prefixes and and suffixes for automatically generated pipe stage signals. One example of automatic suffix generation from a high level language spe
cification is the creation of suffixes which have a pipe stage number for the automatically generated signals in each pipe stage.  The high level specification language pipeline specification can be checked for correctness and can be connected to other hig
h level specification language elements such as but not limited to registers, register files, interconnect, and FIFO's.  A high level language pipeline specification have an option to generate clock gated micro pipelines which turn on the down stream pipe 
stages one cycle in advance to avoid races between clock and data and that there is a two/three cycle \'93window\'94 of pipe stages in the pipeline and that the micro clock gating reduces the power consumption on the chip. Stages which do not have valid data as 
indicated by a a valid bit associated with data in each pipe stage are shut off. Stages downstream from the current valid pipe stage which do are off are turned on one cycle in advance in order to avoid the race between clock and data.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL FIFO Specification}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A CSL FIFO is used to specify FIFO's. CSL FIFO specifications are converted to RTL and alternate modeling languages such as C/C++. }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1  A high level language specification for FIFOs' can include the following features which are compiled and added to the gene
rated models: bypass generation, fifo added to memory map, synchronous design, asynchronous design, low/high water marks, full/empty pointers, push and pop signals, and stall calculation based on time to stop FIFO.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Register File Specification}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A CSL Register File is used to specify Register File 's. CSL Register File specifications are converted to RTL and alternate modeling languages such as C/C++. The Register File specification is used to specify the typical register file configuration opti
ons such as the number of write and read ports, create connections to registers external to the Register File by in the Register File address space, connect individual registers to the Register File inputs/outputs, and create bypass signals. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab A high level language specification for register files can include the following features which are compiled and added to the generated models: bypass generation, external registers, connect individual registers to signals or ports, and rf added to memory
 map.}
\par \pard\plain \ltrpar\s1\cf1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\cf1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Registers}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level language spec for registers can include the following features and the feature is added to the generated models: registers with certain features list a few but limited to the list, spec for }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 certain}{\cf5  }{types of registers, fields can be associate
d with registers, and registers can be connected to connectivity objects.}}
\par \pard\plain \ltrpar\s1\cf1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\cf1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Clock Tree}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\cf1 \tab All state elements can be connected to a clock in the clock domain without specifying the connection automatically if there is only one clock in the functional unit. Clock domains can be set for certain hierarchies. Gated clocks can be specified. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Different types of clock gates can be specified. Clock trees can be built and simulated in RRTL and C++. Clock trees and user/generated logic can be checked for races. Delay lines and wave shapers can be specified.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSLC object model generators}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A CSLC contains object model generators which are used to convert concise language specifications into fully elaborated models. The generators include the auto router and the auto mapper.  The high level language can specify a point to point connection be
tween two or more end points in two or more units separated by one or more units and that an auto router can automatically create the connections between the two or more end points in the intermediate units. The auto router \'93routes\'94 point to point connecti
ons in different  hierarchies. Intermediate ports and formal to actual mappings between the connection end points are created. The user can mark state elements such as registers, register file, and memories in units to be included in the memory map. The au
to mapper elaborates the memory map specification by visiting each unit  in the hierarchy and adding elements in the units which have been marked as belonging to the memory map. The type of the memory map (flat, hierarchical, or virtual) determines the add
ressing scheme that the auto mapper uses to create the memory map. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level language can specify that there are memory elements in a unit such as but not limited to registers, register files, memories, and FIFOs and that each memory element that is to be included in the memory map is marked and optionally has associa
ted memory map attributes added to the memory element and that the auto mapper walks through the memory map specification which can be in text or converted to symbolic form and that auto mapper generates the memory map in the object model of the compiler. 
}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab An auto mapper can automatically create the memory map from a high level language specification.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b Cross functional relationships}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 CSL types have relationships that create a system for specifying chip designs that has not been previously available in one language and compiler. A high level language can specify the relationships between different design components. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab The }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7 cross functional relationships}{ can be checked by the high level language compiler. The following is a list of some of the cross functional relationships in chip designs: }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li720\ri360\lin720\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 signal{\*\bkmkstart DDE_LINK1} {\*\bkmkend DDE_LINK1}and field}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li720\ri360\lin720\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 field and enumerated type}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 field and decoder generation}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 interconnect_connectivity_objects and vector specification}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 fifo and state data}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 memory and state data}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 register_file and state data}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 vector and test bench}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 state data and test bench}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 memory map and interconnect}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 memory map and registers}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 registers and field}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 registers and instruction set architecture}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 registers and interconnect}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 instruction set architecture and decoder generation}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 pipeline and interconnect}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 pipeline and register file}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 pipeline and fifo}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSLC Specification Checkers}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx3420\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx3420\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The CSL compiler includes specification checkers which verify that the CSL specification are correct. It is not enough to check individual cross functional specifications since the individual cross functional specifications affect each other. Checks betwe
en the individual cross functional specifications must be made. The CSL compiler also checks for correct connections between modules based on type, direction, and width pipeline-checks for data leaks, stalls, and resource deadlocks. The CSL compiler also c
hecks for duplicate addresses.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Verification Specifications}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Functional units may be verified by modeling the external drivers and receivers of the functional units interface (input and output ports) using alternate models built in different languages. The stimulus and expect vectors, and state data generated by th
e alternate models are  used to verify the functional units. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The software which performs the following tasks is generated by the CSLC from a CSL specification. Vectors and state data are captured in the alternate model and sent to a file or connected to the functional unit test bench via inter-process communication
s.  The file format is understood by the compiler via the vector and state data specification. A file reader is created in the test bench and the file is read into a memory in the test bench, which is the correct size to hold the vector }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A set of signals to control reading the vector/state data memory are created }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 A set of signals to connect the stimulus memory to the functional unit under test are inserted into the test bench.  A set of signals to connect the expect memory to the output comparators are inserted into the test bench. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab The }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch\ltrch\dbch\hich\b\loch\b (}{automatic}{\rtlch\ltrch\dbch\hich\b\loch\b )}{ connection of the vectors/state data generated by the alternate model to the functional unit in the test bench is fully automated. The CSL interconnect, vector, state data, and test bench specification are all defined in one language. The 
inconsistencies introduced by specifying these different components in different languages and using different tools to generate the RTL and alternate model code are avoided. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Moreover, the CSLC can check the CSL interconnect, vector, state data, and test bench specification in one tool and find inconsistencies between the various specifications. Moreover, since the CSL interconnect, vector, state data, and test bench specifica
tions have been read into one object model in a single software program, the CSL syntax supports reading objects such as the entire set of output signals from a functional unit using one statement. Using an aggregate connectivity structure which refers to 
a group of objects facilitates changes in the sub objects (name and width changes, additions and deletions) without having to change the upper level interface name which is used to specify that the output signals constitute a vector. The aggregate connecti
vity structure is routed from one unit to another unit. The underlying signals can be modified without affecting the routing since the aggregate connectivity structure is auto routed from end point to end point in the object model.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Verification of functional units on chips and of chips requires the development of vector and state data (two dimensional vectors from two dimensional memory elements) from a golden reference. Both stimulus vectors and expected vectors/state data are requ
ired in order to test the the design under test. The order of the signal values and the widths of the signals, the size of the memories need to be the same in the golden reference model (the functional simulator), the communication mechanism (file/socket),
 the mechanism in the test bench which applies the vectors to the DUT, loads the binary instruction files into the DUT instruction memories if present, and compares the outputs of the DUT with the expected vectors.}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\cf1\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\chcbpat7 Figure 4}{\cf1  illustrates an ISA compatible with the CSL in the improved process for CSL design and verification in Figure 2.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b [Derek, please add simple description for Figure 4. A couple of paragraphs are enough]}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\cf1\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\chcbpat7 Figure 5 i}{\cf1 llustrates a memory map compatible with the CSL in the improved process for CSL design and verification in Figure 2.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\ltrch\dbch\hich\b\loch\b [Derek, please refine descriptions below for }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch\ltrch\dbch\hich\b\loch\b Memory map in F}{\ltrch\dbch\hich\b\loch\b igure 5]}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch\ltrch\dbch\hich\b\loch\b \tab CSL Memory}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level specification language can specify the dimensions of memories that are used in the chip design. A high level specification language can specify the relationship between the width of the ISA instruction word and the memory and then specify the
 width of the memory. A high level specification language can specify the relationship between a memory and a state data element and that the relationship between the state data element and the memory can be used to connect the state data writer to the mem
ory. A high level specification language can specify the relationship between binary files and the memory and that the memory load routine code can be automatically generated in different languages. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 A high level specification language can specify the FPGA, memory compiler, or hand generated memories to use in the implementation model and that the equivalent memory will be generated in the function and structural models. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch\ltrch\dbch\hich\b\loch\b \tab Memory map }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ A memory map can use one of the following address schemes: flat, hierarchical, or virtual. Memory map test generators can be built automatically to test the entire address range using write, read, and compare tests. The same memory map test(s) 
can be loaded using a side door method into the C++ simulator or the design under test.  The same memory map test(s) can be loaded using vectors written into interface of the C++ simulator or the design under test.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The functional units communicate with one another and with the system and software running on other chips via the interfaces. The functional units have address maps which are written to or read from by other functional units or by software. An address map
 associates an address or address range with a state element or aggregate state element respectively. Address buses in conjunction with operation (read/write), control and data lines write or read data to or from the state elements in the address map. Addr
ess maps for chips can be either flat (linear address range for entire chip), hierarchical (a unit address to select a functional unit and a subsequent local address to select a local state element), or virtual where the unit address and the local address 
are combined in a single address bus operation. Address buses may be implemented using different topologies such as a bus, token ring, tree, or mesh.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab A major problem arises when the functional and alternate models are written in different languages (unconnected tools). The use of different languages creates a need to assure that address map constants and functions are the same in each language.  A spec
ification language such as CSL can automatically generate }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch consistent}{ address map constants and functions. }}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\af7\af7\af7\lang1025\sl360\slmult1\tx720\tx1980\af3\ab \ltrpar\s50\cf1\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\chcbpat7 Figure 6}{\cf1  illustrates interfaces between two modules across hierarchical boundaries compatible with the CSL in the improved process for CSL design and verification in Figure 2.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b [Derek, please add simple description for Figure 6. One paragraph is enough]}
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\cf1\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl480\slmult1\ql\tx5220\aspalpha\faauto\li-3240\ri0\lin-3240\rin0\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\chcbpat7 Figure 7}{\cf1  illustrates interactions between two modules across hierarchical boundaries in Figure 6.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b [Derek, please add simple description for Figure 7. One paragraph is enough]}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\f3\b\fs24\b \ltrpar\s50\sl360\slmult1\ql\tx720\tx1980\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1 \tab Referring to }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\cf1\chcbpat7 Figure 8}{\cf1 , an exemplified instruction set architecture is shown compatible with the CSL in the improved process for CSL design and verification in Figure 2.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\ltrch\dbch\hich\b\loch\b [Derek, please refine descriptions below for }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch\ltrch\dbch\hich\b\loch\b Memory map in F}{\ltrch\dbch\hich\b\loch\b igure 5]}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL Field Specification}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Fields are bit ranges that are named objects. Fields have an upper and a lower bit range index. The field has a name. Decoders can be automatically generated from fields associated with connectivity objects and register or other state elements . Decoders 
can be automatically generated from enums  associated with fields in connectivity objects and register or other state elements . Other languages do not generate decoders from fields. The decoders are constructed correctly.  A high level language field may 
be joined with other fields using a linked list like set_next or set_previous operation and that the linked list may be added to connectivity objects and register or other state elements. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab Note that there are other applications of the linked list of fields and this claim should not be limited to just associating linked lists of fields with connectivity objects and register or other state elements. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7 A high level language field can be used to construct a hierarchical tree of fields and that the hierarchical tree of fields}{ can be implemented using different programming methods but not limited to trees or inheritance. Note that there are other applicat
ions of the hierarchical tree of fields and  this claim should not be limited to just associating linked lists of fields with connectivity objects and register or other state elements. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level language hierarchical field specification is used in the design of instruction sets.  A high level language enumerated type can be associated with a high level language field(s). A high level language field specification associated with high
 level language decoder generation method and that decoders can be automatically generated from high level language  field specification. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b CSL instruction set architecture Specification}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab Functional units and alternate models (e.g. a simulation model) may execute programs which are built from an instruction set architecture (ISA) specification written in CSL. The instruction set architecture is described using CSL. The functional units and
 the external model (e.g. a simulation model outside of the functional unit)}}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch\ltrch\dbch\hich\b\loch\b  }{that implement the instruction set architecture, and execute programs written in the instruction set architecture assembly language, need to use the same set of instruction format
s, instruction field definitions and enumerated type values.  }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7 A major problem arises when the functional and alternate models are written in different languages.}{ The use of the shared constants in the different languages by the different teams requires that the same values be generated in the different languages. Th
e constants describe the width and position of each field in each instruction format and instruction and associated functions. Additionally functions are auto generated which insert and extract values to and from the instruction words.  The constants are a
utomatically generated from a specification language such as CSL. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{ \tab  A high level specification language can be used s}}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7 pecify constant values}{ in functional areas and that }{\chcbpat7 those constants in those functional areas are related to other constants in other high level specification language functional areas}{ and that the combina
tion of the areas and constants   in the high level specification  can be compiled and the compiler can generate constants in different languages and in different files for use by different teams on a chip design project in order so that the teams have the
 same constant values represented in different languages. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level language description of an instruction set architecture in a tree or inheritance hierarchy or any other hierarchical data structure can be compiled and the compiler can automatically generate RTL and alternate model languages which eliminate
s inconsistencies between the functional unit and alternate models. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab An instruction formats and instructions can be built using hierarchies of fields. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab An enumerated types are created to specify the opcodes and other sets of select values for fields in an instruction set. The enumerated types are associated with a field in an instruction format or instruction. Instruction formats may be inherited by othe
r instruction formats or instructions or may be connected in a tree. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A ISA's specified by a high level language description can be associated with register specified by a high level language description. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{{\rtlch \ltrch\loch  }}{{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A decoder{\deleted\revauthdel1\revdttmdel1187193621 s} can be generated for fields and enums associated with registers specified by a high level language description which have an associated ISA's specified by a high level language description. }}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab The ISA has several types of information that are used in the processor data path. 1. The encoded information such as opcodes. 2. The selectors such as register file address fields. The encoded information is decoded by decoders automatically generated by
 CSL. The \'93selectors\'94 are fields. The fields are connected to signals. The signals are created by using a hierarchical identifier to refer to the signal name and then the hierarchical path to the field in the instruction. The hierarchical path includes the
 instruction name and the field name.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li720\ri360\lin720\rin360\fi0\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 For example, \line csl_signal [31:0] ir;\line ir.associate_isa(isa);\line csl_signal }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li720\ri360\lin720\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 alu_opcode(ir.isa.alu_instruction.alu_opcode.get_width()) =\~ ir.isa.alu_instruction.alu_opcode;\line selects the alu_opcode field from the signal.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab ISA can include two types of elements instruction formats and instructions which use the instruction formats. ISA elements are derived from a common base format which specifies the width of the ISA instruction formats and the name of the ISA. Sub ISA inst
ruction formats can be inherited from parent ISA formats. ISA instructions inherit an ISA instruction format. Instruction formats and instructions contain ISA fields. An ISA field is a named bit range with a width. Fields are placed into instruction format
s and fields in either absolute positions or relative to other fields or the left or right edge of the instruction. Since there is a hierarchical relationship between the ISA instructions formats and the ISA instructions and there is one root format a tree
 of ISA instructions formats and the ISA instructions may be constructed to represent the ISA. The ISA tree may then be analyzed to form instruction decoders. A hierarchical identifier is a set of names in scope holders separated by a period. An hid forms 
a hierarchical path to an element in the ISA. Hierarchical identifiers (hid) can be used to access any instruction format, instruction, field, or enum in the ISA. The hid is a reference to an object in the ISA. Operations such as decoder or signal generati
on can be performed using the hid information. ISA fields have a type. The type information is used to control the generation of hardware in the control and data paths. the type information can also be used to check the usage of the hid's in the designer's
 custom code. For example, the type information may indicate that the field is a selector which means it may be used as a mux select. Or the field may be a branch address so it must be used as an input to a branch address mux, or the field is an opcode so 
it must be decoded and used to enable or select objects.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab A high level language compiler can check the ISA specification for the following types of errors: pipeline for data and control hazards, register leaks, data duplication problems related to bad stall logic. The high level language ISA specification can ti
e the hardware registers which hold ISA instructions to the high level language interconnect specification.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\f7\fs24\f7\lang1025\sl360\slmult1\tx720\tx1980\tx7800\f3\b\fs24\b \ltrpar\s50\cf1\sl360\slmult1\ql\tx720\tx1980\tx7800\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 \tab It is understood that the disclosed systems and methods are compatible with other configurations and structures without deviating from the spirit of the present specification. }
\par \pard\plain \li1440\ri360\lin1440\rin360\fi-360\cf1\f7\b\f7\fs24\b\f7\lang1025\sl360\slmult1\qj\tx720\tx5040\f3\b\fs24\b \ltrpar\s50\cf1\sl360\slmult1\qj\tx720\tx5040\aspalpha\faauto\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \page\pard\plain \ltrpar\s54\cf1\sl360\slmult1\qj\tx720\nooverflow\nocwrap\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 {\*\bkmkstart OLE_LINK3}What is claimed is:}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 1.\tab A method for electronic circuit design, comprising:}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch \tab using a first programmable configuration language to describe in a specification: chip infrastructure, chip components, connections between chip components, relationships between the chip components, verification infrastructure verification components, re
lationships between the verification components, and relationships between the chip components and verification components; and}
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch \tab compiling the specification to generate chip components, connections between chip components, relationships between the chip components, verification components, relationships between the verification components, and relationships between the chip compone
nts and verification components in RTL and C++ codes in a second programmable configuration language.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\rtlch 2.  \tab The method of claim 1, further comprising generating }}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0{\chcbpat7\rtlch CHIP}{\rtlch and verification components in the second programmable configuration language.}}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch  }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 3.  \tab The method of claim 1, wherein the specification comprises at least one of instruction set architecture, producer consumer memory address units, the pipeline, generation of decoders from fields, or hierarchical structures used to represent components.
}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 4.  \tab The method of claim 3, wherein the step of compiling further comprises generating a test bench configured to verify designs for the chip components, connections between chip components, relationships between the chip components, verification component
s, relationships between the verification components, and relationships between the chip components and verification components, which are generated by the step of compiling.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch  }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 5.  The method of claim 1, wherein the chip components comprise register, register files, and a pipeline the design interconnect and hierarchy memory map memory instances.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\rtlch \ltrch\loch  }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 6. \tab The method of claim 1, wherein the chip infrastructure comprise interconnects and hierarchy in the chip.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 7. \tab The method of claim 1, wherein the verification infrastructure comprises component vectors and C++ simulator.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 8. \tab The method of claim 1, wherein the C++ verification infrastructure comprises at least one of vector writers and readers, state data writers, infrastructure code generated by C++ simulator, or C++ library code. }
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch 9. \tab The method of claim 8, wherein the verification infrastructure further comprise state data.}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch\ltrch\dbch\hich\b\loch\b Claims on ISA for CSL}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0\rtlch\ltrch\dbch\hich\b\loch\b Claims on memory chip for CSL}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \page\pard\plain \ltrpar\s1\ul\ulc0\sl360\slmult1\qc\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033{\ltrch\dbch\hich\loch}{\rtlch \ltrch\loch\f7\fs24\lang1033\i0\b0 ABSTRACT}
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af7\afs24\lang1025\ab\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\b\loch\f7\fs24\lang1033\b 
\par \pard\plain \ltrpar\s1\sl360\slmult1\qj\nooverflow\faroman\li0\ri0\lin0\rin0\fi720\rtlch\af7\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 
\par \pard\plain \ltrpar\s1\sl360\slmult1\tx720\nooverflow\faroman\li0\ri360\lin0\rin360\fi0\ql\rtlch\af18\afs20\lang1025\ltrch\dbch\af7\langfe255\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 {\*\bkmkend OLE_LINK3}
\par }
{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f256\froman\fcharset238\fprq2 Times New Roman CE;}{\f257\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f259\froman\fcharset161\fprq2 Times New Roman Greek;}{\f260\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f261\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f262\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f263\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f264\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f266\fswiss\fcharset238\fprq2 Arial CE;}{\f267\fswiss\fcharset204\fprq2 Arial Cyr;}{\f269\fswiss\fcharset161\fprq2 Arial Greek;}{\f270\fswiss\fcharset162\fprq2 Arial Tur;}{\f271\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f272\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f273\fswiss\fcharset186\fprq2 Arial Baltic;}{\f274\fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\rsidtbl \rsid2844680\rsid13057499
\rsid14187614}{\*\generator Microsoft Word 11.0.6568;}{\info{\author Derek E. Pappas}{\operator Derek E. Pappas}{\creatim\yr2006\mo4\dy3\hr15\min14}{\revtim\yr2006\mo4\dy3\hr15\min21}{\version3}{\edmins7}{\nofpages4}{\nofwords1601}{\nofchars9128}
{\*\company X}{\nofcharsws10708}{\vern24579}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind4\viewscale100\nolnhtadjtbl\rsidroot13057499 \fet0\sectd \linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2844680 For those of you that do not know me my name is Derek Pappas. I am the ceo of BSS. I live in silicon Valley. }{
\f1\fs20\insrsid13057499 The follow}{\f1\fs20\insrsid2844680 ing is a list of some of the things I have worked on during my career:
\par 
\par Intel P6 (Pentium) projects (Google it-the book the Pentium }{\f1\fs20\insrsid13057499 Chronicles}{\f1\fs20\insrsid2844680  is about the project), 
\par  -wrote C++ CAD tools using Lex/YACC and C analyzed IHDL and created formal properties.
\par   the formal properties were used to generate formal properties in IHDL (like Verilog/VHDL)  in synthesis
\par   and formal verification. One of the first }{\f1\fs20\insrsid13057499 industrial}{\f1\fs20\insrsid2844680  implementations of this type of formal }{\f1\fs20\insrsid13057499 analysis}{\f1\fs20\insrsid2844680 ,
\par   }{\f1\fs20\insrsid13057499 extraction}{\f1\fs20\insrsid2844680 , and code generation
\par  -Designed custom VLSI circuits utilizing precharge buses, domino logic and SRAM cells in the
\par   reservation station. Reduced planned gate count in half. Circuit was patented.
\par  -Created a tool to capture the entire Pentuim processor design hierarchy and interconnect for formal
\par   property propagation
\par  -Developed a tool which parsed Intel's internal timing file format using Lex/YACC and converted it into
\par }{\f1\fs20\insrsid13057499    Epic Pathmill and S}{\f1\fs20\insrsid2844680 ynopsys DC formats. Used b}{\f1\fs20\insrsid13057499 y Pentum compaction project in t}{\f1\fs20\insrsid2844680 he synthesis flow
\par 
\par Sun Microsystems
\par  Graphics and Imaging
\par   -developed testing methodology and verification environment (10k lines of Perl scripts) for a 3 ASIC 
\par    chip set. All ASICs worked the first time
\par   -developed a DSP processor array with fixed point operators and convolution functions
\par   -architected and managed the development of a Verilog interconnect generation tool used in some Sun 
\par    ASIC development processes. Designed grammar and initial prototype using PCCTS (precursor to
\par    antlr) and C++
\par   -introduced formal verification methods to some Sun groups
\par   -part of team which developed language parsers Verilog and object models for Verilog
\par   Sun Labs. I built the class hierarchy for the object model and the hand written tree}{\f1\fs20\insrsid13057499  }{\f1\fs20\insrsid2844680 walker in 3 months.
\par   - architected the statically scheduled hardware network for the fastest Verilog hardware accelerator on
\par     the planet. 4 group patents applied for and 2 approved so far.
\par   -designed FPGA hardware to control 64 ASIC's on a board.
\par   -designed system level state machines to control the system in different operating modes
\par 
\par Super computer startup co-founder
\par  -co-architected the memory hierarchy and cache coherence protocol and cache coherence
\par   hardware assist mechanisms and the system interconnect design.
\par  -}{\f1\fs20\insrsid13057499 startup}{\f1\fs20\insrsid2844680  cancelled due to business reasons (it was not a dot com)
\par 
\par Nvidia 
\par   -Part of H.264 team. Built DSP hardware using fixed point operation and filters 
\par   -misc EDA tool driving (timing,  synthesis, formal verification)
\par 
\par }{\b\f1\fs20\insrsid2844680 Lack of progress on prototype}{\f1\fs20\insrsid2844680 
\par I am extremely concerned about the lack of progress by the software team with respect to the development of the prototype and the failure 
to expand the software team beyond two people for 6 months. For this reason we will make several changes. They are listed below.
\par 
\par }{\b\f1\fs20\insrsid2844680 Company formation plan}{\f1\fs20\insrsid2844680 
\par I have contacted a lawyer in Iasi who will assist me in the company formation process. This will take some time. Be patient. We will form a Romanian SRL or SA company.
\par 
\par }{\b\f1\fs20\insrsid2844680 Hiring}{\f1\fs20\insrsid2844680 
\par Effective immediately the highest priority for the company as a whole is hiring smart programmers. To facilitate the hiring process we will legalize the company. See above.
\par 
\par Send resumes of candidates to jobs@bigsursoftware.com
\par 
\par }{\f1\fs20\insrsid13057499 Effectively immed}{\f1\fs20\insrsid2844680 
iately we will establish an effective interview program. This means that we will train specific junior members of the team how to interview candidates on the phone and in person. If you are n
ot chosen to interview people do not worry. We will emphasize Microsoft style conceptual interviewing and also technical knowledge interviews. Measure the persons attitude. Are they a team player? Remember being a superstar does not necessarily translate 
into being a }{\f1\fs20\insrsid13057499 productive}{\f1\fs20\insrsid2844680  team member. We people who are smart and can work with others.
\par 
\par }{\b\f1\fs20\insrsid2844680 Interview Process
\par }{\f1\fs20\insrsid2844680 1. Phone screen them. Ask them basic question to make sure that they are not lying on their resume.
\par 2. Interview the person 
\par 3. For each person you interview write up a short  paragraph on their strengths and weaknesses.
\par 4. Then meet as a group and discuss your opinions about the person.
\par 5. Management has the final say on who will be hired.
\par 
\par }{\b\f1\fs20\insrsid2844680 What we are building}{\f1\fs20\insrsid2844680 
\par We are building a chip design automation process. We are creating a tool which captures the design. The design is described using a very concise language called the chip specification language (CSL). The CSL objects are transformed into an object model ca
lled the chip design object model (CDOM). We will incrementally add more complex components (such as memory compilers) to the CSL as the hardware teams design knowledge increases. The name of the software is }{\b\f1\fs20\insrsid2844680 cslc }{
\f1\fs20\insrsid2844680 (CSL compiler).
\par 
\par }{\b\f1\fs20\insrsid2844680 Why are we building this product?}{\f1\fs20\insrsid2844680  
\par In 2015 chips will have 100x the number of transistors as compared to current chips. Current chip design teams can barely manage the complexity of current designs. A 100x increase in the number of transistors does not scale linearly in complexity }{
\f1\fs20\insrsid13057499 management}{\f1\fs20\insrsid2844680 
. In fact the complexity of the chip design project scales exponentially with the growth in the number of transistors. The increase in complexity will require a change in the methodology used to design chips.
\par 
\par }{\b\f1\fs20\insrsid2844680 Software Prot}{\b\f1\fs20\insrsid13057499 ot}{\b\f1\fs20\insrsid2844680 ype development}{\f1\fs20\insrsid2844680 
\par The development of the software prototype requires the development of some of the CSL parser and all of the Verilog }{\f1\fs20\insrsid13057499 parser, CDOM and some of the CSL}{\f1\fs20\insrsid2844680 
 classes, CSL to CDOM transformation engine, and the Verilog code generator.
\par 
\par }{\b\f1\fs20\insrsid2844680 The next stage of development 
\par }{\f1\fs20\insrsid2844680 This inv
olves the development of additional CSL classes. This really means that we need to design hardware, testbenches, C++ simulator infrastructure, and then code the software which will create the CSL objects. This requires additional parser development.

\par 
\par }{\b\f1\fs20\insrsid2844680 Graph class development
\par }{\f1\fs20\insrsid2844680 This will require the development of graph classes using BGL. The CDOM AST model will be elaborated into a graph model. The graph model will be generated with a visitor function.
\par 
\par }{\b\f1\fs20\insrsid2844680 Analysis components
\par }{\f1\fs20\insrsid2844680 The CSL and CDOM objects will be analyzed for correctness and errors. A report will be generated}{\b\f1\fs20\insrsid2844680 
\par 
\par Warning and error checking
\par }{\f1\fs20\insrsid2844680 Using the csl_warn_error document which currently has 1k warnings/errors the analysis software which analyzes the CSL and CDOM objects will be developed.
\par 
\par }{\b\f1\fs20\insrsid2844680 Project schedule}{\f1\fs20\insrsid2844680 
\par We are developing a project schedule. The initial schedule has 1,500 tasks in it. There are many more tasks to enter into the project schedule. The project schedule will be explained in a separate meeting.
\par 
\par }{\b\f1\fs20\insrsid2844680 Action Items (AI)}{\f1\fs20\insrsid2844680 
\par Each person has an action i
tem list. This list is to be maintained and kept up to date. The AI's should be prioritized within the context of what is important to the team and not what is important to you. Each person should work on tasks which they are assigned to in the project sc
hedule. If someone asks you to work on something it must be in the project schedule.
\par 
\par }{\b\f1\fs20\insrsid2844680 Weekly reports }{\f1\fs20\insrsid2844680 are due by Sunday night. NOT Monday morning. No exceptions.
\par 
\par }{\b\f1\fs20\insrsid2844680 Taxes
\par }{\f1\fs20\insrsid2844680 You are }{\f1\fs20\insrsid13057499 responsible}{\f1\fs20\insrsid2844680  for paying taxes on the wages earned. Your current status is a contractor. Your status will change to }{\f1\fs20\insrsid13057499 employee}{
\f1\fs20\insrsid2844680  after the company is legalized. We will hire an accountant who will calculate the taxes which will be deducted.
\par 
\par }{\b\f1\fs20\insrsid2844680 Build breaks and }{\b\f1\fs20\insrsid13057499 continuous}{\b\f1\fs20\insrsid2844680  integration
\par }{\f1\fs20\insrsid2844680 We have installed cruise control which is a }{\f1\fs20\insrsid13057499 continuous integration tool. When a SVN}{\f1\fs20\insrsid2844680 
 checkin occurs the server will build the entire tree, run the regressions, and send the results to the entire team via email. This mechanism will ca
tch build breaks. A build break is defined as a checkin that causes tests which previously passed to now fail. If you break the build you must immediately fix it. So it is a good idea to sync your tree and then build your tree and then run a regression ag
ainst your tree on the fast server prior to check in. Build breaks are a serious offense.
\par 
\par }{\b\f1\fs20\insrsid2844680 Standard Linux editor for the company
\par }{\f1\fs20\insrsid2844680 The standard Linux editor for the company is emacs. it is WSYWIG and it is extensible. Do not spend time learning other editors as they have limitations and their communities have built hacks on top of old user models. 
\par 
\par }{\b\f1\fs20\insrsid2844680 Action plan
\par }{\f1\fs20\insrsid2844680 All software and hardware team members should be focusing on learning and debugging the CDOM and debugging the Verilog lexer, parser, and treewalker. Everything else is unimportant.
\par 
\par The hardware team members will learn C++ so that they can }{\f1\fs20\insrsid13057499 leverage}{\f1\fs20\insrsid2844680  their time and test the CDOM and CSL classes. The testing will }{\f1\fs20\insrsid13057499 enable}{\f1\fs20\insrsid2844680 
 them to learn C++, some basic STL (vectors and maps), some OOP concepts such as }{\f1\fs20\insrsid13057499 adaptors}{\f1\fs20\insrsid2844680 
 and factory methods. Then later those that are proficient in programming will work on actual code. I estimate that this development process will take 3-9 months per HW team member depending on their programming back ground. It is }{
\f1\fs20\insrsid13057499 imperative}{\f1\fs20\insrsid2844680  that the HW team members know how to program since the software team members do not know HW.
\par 
\par The following is non-negotiable.
\par 
\par Effective immediately:
\par Everyone will learn C++ if you do not know it.
\par Everyone will learn STL if you do not know it.
\par Everyone will learn the CDOM and CSL classes when they are available.
\par Everyone will write code using the CDOM classes and the CSL classes when they are available.
\par 
\par }{\b\f1\fs20\insrsid2844680 Test generation automation}{\f1\fs20\insrsid2844680 
\par We need to automate the testing process. In the time that it takes to write 100 lines of Verilog
\par 
\par I have started writing a C++ header file for automatically generating pseudo random Verilog tests and C++ CDOM tests.
\par 
\par See projectx/tools/verilogCodeGen/verilogCodeGen
\par 
\par Note that there are two sets of classes.
\par 
\par One set returns a string (Verilog code).
\par The other set returns a pointer to a CDOM object.
\par 
\par After are done writing the test case generators using this code you will then know how to use the CDOM API and you can work on the CSL classes and the CSL to CDOM translator.
\par 
\par Then we can use the same methodology to create random tests for the CSL}{\f1\fs20\insrsid13057499  }{\f1\fs20\insrsid2844680 classes and CSL parser.
\par 
\par }{\b\f1\fs20\insrsid2844680 General Assignments}{\f1\fs20\insrsid2844680 
\par [Cristi] Please review the header file and make any changes you think are}{\f1\fs20\insrsid13057499  }{\f1\fs20\insrsid2844680 necessary. After you are done editing the header file:
\par 
\par }{\f1\fs20\insrsid2844680 [Cristi] CSl grammar and classes
\par 
\par }{\f1\fs20\insrsid2844680 [Eugen] CSL parser
\par 
\par [Andrei] Write the C++ functions to generate Verilog strings. I know you}{\f1\fs20\insrsid13057499  }{\f1\fs20\insrsid2844680 guys are just learning C++ but this is fairly easy coding and should give you good experience with C++. Go
od hardware engineers know how to program.}{\f1\fs20\insrsid13057499  }{\f1\fs20\insrsid2844680 Remember you guys are learning C++ so keep it simple.
\par 
\par [Stefan, Gabriel] You will write the C++ code to randomly generate the C++}{\f1\fs20\insrsid13057499  }{\f1\fs20\insrsid2844680 CDOM code.
\par We can generate a million lines of high quality random Veri}{\f1\fs20\insrsid13057499 l}{\f1\fs20\insrsid2844680 og and C++ CD}{\f1\fs20\insrsid13057499 OM }{\f1\fs20\insrsid2844680 tests using a few thousand lines of code.
\par 
\par [Alina] You can work on the control and data flow test}{\f1\fs20\insrsid2844680 ing of the CDOM. Read the "Code }{\f1\fs20\insrsid2844680 Complete" chapter on testing. 
\par }{\f1\fs20\insrsid2844680 
\par [Bogdan] Continue with CSl docs.
\par }{\f1\fs20\insrsid2844680 
\par 
\par }}
{\rtf1\ansi\ansicpg1251\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1049\deflangfe1049{\fonttbl{\f0\froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset204\fprq2{\*\panose 020b0604020202020204}Arial;}{\f38\froman\fcharset0\fprq2 Times New Roman;}{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f48\fswiss\fcharset0\fprq2 Arial;}{\f46\fswiss\fcharset238\fprq2 Arial CE;}{\f49\fswiss\fcharset161\fprq2 Arial Greek;}{\f50\fswiss\fcharset162\fprq2 Arial Tur;}
{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f52\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f53\fswiss\fcharset186\fprq2 Arial Baltic;}{\f54\fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1049\langfe1049\cgrid\langnp1049\langfenp1049 \snext0 Normal;}{\*\cs10 \additive 
\ssemihidden Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid721665\rsid809735\rsid992032\rsid1404863\rsid2051715\rsid3961710
\rsid5209798\rsid8854711\rsid8929976\rsid9965126\rsid10228422\rsid10974826\rsid16543554\rsid16587560}{\*\generator Microsoft Word 10.0.2627;}{\info{\author Dato}{\operator Dato}{\creatim\yr2005\mo9\dy21\hr3\min48}{\revtim\yr2005\mo9\dy21\hr4\min27}
{\version15}{\edmins39}{\nofpages2}{\nofwords658}{\nofchars3757}{\nofcharsws4407}{\vern16437}}\margl1701\margr850\margt1134\margb1134 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120
\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale100\nolnhtadjtbl\rsidroot9965126 \fet0\sectd \linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1049\langfe1049\cgrid\langnp1049\langfenp1049 {\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid9965126 
Constant Classes and evaluation of constant classes}{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid9965126 
\par There will be seperate classes for the built in types and the user defined types
\par 
\par }{\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Constructing constant expression trees}{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 
\par The ast treewalk will only call Om class constructors and in linking phase there will be real evaluators that will work with om classes and not with ast subtrees
\par 
\par }{\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Constant Types}{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 
\par There are several kinds of constants
\par -built in constant (i.e. integer) with a width defined by the spec
\par -user constant defined with a bit width defined by the user
\par -preprocessor define
\par -parameter
\par -module parameter
\par 
\par }{\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Defines
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 The software will provide support for both #define and 'define' in input source files.
\par What is the diff between #define and 'define?
\par #define is a C/C++ define
\par `define is a verilog define}{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032 
\par }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid10228422\charrsid10228422 There is no principal difference, both defines are parametrized macro definitions that are used for text substitution and should be handled by external preprocessor.
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 RTL'ers will use both types of defines depending on their build environment. The software needs to support both types of defines. 
\par }\pard \ql \li0\ri0\nowidctlpar\tx720\faauto\rin0\lin0\itap0 {\f1\fs20\cf1\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 
\par The SW will need several different constant evaluation modes
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 1. evaluate all #define's and `define`s
\par 2. evaluate all #define's
\par 3. Print out the files with the #define's and `define`s with the constant values in comments next to the defines where they are used
\par 
\par Users need to see what the values of the constants are and what the constant expressions evaluate to. 
The verilog code generators should in comments should print out the constant expression using the variable names and the numeric names in parens next to the variables.
\par }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554 There should be an }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid10228422 option which will allow different generation modes.}{
\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid16543554 
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid1404863 
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 For example a verilog code gen reads
\par wire [7:0] FOO = 20; 
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid16543554 wire [7:0] FOO_Y = 15;  }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid5209798\charrsid5209798 How }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid992032 do }{
\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid5209798\charrsid5209798 we know that}{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid5209798  FOO and FOO}{
\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid16543554 _Y }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid5209798 are }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid16543554 constants?}{
\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid3961710  something nonconstant}{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid5209798  may be assigned to them later.}{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 
\par 
\par wire [7:0] x = FOO + FOO_Y;
\par 
\par and generates  
\par 
\par wire [7:0] x = 35; // FOO(20) + FOO_Y(15) ?
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid10228422 {\f1\fs20\lang1033\langfe1049\langnp1033\insrsid10228422 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid16587560 How the code generator will behave in such situation:}{
\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid10228422\charrsid16587560 
\par }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16587560\charrsid2051715 wire [7:0] x = FOO + some_variable_input + FOO_Y;}{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid2051715 
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid1404863 
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 At the cmd_shell they can type
\par cmd_shell> show FOO
\par 20
\par 
\par }{\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Constant Expression sub-tree evaluation }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 
\par This class will take an expression and produce a numeric result.
\par all scalar elements of the expression are either numbers or reduce to numbers
\par 
\par bit class is a class which holds a variable with width.
\par 
\par we need two different constant evaluators
\par -one for built in (i.e. integer, real)
\par -one for user defined variables (i.e. 8'h34)
\par 
\par 5'10001 + 7'h78 is a bit class expression
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032 
\par }{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid10974826\charrsid16543554 I do not think that it is necessary to create separate class for constant}{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid8854711 s}{
\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid10974826\charrsid16543554  evaluation. There should be one class for holding and evaluating expressions}{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid16543554\charrsid16543554  (including constant
 expressions). To check if the expression is constant this class will check all operands for constantness .}{\f1\fs20\cf6\lang1033\langfe1049\langnp1033\insrsid10974826\charrsid16543554 
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid10974826\charrsid1404863 
\par }{\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Sub-Tree Expression Types
\par }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Each omExpr node in the OM expression tree should be marked with an attribute as they are being constructed. 
\par 
\par enum\{EXPR_TREE_BUILT_IN_CONSTANT, EXPR_TREE_USER_DEFINED_CONSTANT,
\par EXPR_TREE_NON_CONSTANT\}. 
\par 
\par The software can tag the sub-tree with a TYPE as the tree is parsed. 
The type will tell  the constant evaluation phase whether to evaluate the tree and which evaluator to call.Then the software can call the fast built in evaluator or the user defined variable evaluator. 
The constant expression evaluators will take the OM sub-tree as an argument. 
\par 
\par }{\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Width Coersion rules}{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 
\par The specification width coersion rules need to be followed to correctly evaluate expression sub-trees with different width constants.
\par 
\par }{\b\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 Command shell constant expression debugging}{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 
\par If the software evaluates the }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid809735 constants in the AST treewalker }{\f1\fs20\lang1033\langfe1049\langnp1033\insrsid992032\charrsid1404863 then the user can't trace the constants and debug problems. 
We want the user to be able to debug the constant expressions in a command shell. The command shell should support the evaluation of constant expressions. Each OM class will include line and source file so the user can see where problems are occuring. 
Programmers will use constants in their code that they did not define and they need to find out the widths and values to debug the code
\par 
\par for example omIntVal also holds a string
\par which is the str expression from the source file
\par cmd_shell> eval(FOO_ADDR + BASE_ADDR)
\par returns the value 35
\par 
\par then the user can see what the problem(s) is and they can fix the problem
\par If the software does the eval in the treewalker then the software can't support command shell evaluation.
\par  
\par }}
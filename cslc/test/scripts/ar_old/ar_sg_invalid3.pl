#!/usr/bin/perl

#oanab
#connecting a p,p.ps,sig,sig.ps,op expr,concat expr,rep expr with a sg
#connecting a p,p.ps,sig,sig.ps,op expr,concat expr,rep expr with a sg.sg


use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 75; $i++) {
	&main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; # for ifc1
    $m = int(rand(20))+2; # for ifc2
    $n = int(rand(20))+3; # for ifc3
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "ar_sg".$i."_illegal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    else {
	&createCslFile($test_name, $i, $j+1, $m+2, $n+3, %dir);
    }
}

sub createCslFile {
    my ($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_ar_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+1;
    my $val2 = int(rand(100))+1;
    my $val3 = int(rand(100))+6;
    my $hex1 = sprintf("%x",$val1);
    my $hex2 = sprintf("%x",$val2);
    my $hex3 = sprintf("%x",$val3);
    my $bin1 = sprintf("%b",$val1);
    my $bin2 = sprintf("%b",$val2);
    my $bin3 = sprintf("%b",$val3);
    my $oct1 = sprintf("%o",$val1);
    my $oct2 = sprintf("%o",$val2);
    my $oct3 = sprintf("%o",$val3);
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_sg_valid");
        open(FH,">$path/ar_sg_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_sg_invalid3"); 
        open(FH,">$path/ar_sg_invalid3/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#declaring bitrange br1
    if($val1 >= 7) {    
	print FH "csl_bitrange br1($val1);\n\n";
    }
    else {
	$val1 = $val1 + 7;
	print FH "csl_bitrange br1($val1);\n\n";
    }
    
#declaring bitrange br2
    if($val2 >= 7) {
	print FH "csl_bitrange br2($val2);\n\n";
    }
    else {
	$val2 = $val2 + 7;
	print FH "csl_bitrange br2($val2);\n\n";
    }

#signal group sgj
    print FH "csl_signal_group sg$j {\n";
    print FH "  csl_signal s_$i(br2);\n";
    print FH "  csl_signal s_".($i+1)."(br1);\n";
    print FH "  csl_signal s_".($i+2)."($val3);\n";
    print FH "  sg$j () {}\n";
    print FH "};\n\n";


#signal group sgm
    if($i > 25 && $i <= 50) {
	print FH "csl_signal_group sg$m {\n";
	print FH "  csl_signal s_a$i($val2);\n";
	print FH "  csl_signal s_b$i($val3);\n";
	print FH "  sg$j sg$j\_$two;\n";
	print FH "  sg$m () {}\n";
	print FH "};\n\n";
    }


#unit a
    print FH "csl_unit a$k {\n";
    print FH "  sg$j sg$j\_$zero;\n";
#25 tests have a port in unit a
    if($i <= 50) {
	print FH "  csl_port p_$i(input,".($val1+$val2+$val3).");\n";
    }
    print FH "  a$k () {}\n";
    print FH "};\n\n";


#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
#25 tests have sgj in unit b
    if($i > 25 && $i <= 50) {
	print FH "  sg$j sg$j\_$one;\n";
    }
#25 tests have 2 signals in unit b
    elsif($i > 50 && $i <= 75) {
	print FH "  csl_signal s_a$i($val3);\n";
	print FH "  csl_signal s_b$i($val2);\n";
    }
    print FH "  b$k () {}\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
#25 tests have unit a instantiated in unit c
    if($i <= 25) {
	print FH "  a$k a$k\_$one;\n";
    }
#25 tests have a port and sgm in unit c
    elsif($i > 25 && $i <= 50) {
	print FH "  csl_port p_x$i($dir{$l},br2);\n";
	print FH "  sg$m sg$m\_$zero;\n";
    }
    print FH "  c$k () {\n";
#25 tests connect a port with a signal group
    if($i <= 25) {
	print FH "//connect a port with a signal group\n";
	print FH "    a$k\_$one.p_$i.connect(b$k\_$zero.a$k\_$zero.sg$j\_$zero);\n";
    }
#25 tests connect a port part with a signal group (sg,sg.sg)
    elsif($i > 25 && $i <= 50) {
	print FH "//connect a port part with a signal group\n";
	print FH "    p_x$i\[".($val2)."\:".($val2-3)."\].connect(b$k\_$zero.a$k\_$zero.sg$j\_$zero);\n";
	print FH "//connect a port part with a signal group (sg.sg)\n";
	print FH "    b$k\_$zero.a$k\_$zero.p_$i\[".($val1+$val2+$val3)."\:".($val1+$val2+$val3-3)."\].connect(sg$m\_$zero.sg$j\_$two);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit d
    print FH "csl_unit d$k {\n";
    print FH "  c$k c$k\_$zero;\n";
#25 tests have sgj in unit d
    if($i <= 25) {
	print FH "  sg$j sg$j\_$one;\n";
    }
#25 tests have a port in unit d
    elsif($i > 25 && $i <= 50) {
	print FH "  csl_port p_y$i(input,br1);\n";
    }
#25 tests have unit a instantiated in unit d
    elsif($i > 50 && $i <= 75) {
	print FH "  a$k a$k\_$two;\n";
	print FH "  b$k b$k\_$one;\n";
    }
    print FH "  d$k () {\n";
#25 tests connect a port with a signal group
    if($i <= 25) {
	print FH "//connect a port with a signal group\n";
	print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.p_$i.connect(sg$j\_$one);\n";
    }
#25 tests connect a port part with a signal group
    elsif($i > 25 && $i <= 50) {
	print FH "//connect a port part with a signal group\n";
	print FH "    p_y$i\[".($val1)."\:".($val1-3)."\].connect(c$k\_$zero.b$k\_$zero.sg$j\_$one);\n";
    }
#25 tests connect a signal with a signal group
    elsif($i > 50 && $i <= 75) {
	print FH "//connect a signal with a signal group\n";
	print FH "    c$k\_$zero.b$k\_$zero.s_a$i.connect(a$k\_$two.sg$j\_$zero);\n";
	print FH "    b$k\_$one.s_b$i.connect(c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$j\_$zero);\n";
    }
    print FH "  }\n";
    print FH "};\n";
















}

#!/usr/bin/perl

#oanab
#connecting an interface with port,port part select,signal,signal part select,op expr, concat expr, rep expr
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 600; $i++) {
	&main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; # for ifc1
    $m = int(rand(20))+2; # for ifc2
    $n = int(rand(20))+3; # for ifc3
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "ar_ifc".$i."_illegal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    else {
	&createCslFile($test_name, $i, $j+1, $m+2, $n+3, %dir);
    }
}

sub createCslFile {
    my ($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_ar_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+1;
    my $val2 = int(rand(100))+1;
    my $val3 = int(rand(100))+6;
    my $l = int(rand(3))+1;
    my $hex1 = sprintf("%x",$val1);
    my $hex2 = sprintf("%x",$val2);
    my $hex3 = sprintf("%x",$val3);
    my $bin1 = sprintf("%b",$val1);
    my $bin2 = sprintf("%b",$val2);
    my $bin3 = sprintf("%b",$val3);
    my $oct1 = sprintf("%o",$val1);
    my $oct2 = sprintf("%o",$val2);
    my $oct3 = sprintf("%o",$val3);
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_ifc_valid");
        open(FH,">$path/ar_ifc_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_ifc_invalid1"); 
        open(FH,">$path/ar_ifc_invalid1/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#declaring bitrange br1    
    if($val1 >= 7) {
	print FH "csl_bitrange br1($val1);\n\n";
    }
    else {
	$val1 = $val1 + 7;
	print FH "csl_bitrange br1($val1);\n\n";
    }
    
#declaring bitrange br2
    if($val2 >= 7) {
	print FH "csl_bitrange br2($val2);\n\n";
    }
    else {
	$val2 = $val2 + 7;
	print FH "csl_bitrange br2($val2);\n\n";
    }
 
   
#interface ifcj
    print FH "csl_interface ifc$j {\n";
#100 tests with 2 ports
    if($i <= 100) {
        print FH "  csl_port p_a$i($dir{$l},br1);\n"; 
	if($l < 3) {
	    print FH "  csl_port p_b$i($dir{$l+1},br2);\n";
	}
	else {
	    print FH "  csl_port p_b$i($dir{$l-1},br2);\n";
	}
    }                  
#the rest of the tests have 3 ports                                                                        
    else {
        print FH "  csl_port p_a$i($dir{$l},br1);\n"; 
	if($l < 3) {
	    print FH "  csl_port p_b$i($dir{$l+1},br2);\n";
	}
	else {
	    print FH "  csl_port p_b$i($dir{$l-1},br2);\n";
	}
	if($l == 1) {
	    print FH "  csl_port p_c$i($dir{$l+2},$val3);\n";
	}
	else {
	    print FH "  csl_port p_c$i($dir{$l-1},$val3);\n";
	}
    } 
    print FH "  ifc$j () {}\n";
    print FH "};\n\n";
 
   
#interface ifcm
    print FH "csl_interface ifc$m {\n";
#5 tests with one port
    print FH "  csl_port p_$i($dir{$l},br1);\n";
#170 tests have ifc1 instantiated in ifc2
    if($i > 50 && $i <= 175 || $i > 450 && $i <= 600) {
	print FH "  ifc$j ifc$j\_$two;\n";
    }
#100 tests have another ifc1 instantance in ifc2
    elsif($i > 175 && $i <= 300 || $i > 350 && $i <= 425) {
	print FH "  ifc$j ifc$j\_$tre;\n";
    }
#25 tests have 4 ports in ifc2
    elsif($i > 300 && $i <= 350) {
	print FH "  csl_port p_a($dir{$l},$val3);\n";
	if($l < 3) {
	    print FH "  csl_port p_b($dir{$l+1},$val2);\n";
	}
	else {
	    print FH "  csl_port p_b($dir{$l-1},$val2);\n";
	}
	if($l == 1) { 
	    print FH "  csl_port p_c($dir{$l+2},br1);\n";
	}
	else {
	    print FH "  csl_port p_c($dir{$l-1},br1);\n";
	}
	if($l == 2) {
	    print FH "  csl_port p_d($dir{$l+1},$val1);\n";
	}
	else {
	    print FH "  csl_port p_d($dir{$l},$val1);\n";
	}
    }
    print FH "  ifc$m () {}\n";
    print FH "};\n\n";


#interface ifcn   
    if($i > 50 && $i <= 100 || $i > 200 && $i <= 225 || $i > 425 && $i <= 450) {
	print FH "csl_interface ifc$n {\n";
#50 tests have 2 ports in ifc3
	print FH "  csl_port p_i$i($dir{$l},br2);\n";
	if($l < 3) {
	    print FH "  csl_port p_k$i($dir{$l+1},br1);\n";
	}
	else {
	    print FH "  csl_port p_k$i($dir{$l-1},br1);\n";
	}
#75 tests have ifc1 instantiated in ifc3
	if($i > 75 && $i <= 100 || $i > 200 && $i <= 450) {
	    print FH "  ifc$j ifc$j\_$tre;\n";
	}
	print FH "  ifc$n () {}\n";
	print FH "};\n\n";
    }
 

#unit a
    print FH "csl_unit a$k {\n";
    print FH "  ifc$j ifc$j\_$zero;\n";
#5 tests have another ifc1 instance in unit a
    if($i > 5 && $i <= 10) {
	print FH "  ifc$j ifc$j\_$one;\n";
    }
#25 tests have a signal in unit a
    elsif($i > 40 && $i <= 50 || $i > 175 && $i < 200 || $i > 400 && $i <= 425) {
	print FH "  csl_signal s_$i($val3);\n";
    }
#25 tests have a port in unit a
    elsif($i > 75 && $i <= 100) {
	print FH "  csl_port p_x$i($dir{$l},br2);\n";
    }
#25 tests have a port in unit a
    elsif($i > 125 && $i <= 150 || $i > 225 && $i <= 250 || $i > 375 && $i <= 400) {
	print FH "  csl_port p_$i(input,$val2);\n";
    }
#25 tests have ifc2 instantiated in unit a
    elsif($i > 300 && $i <= 350 || $i > 460 && $i <= 465) {
	print FH "  ifc$m ifc$m\_$tre;\n";
    }
#25 tests have ifc3 instantiated in unit a
    elsif($i > 425 && $i <= 450) {
	print FH "  ifc$n ifc$n\_$two;\n";
    }
#25 tests have a port in unit a
    elsif($i > 500 && $i <= 525) {
	print FH "  csl_port p_$i($dir{$l},br1);\n";
    }
#50 tests have 2 ports in unit a
    elsif($i > 550 && $i <= 600) {
	print FH "  csl_port p_x$i($dir{$l},br1);\n";
	print FH "  csl_port p_y$i(output,br2);\n";
    }
    print FH "  a$k() {\n"; 
    print FH "  }\n";
    print FH "};\n\n"; 


#unit b    
    print FH "csl_unit b$k {\n";  
    print FH "  a$k a$k\_$zero;\n";
#25 tests have a signal in unit b
    if($i > 50 && $i <= 75 || $i > 175 && $i <= 200) {
	print FH "  csl_signal s_$i($val3);\n";
    }
#25 tests have an ifc2 instance in unit b
    elsif($i > 150 && $i <= 175 || $i > 450 && $i <= 525) {
	print FH "  ifc$m ifc$m\_$two;\n";
    }  
#25 tests have 2 signals in unit b
    elsif($i > 475 && $i <= 500 || $i > 525 && $i <= 550) {
	print FH "  csl_signal s_a(br1);\n";
	print FH "  csl_signal s_b($val1);\n";
    }
#50 tests have a port in unit b
    elsif($i > 550 && $i <= 600) {
	print FH "  csl_port p_a$i($dir{$l},br2);\n";
    }
    print FH "  b$k() {\n";
    print FH "  }\n";
    print FH "};\n\n";        

   
#unit c 
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    print FH "  ifc$m ifc$m\_$zero;\n";
#25 tests have ifc1 instantiated in unit c
    if($i > 200 && $i <= 250 || $i > 550 && $i <= 600) {
	print FH "  ifc$j ifc$j\_4;\n";
    }
#25 tests have a port in unit c
    elsif($i > 250 && $i <= 275 || $i > 325 && $i <= 475) {
	print FH "  csl_port p_x$i(input,$val2);\n";
    }
#25 tests have a signal in unit c
    elsif($i > 275 && $i <= 300 || $i > 425 && $i <= 450) {
	print FH "  csl_signal s_s$i($val3);\n";
    }
#25 tests have unit a instantiated in unit c
    elsif($i > 300 && $i <= 325) {
	print FH "  a$k a$k\_$one;\n";
    }
#25 tests have 2 signals in unit c
    elsif($i > 475 && $i <= 500) {
	print FH "  csl_signal s_a$i(br2);\n";
	print FH "  csl_signal s_b$i($val3);\n";
    }
    print FH "  c$k (){\n";
#15 tests connect an interface that doesn't exist with one that exists
    if($i <= 15) {
	print FH "//connect an interface that doesn't exist with one that exists\n";
	print FH "    b$k\_$zero.ifc$n\_$zero.connect(ifc$m\_$zero);\n";
    }  
#10 tests connect an interface with a signal
    elsif($i > 40 && $i <= 50) {
	print FH "//connect an interface with a signal\n";
	print FH "    ifc$m\_$zero.connect(b$k\_$zero.a$k\_$zero.s_$i);\n";
    }
#25 tests connect an interface with a port part (ifc.ifc)
    elsif($i > 125 && $i <= 150) {
	print FH "//connect an interface with a port part\n";
	print FH "    ifc$m\_$zero.ifc$j\_$two.connect(b$k\_$zero.a$k\_$zero.p_$i\[".($val2)."\:".($val2-3)."\]);\n";   
    }
#25 tests connect a port with an interface
    elsif($i > 225 && $i <= 250) {
	print FH "//connect a port with an interface\n";
	print FH "    b$k\_$zero.a$k\_$zero.p_$i.connect(ifc$j\_4);\n";
    }
#25 tests connect a signal with an interface
    elsif($i > 275 && $i <= 300) {
	print FH "//connect a signal with an interface\n";
	print FH "    s_s$i.connect(b$k\_$zero.a$k\_$zero.ifc$j\_$zero);\n";
    }
#10 tests connect a replication expr with an interface (decimal and hex values)
    elsif($i > 325 && $i <= 345) {
	print FH "//connect a replication expr with an interface (decimal value)\n";
	print FH "    \{$val1\{p_x$i,ifc$m\_$zero\}\}.connect(b$k\_$zero.a$k\_$zero.ifc$m\_$tre);\n";
	print FH "//connect a replication expr with an interface (hex value)\n";
	print FH "    {2'h".$hex1."{ifc$m\_$zero,p_x$i}}.connect(b$k\_$zero.a$k\_$zero.ifc$m\_$tre);\n";
    }
#25 tests connect a signal part with an interface (ifc.ifc)
    elsif($i > 425 && $i <= 450) {
	print FH "//connect a signal part with an interface\n";
	print FH "    s_s$i\[".($val3)."\:".($val3-3)."\].connect(b$k\_$zero.a$k\_$zero.ifc$n\_$two.ifc$j\_$tre);\n";
    }
#5 tests connect a replication expr with an interface (ifc.ifc, binary value)
    elsif($i > 460 && $i <= 465) {
	print FH "//connect a replication expr with an interface (ifc.ifc, binary value)\n";
	print FH "    {7'b".$bin2."{ifc$m\_$zero,p_x$i}}.connect(b$k\_$zero.a$k\_$zero.ifc$m\_$tre.ifc$j\_$two);\n";
    }
#25 tests connect an interface with an operator expr
    elsif($i > 475 && $i <= 500) {
	print FH "//connect an interface with an operator expr\n";
	print FH "    b$k\_$zero.a$k\_$zero.ifc$j\_$zero.connect(s_a$i & s_b$i);\n";
	print FH "    b$k\_$zero.a$k\_$zero.ifc$j\_$zero.connect(~s_b$i);\n";
    }
#25 tests connect an interface with a concat expr
    elsif($i > 500 && $i <= 525) {
	print FH "//connect an interface with a concat expr\n";
	print FH "    ifc$m\_$zero.connect({b$k\_$zero.a$k\_$zero.ifc$j\_$zero,b$k\_$zero.a$k\_$zero.p_$i});\n";
    }
#25 tests connect a concat expr with an interface
    elsif($i > 550 && $i <= 600) {
	print FH "//connect a concat expr with an interface\n";
	print FH "    {b$k\_$zero.a$k\_$zero.ifc$j\_$zero,$one}.connect(ifc$j\_4);\n";
    }
    print FH "  }\n";        
    print FH "};\n\n";  


#unit d
    print FH "csl_unit d$k {\n";
    print FH "  c$k c$k\_$zero;\n";
#10 tests have a port in unit d
    if($i > 10 && $i <= 25 || $i > 100 && $i <= 110) {
	print FH "  csl_port p_d$i(input,br2);\n";
    }
#185 tests have ifc3 instantiated in unit d
    elsif($i > 50 && $i <= 100 || $i > 200 && $i <= 225) {
	print FH "  ifc$n ifc$n\_$zero;\n";
    }
#25 tests have a signal in unit d
    elsif($i > 150 && $i <= 175 || $i > 300 & $i <= 325) {
	print FH "  csl_signal s_$i(br1);\n";
    }
#25 tests have a unit b instance in unit d
    elsif($i > 250 && $i <= 275) {
	print FH "  b$k b$k\_$one;\n";
    }
#25 tests have a port and unit b in unit d
    elsif($i > 325 && $i <= 350) {
	print FH "  csl_port p_d$i(input,br2);\n";
	print FH "  b$k b$k\_$one;\n";
    }
#25 tests have another unit c instance in unit d
    elsif($i > 400 && $i <= 425) {
	print FH "  c$k c$k\_$one;\n";
    }
#25 tests have 3 ports in unit d
    elsif($i > 450 && $i <= 475) {
	print FH "  csl_port p_a$i($dir{$l},$val3);\n";
	print FH "  csl_port p_b$i(input,br2);\n";
	print FH "  csl_port p_c$i(output,br1);\n";
    }
#25 tests have ifcm in unit d
    elsif($i > 475 && $i <= 500 || $i > 525 && $i <= 550) {
	print FH "  ifc$m ifc$m\_$one;\n";
    }
#25 tests have a port in unit d
    elsif($i > 500 && $i <= 525) {
	print FH "  csl_port p$i($dir{$l},".($val1+$val2).");\n";
    }
#50 tests have unit c and ifcm in unit d
    elsif($i > 550 && $i <= 600) {
	print FH "  c$k c$k\_$one;\n";
	print FH "  ifc$m ifc$m\_$one;\n"
	}
    print FH "  d$k () { \n";
#15 tests connect an interface with a port
    if($i > 10 && $i <= 25) {
	print FH "//connect an interface with a port\n";
	print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.ifc$j\_$zero.connect(p_d$i);\n";
    }
#10 tests connect an interface with a replication expr (decimal value)
    elsif($i > 75 && $i <= 90) {
	print FH "//connect an interface with a replication expr (decimal value)\n";
	print FH "    ifc$n\_$zero.connect(\{$val1\{c$k\_$zero.b$k\_$zero.a$k\_$zero.p_x$i,c$k\_$zero.ifc$m\_$zero}});\n";
	print FH "//connect an interface with a replication expr (binary value)\n";
	print FH "    ifc$n\_$zero.connect({7'b".$bin1."{c$k\_$zero.b$k\_$zero.a$k\_$zero.p_x$i,c$k\_$zero.ifc$m\_$zero}});\n";
    }
#5 tests connect an interface with a replication expr (hex value)
    elsif($i > 90 && $i <= 100) {
	print FH "//connect an interface with a replication expr (hex value)\n";
	print FH "    ifc$n\_$zero.connect({3'h".$hex1."{c$k\_$zero.b$k\_$zero.a$k\_$zero.p_x$i,c$k\_$zero.ifc$m\_$zero}});\n";
	print FH "//connect an interface with a replication expr (octal value)\n";
	print FH "    ifc$n\_$zero.connect({3'o".$oct1."{c$k\_$zero.b$k\_$zero.a$k\_$zero.p_x$i,c$k\_$zero.ifc$m\_$zero}});\n";
    }
#25 tests connect an interface with a signal (ifc.ifc)
    elsif($i > 150 && $i <= 175) {
	print FH "//connect an interface with a signal\n";
	print FH "    c$k\_$zero.b$k\_$zero.ifc$m\_$two.ifc$j\_$two.connect(s_$i);\n";
    }
#25 tests connect a port part with an interface
    elsif($i > 250 && $i <= 275) {
	print FH "//connect a port part with an interface\n";
	print FH "    c$k\_$zero.p_x$i\[".($val2)."\:".($val2-3)."\].connect(b$k\_$one.a$k\_$zero.ifc$j\_$zero);\n";
    }
#25 tests connect a signal part with an interface
    elsif($i > 300 && $i <= 325) {
	print FH "//connect a signal part with an interface\n";
	print FH "    s_$i\[".($val1)."\:".($val1-4)."\].connect(c$k\_$zero.a$k\_$one.ifc$m\_$tre);\n";
    }
#5 tests connect a replication expr with an interface (binary value)
    elsif($i > 335 && $i <= 350) {
	print FH "//connect a replication expr with an interface (binary value)\n";
	print FH "    {7'b".$bin3."{b$k\_$one.a$k\_$zero.ifc$j\_$zero,p_d$i}}.connect(c$k\_$zero.ifc$m\_$zero);\n";
	print FH "//connect a replication expr with an interface (octal value)\n";
	print FH "    {3'o".$oct3."{b$k\_$one.a$k\_$zero.ifc$j\_$zero,p_d$i}}.connect(c$k\_$zero.ifc$m\_$zero);\n";
    }
#25 tests connect a signal with an interface (ifc.ifc)
    elsif($i > 400 && $i <= 425) {
	print FH "//connect a signal with an interface\n";
	print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.s_$i.connect(c$k\_$one.ifc$m\_$zero.ifc$j\_$tre);\n";
    }
#10 tests connect a replication expr with an interface (ifc.ifc, decimal, hex and octal values)
    elsif($i > 450 && $i <= 475) {
	print FH "//connect a replication expr with an interface (ifc.ifc, decimal value)\n";
	print FH "    \{$val2\{p_a$i,p_b$i\}\}.connect(c$k\_$zero.b$k\_$zero.ifc$m\_$two.ifc$j\_$two);\n";
	print FH "//connect a replication expr with an interface (ifc.ifc, hex value)\n";
	print FH "    {2'h".$hex2."{p_c$i,p_a$i}}.connect(c$k\_$zero.b$k\_$zero.ifc$m\_$two.ifc$j\_$two);\n";
	print FH "//connect a replication expr with an interface (ifc.ifc, octal value)\n";
	print FH "    {1'o".$oct2."{p_b$i,p_c$i}}.connect(c$k\_$zero.b$k\_$zero.ifc$m\_$two.ifc$j\_$two);\n";
    }
#25 tests connect an interface with an operator expression (ifc.ifc)
    elsif($i > 475 && $i <= 500) {
	print FH "//connect an interface with an operator expression (ifc.ifc)\n";
	print FH "    ifc$m\_$one.ifc$j\_$two.connect(c$k\_$zero.b$k\_$zero.s_a | c$k\_$zero.b$k\_$zero.s_b);\n";
    } 
#25 tests connect an interface with a concat expr (ifc.ifc)
    elsif($i > 500 && $i <= 525) {
	print FH "//connect an interface with a concat expr (ifc.ifc)\n";
	print FH "    c$k\_$zero.b$k\_$zero.ifc$m\_$two.ifc$j\_$two.connect({p$i,$val3});\n";
    }
#25 tests connect an operator expr with an interface (ifc,ifc.ifc)
    elsif($i > 525 && $i <= 550) {
	print FH "//connect an operator expr with an interface\n";
	print FH "    (c$k\_$zero.b$k\_$zero.s_a$i & c$k\_$zero.b$k\_$zero.s_b$i).connect(ifc$m\_$one);\n";
	print FH "//connect an operator expr with an interface (ifc.ifc)\n";
	print FH "    (~c$k\_$zero.b$k\_$zero.s_a$i).connect(ifc$m\_$one.ifc$j\_$two);\n";
    }
#50 tests connect a concat expr with an interface (ifc,ifc.ifc)
    elsif($i > 550 && $i <= 600) {
	print FH "//connect a concat expr with an interface\n";
	print FH "    {c$k\_$zero.b$k\_$zero.a$k\_$zero.p_x$i,c$k\_$zero.b$k\_$zero.a$k\_$zero.p_y$i,$val3}.connect(c$k\_$one.ifc$j\_4);\n";
	print FH "//connect a concat expr with an interface (ifc.ifc)\n";
	print FH "    {".($val1+$val3).",c$k\_$zero.b$k\_$zero.p_a$i}.connect(ifc$m\_$one.ifc$j\_$two);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#50 tests have a unit e
    if($i > 25 && $i <= 125 || $i > 175 && $i <= 225 || $i > 350 && $i <= 400) {
	print FH "csl_unit e$k {\n";
#50 tests have a port in unit e
	if($i <= 40 || $i > 100 && $i <= 125 || $i > 350 && $i <= 375) {
	    print FH "  csl_port p_e$i(output,$val3);\n";
	}
	print FH "  d$k d$k\_$zero;\n";
#25 tests have unit c instantiated in unit e
	if($i > 50 && $i <= 100 || $i > 200 && $i <= 225) {
	    print FH "  c$k c$k\_$one;\n";
	}
#25 tests have unit b and ifc2 instantiated in unit e
	elsif($i > 175 && $i <= 200 || $i > 375 && $i <= 400) {
	    print FH "  ifc$m ifc$m\_$tre;\n";
	    print FH "  b$k b$k\_$one;\n";
	}
	print FH "  e$k () {\n";
#15 tests connect an interface with a port part
	if($i > 25 && $i <= 40) {
	    print FH "//connect an interface with a port part select\n";
	    print FH "    d$k\_$zero.c$k\_$zero.ifc$m\_$zero.connect(p_e$i\[".($val3)."\:".($val3-1)."\]);\n";
    }
#25 tests connect an interface with a signal part
	elsif($i > 50 && $i <= 75) {
	    print FH "//connect an interface with a signal part select\n";
	    print FH "    d$k\_$zero.ifc$n\_$zero.connect(c$k\_$one.b$k\_$zero.s_$i\[".($val3)."\:".($val3-2)."\]);\n";
	}
#25 tests connect an interface with a port (ifc.ifc)
	elsif($i > 100 && $i <= 125) {
	    print FH "//connect an interface with a port\n";
	    print FH "    d$k\_$zero.c$k\_$zero.ifc$m\_$zero.ifc$j\_12.connect(p_e$i);\n";
	}
#25 tests connect an interface with a signal part (ifc.ifc)
	elsif($i > 175 && $i <= 200) {
	    print FH "//connect an interface with a signal part\n";
	    print FH "    ifc$m\_$tre.ifc$j\_$tre.connect(b$k\_$one.a$k\_$zero.s_$i\[".($val3)."\:".($val3-3)."\]);\n";
	}
#10 tests connect an interface with a replication expr (ifc.ifc, decimal value)
    elsif($i > 200 && $i <= 225) {
	print FH "//connect an interface with a replication expr (ifc.ifc, decimal value)\n";
	print FH "    d$k\_$zero.ifc$n\_$zero.ifc$j\_$tre.connect(\{$val2\{c$k\_$one.ifc$m\_$zero,c$k\_$one.ifc$j\_4\}\});\n";
	print FH "//connect an interface with a replication expr (ifc.ifc, binary value)\n";
	print FH "    d$k\_$zero.ifc$n\_$zero.ifc$j\_$tre.connect({7'b".$bin2."{c$k\_$one.ifc$m\_$zero,c$k\_$one.ifc$j\_4}});\n";
	print FH "//connect an interface with a replication expr (ifc.ifc, hex value)\n";
	print FH "    d$k\_$zero.ifc$n\_$zero.ifc$j\_$tre.connect({2'h".$hex2."{c$k\_$one.ifc$m\_$zero,c$k\_$one.ifc$j\_4}});\n";
	print FH "//connect an interface with a replication expr (ifc.ifc, octal value)\n";
	print FH "    d$k\_$zero.ifc$n\_$zero.ifc$j\_$tre.connect({1'o".$oct2."{c$k\_$one.ifc$m\_$zero,c$k\_$one.ifc$j\_4}});\n";
    }
#25 tests connect a port with an interface (ifc.ifc)
	elsif($i > 350 && $i <= 375) {
	    print FH "//connect a port with an interface\n";
	    print FH "    p_e$i.connect(d$k\_$zero.c$k\_$zero.ifc$m\_$zero.ifc$j\_$tre);\n";
	}
#25 tests connect a port part with an interface (ifc.ifc)
	elsif($i > 375 && $i <= 400) {
	    print FH "//connect a port part with an interface\n";
	    print FH "    b$k\_$one.a$k\_$zero.p_$i\[".($val2)."\:".($val2-3)."\].connect(ifc$m\_$tre.ifc$j\_$tre);\n";    
	}
	print FH "  }\n";
	print FH "};\n\n";
    }
    
    close(FH);
    
}


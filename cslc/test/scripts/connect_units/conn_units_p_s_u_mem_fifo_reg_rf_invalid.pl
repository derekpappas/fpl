#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen";
print " the path for generated tests is: $path/conn_units_p_s_u_mem_fifo_reg_rf_invalid\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @units = ("unit","fifo","register","register_file","memory");
foreach my $unit(@units){
    for(my $i = 1;$i < 15;++$i){
        &main($i,$unit);
    }
}

sub main {
    my ($i,$unit) = @_;
    my $test_name = "conn_units_p_s_".$unit."_".$i."_illegal.csl";
    &createCslFile($test_name, $unit,$i);
}

sub createCslFile {
    my($test_name, $unit,$i) = @_;
    my $val = 1;
    my $val1 = int(rand(20)) + 1;
    my $val2 = $val1 + int(rand(20)) + 1;
    my $val3 = int(rand(30)) + 1;
    &mkDir("$path/conn_units_p_s_u_mem_fifo_reg_rf_invalid/");
    open(FH,">$path/conn_units_p_s_u_mem_fifo_reg_rf_invalid/$test_name");
    print FH "//Generated by Petronela\n";  
    print FH "//testing cmd. connect_units for connections port to unit, port to fifo, port to register, port to register_file, port to memory \n";
    print FH "//unit to port, fifo to port, register to port, refister_file to port, memory to port and \n";
    print FH "//signal to unit, signal to fifo, signal to register, signal to register_file, signal to memory \n";
    print FH "//unit to signal, fifo to signal, register to signal, refister_file to signal, memory to signal \n\n";
  
    print FH "csl_$unit ua {\n";
    if($unit eq "unit"){
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    print FH "  ua(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }   
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit ub {\n";
    if($unit eq "unit"){
        print FH "  ua ua0;\n";
        print FH "  ua ua1;\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    
    print FH "  ub(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }  
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit uc {\n";
    if($unit eq "unit"){
        print FH "  ub ub0;\n";
        print FH "  ub ub1;\n";
        print FH "  ua ua0;\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    
    print FH "  uc(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }  
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_$unit ud {\n";
    if($unit eq "unit"){
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
        print FH "  uc uc2;\n";
        print FH "  ub ub0;\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    
    print FH "  ud(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }  
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_unit top {\n";
    if($i <= 5) {
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n"; 
        print FH "  ub ub0;\n";
        print FH "  ua ua0;\n";
        print FH "  csl_port ptop(input,$val1);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_signal s_top$i($val1);\n";
        print FH "  csl_signal stop($val1);\n";
    }
    elsif($i > 5 && $i <= 10) {
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  ud ud2;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
        print FH "  ub ub0;\n";
        print FH "  ua ua0;\n";
        print FH "  csl_port p_top$i(output,$val2);\n";      
        print FH "  csl_port p(output,$val2);\n";
        print FH "  csl_port ptop(output,$val2);\n";        
        print FH "  csl_signal st($val2);\n";
        print FH "  csl_signal s_top_br$i($val1);\n";
    }
    elsif($i > 10 && $i <= 15) {
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
        print FH "  uc uc2;\n";
        print FH "  ub ub0;\n";
        print FH "  ua ua0;\n";
        print FH "  csl_port p_top$i(input,$val1);\n";      
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port p_top_br$i(input,$val2);\n";
        print FH "  csl_signal s_top$i($val1);\n";
        print FH "  csl_signal stop($val1);\n";
    }
    print FH "  top(){\n";
    if($i <= 5) {
        if($unit eq "unit"){
            print FH "    ptop.connect_units(ud0.uc2.ub1);\n";
            print FH "    uc1.ub0.connect_units(stop);\n";
            print FH "    uc0.ua0.connect_units(p);\n";
            print FH "    s_top$i.connect_units(ud0.ub0);\n";
        }
        else {
            print FH "    ptop.connect_units(ud0);\n";
            print FH "    uc1.connect_units(stop);\n";
            print FH "    uc0.connect_units(p);\n";
            print FH "    s_top$i.connect_units(ud1);\n";
        }
    }
    elsif($i > 5 && $i <= 10) {
        if($unit eq "unit"){
            print FH "    p_top$i.connect_units(ud0.uc2.ub1.ua0);\n";
            print FH "    uc1.ub0.ua1.connect_units(st);\n";
            print FH "    uc0.connect_units(ptop);\n";
            print FH "    s_top_br$i.connect_units(ud2.ub1);\n";
        }
        else{
            print FH "    p_top$i.connect_units(ub0);\n";
            print FH "    ua0.connect_units(st);\n";
            print FH "    uc0.connect_units(ptop);\n";
            print FH "    s_top_br$i.connect_units(ud2);\n";
        }
    }
    elsif($i > 10 && $i <= 15) {
        if($unit eq "unit"){
            print FH "    p_top_br$i.connect_units(uc2.ub1);\n";
            print FH "    ud0.uc1.ub0.connect_units(stop);\n";
            print FH "    ud1.uc2.ua0.connect_units(p);\n";
            print FH "    s_top$i.connect_units(ud0.ub0.ua1);\n";
        }
        else {
            print FH "    p_top_br$i.connect_units(uc2);\n";
            print FH "    ub0.connect_units(stop);\n";
            print FH "    ud1.connect_units(p);\n";
            print FH "    s_top$i.connect_units(ua0);\n";
        }
        
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);
}

#!/usr/bin/perl

#oanab
#connect_by_name() with ifc's and sg's
#Test_Matrix: /test_matrices/ar_conn_by_name_matr.ods, 8 test cases

use strict;

print "Generated tests path : test/csl_test_gen/ar_conn_name_ifc_sg_valid/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 200; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; 
    $m = int(rand(20))+2; 
    $n = int(rand(20))+3; 
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "ar_conn_name_ifc_sg".$i."_legal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    elsif($j == $m) {
	&createCslFile($test_name, $i, $j+1, $m+2, $n, %dir);
    }
}
sub createCslFile {
    my($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+3;
    my $val2 = int(rand(100))+3;
    my $val3 = int(rand(100))+8;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_conn_name_ifc_sg_valid");
        open(FH,">$path/ar_conn_name_ifc_sg_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_conn_name_ifc_sg_invalid"); 
        open(FH,">$path/ar_conn_name_ifc_sg_invalid/$test_name");
    }
    print FH "//Generated by oanab\n\n";
    print FH "//Test_Matrix: /test_matrices/ar_conn_by_name_matr.ods\n\n";

#bitranges
    print FH "csl_bitrange br1($val1);\n\n";

    print FH "csl_bitrange br2($val2);\n\n";
    
    print FH "csl_bitrange br3($val3);\n\n";


#ifcj
    print FH "csl_interface ifc$j {\n";
    print FH "  csl_port ps_m$i(input,br1);\n";
    print FH "  csl_port ps_n$i(output,br3);\n";
    print FH "  csl_port ps_o$i(input,$val1);\n";
    print FH "  ifc$j () {\n";
    print FH "  }\n";
    print FH "};\n\n";


#ifcm
    if($i > 50 && $i <= 200) {
	print FH "csl_interface ifc$m {\n";
	print FH "  csl_port p_x$i($dir{$l},br2);\n";
	print FH "  ifc$j ifc$j\_$zero;\n";
	print FH "  ifc$j ifc$j\_$one;\n";
	print FH "  ifc$m () {\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#sgj
    print FH "csl_signal_group sg$j {\n";
    print FH "  csl_signal ps_m$i($val1);\n";
    print FH "  csl_signal ps_n$i(br3);\n";
    print FH "  csl_signal ps_o$i(br1);\n";
    print FH "  sg$j () {\n";
    print FH "  }\n";
    print FH "};\n\n";
    

#sgm
    if($i > 50 && $i <= 200) {
	print FH "csl_signal_group sg$m {\n";
	print FH "  csl_signal p_x$i($val2);\n";
	print FH "  sg$j sg$j\_$zero;\n";
	print FH "  sg$j sg$j\_$one;\n";
	print FH "  sg$m () {\n";
	print FH "  }\n";
	print FH "};\n\n";
    }


#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 50) {
	print FH "  ifc$j ifc$j\_$one;\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    elsif($i > 100 && $i <= 200) {
	print FH "  sg$j sg$j\_$two;\n";
	print FH "  sg$j sg$j\_$one;\n";
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    print FH "  a$k () {\n";
#set_prefix to ifc
    if($i <= 50) {
	print FH "    ifc$j\_$one.set_prefix(\"ifc$j$i\");\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "    ifc$m\_$zero = sg$m\_$zero;\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit b
    print FH "csl_unit b$k {\n";
    if($i <= 50) {
	print FH "  a$k a$k\_$zero;\n";
	print FH "  ifc$j ifc$j\_$zero;\n";
    }
    elsif($i > 100 && $i <= 200) {
	print FH "  sg$j sg$j\_$one;\n";
    }
    print FH "  b$k () {\n";
#no_prefix for ifc
    if($i <= 50) {
	print FH "    ifc$j\_$zero.no_prefix();\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit c
    print FH "csl_unit c$k {\n";
    if($i <= 50) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  sg$j sg$j\_$zero;\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  ifc$m ifc$m\_$two;\n";
	print FH "  a$k a$k\_$one(.ifc$m\_$zero(ifc$m\_$two));\n";
    }
    elsif($i > 100 && $i <= 200) {
	print FH "  ifc$m ifc$m\_$one;\n";
	print FH "  b$k b$k\_$zero;\n";
	print FH "  a$k a$k\_$one(.ifc$m\_$zero.p_x$i(ifc$m\_$one.p_x$i));\n";
	print FH "  a$k a$k\_$two(.ifc$m\_$zero(ifc$m\_$one));\n";
	print FH "  ifc$j ifc$j\_$one;\n";
    }
    print FH "  c$k () {\n";
#connect_by_name : ifc---ifc (CP)
    if($i <= 50) {
	print FH "    b$k\_$zero.a$k\_$zero.ifc$j\_$one.connect_by_name(b$k\_$zero.ifc$j\_$zero,ifca_$i);  // ifc---ifc (CP)\n";
    }
#connect_by_name : ifc---sg.sg (PC)
    elsif($i > 50 && $i <= 100) {
	print FH "    ifc$m\_$two.set_suffix(\"suf\");\n";
	print FH "    ifc$m\_$two.ifc$j\_$zero.connect_by_name(a$k\_$one.sg$m\_$zero.sg$j\_$zero);  // ifc---sg.sg (PC)\n";
    }
#connect_by_name : ifc.ifc---sg (SS), sg---ifc (CP)
    elsif($i > 100 && $i <= 200) {
	print FH "    a$k\_$one.ifc$m\_$zero.set_prefix(\"ifcm\");\n";
	print FH "    a$k\_$one.ifc$m\_$zero.ifc$j\_$zero.connect_by_name(a$k\_$two.sg$j\_$two);  // ifc.ifc---sg (SS)\n";
	print FH "    b$k\_$zero.sg$j\_$one.set_suffix(\"sgj\");\n";
	print FH "    b$k\_$zero.sg$j\_$one.connect_by_name(ifc$j\_$one);  // sg---ifc (CP)\n";
	print FH "    a$k\_$one.ifc$m\_$zero.ifc$j\_$one.connect_by_name(ifc$j\_$one);  // ifc.ifc---ifc (CP)\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit d
    print FH "csl_unit d$k {\n";
    if($i <= 50) {
	print FH "  c$k c$k\_$zero;\n";
    }
    if($i > 50 && $i <= 100) {
	print FH "  c$k c$k\_$zero(.ifc$m\_$two(ifc$m\_$zero));\n";
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    elsif($i > 100 && $i <= 200) {
	print FH "  c$k c$k\_$zero(.ifc$m\_$one(sg$m\_$one));\n";
	print FH "  ifc$j ifc$j\_$zero;\n";
	print FH "  sg$m sg$m\_$one;\n";
    }
    print FH "  d$k () {\n";
#connect_by_name : ifc---sg (CP)
    if($i <= 50) {
	print FH "    c$k\_$zero.b$k\_$zero.ifc$j\_$zero.connect_by_name(c$k\_$zero.sg$j\_$zero);  // ifc---sg (CP)\n";
    }
#connect_by_name : ifc.ifc---sg.sg (PC)
    elsif($i > 50 && $i <= 100) {
	print FH "    ifc$m\_$zero.set_prefix(\"\");\n";
	print FH "    ifc$m\_$zero.ifc$j\_$zero.connect_by_name(c$k\_$zero.a$k\_$one.sg$m\_$zero.sg$j\_$one);  // ifc.ifc---sg.sg (PC)\n";
    }
#connect_by_name : sg.sg---ifc (PC)
    elsif($i > 100 && $i <= 200) {
	print FH "    sg$m\_$one.set_prefix(\"sgm\");\n";
	print FH "    sg$m\_$one.sg$j\_$one.connect_by_name(c$k\_$zero.ifc$j\_$one);  // sg.sg---ifc (PC)\n";
	print FH "    c$k\_$zero.a$k\_$one.sg$j\_$one.connect_by_name(ifc$j\_$zero);  // sg---ifc (CP)\n";
    }
    print FH "  }\n";
    print FH "};\n\n";



}

#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."assign_part_select_pps_sg_ifc_invalid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @lower = (0,3,10,23);
my @upper = (32,51,64,80);
for(my $i=1;$i <=3;++$i){
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            &main($i,$l,$u);
        }
    }
}

sub main {
    my ($i,$l,$u) = @_;
    my $test_name;
    $test_name = "assign_part_select_pps_sg_ifc".$i."_".$l."_".$u."_illegal.csl";
    my $val1 = $u + int(rand(100)) + 1;
    my $w = $u - $l + 1;
    my $val2 = $val1 + int(rand(100)) + 1;
    my $val3 = $val1 + int(rand(30)) + 1;
    my $val4 = $val1 + int(rand(30)) + 1;
    my $val5 = $val1 + int(rand(30)) + 1;
    &mkDir("$path/assign_part_select_pps_sg_ifc_invalid");
    open(FH,">$path/assign_part_select_pps_sg_ifc_invalid/$test_name");
    
    print FH "//Generated by Petronela\n";
     print FH "//Test cases from: assign_test_matrix.odg, part_select_matrix.odg\n"; 
    print FH "//part select used in assign  port[ps] parent input,child input,parent output,child output,parent inout,child inout with sg[+.sg], ifc[.+ifc] \n\n";
    print FH "csl_signal_group sga {\n";
    print FH "  csl_signal s_sga$i($w);\n";
    print FH "  csl_signal s_sgga($w);\n";
    print FH "  csl_signal s_sa($w);\n";
    print FH "  csl_signal s_sgaa$i($w);\n";
    print FH "  sga() {\n";
    print FH "  }\n";
    print FH "};\n\n";
    print FH "csl_signal_group sgb {\n";
    print FH "  sga sga0;\n";
    print FH "  sga sga1;\n";
    print FH "  csl_signal s_sga$i($val1);\n";
    print FH "  csl_signal s_sgga($val2);\n";
    print FH "  csl_signal s_sa($w);\n";
    print FH "  csl_signal s_sgaa$i($w);\n";
    print FH "  sgb() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_interface ifca {\n";
    print FH "  csl_port p_ifca$i(input,$val1);\n";
    print FH "  csl_port p_ifa(input,$val1);\n";
    print FH "  csl_port p_if(input,$val1);\n";
    print FH "  csl_port p_ifta$i(input,$val1);\n";
    print FH "  ifca() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_interface ifcb {\n";
    print FH "  ifca ifca0;\n";
    print FH "  csl_port p_ifcb$i(input,$val1);\n";
    print FH "  csl_port p_ifb(input,$val1);\n";
    print FH "  csl_port p_if(input,$val1);\n";
    print FH "  csl_port p_iftb$i(input,$val1);\n";
    print FH "  ifcb() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit a {\n";
    print FH "  sgb sgb0;\n";
    print FH "  ifca ifca1;\n";
    print FH "  ifcb ifcb0;\n";
    print FH "  csl_port p_data(input,$val1);\n"; 
    print FH "  csl_port p_addr(output,$val4);\n";
    print FH "  csl_port p_data1(input,$val2);\n";
    print FH "  csl_port p_addr1(output,$val3);\n"; 
    print FH "  csl_port p_addr2(inout,$val2);\n";
    print FH "  csl_port p_data2(inout,$val1);\n";
    print FH "  a() {\n";
    print FH "    p_data1[$u:$l] = sgb0.sga1;\n";
    print FH "    p_addr[$u-:$l] = ifca0;\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    if($i >= 2 ){
        print FH "csl_unit f {\n";
        print FH "  ifcb ifcb1;\n";
        print FH "  csl_port p_data(output,$val1);\n"; 
        print FH "  csl_port p_addr(input,$val1);\n";
        print FH "  csl_port p_data1(inout,$val1);\n";
        print FH "  f() {\n";  
        print FH "    p_addr[$u:$l] = ifcb1.ifca0;\n";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    print FH "csl_unit b {\n"; 
    if($i < 2){
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  sgb sgb1;\n";
        print FH "  sga sga2;\n";
        print FH "  ifca ifca2;\n";
        print FH "  ifcb ifcb2;\n";
    }
    else {
        print FH "  f f0;\n";
        print FH "  f f1;\n";
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  a a2;\n";
        print FH "  sgb sgb1;\n";
        print FH "  sga sga2;\n";
        print FH "  ifca ifca2;\n";
        print FH "  ifcb ifcb2;\n";
    }
    print FH "  csl_port p_data(input,$val1);\n";
    print FH "  csl_port p_addr(output,$val2);\n";
    print FH "  csl_port p_data1(input,$val1);\n";
    print FH "  csl_port p_addr1(output,$val2);\n";
    print FH "  csl_port p_data2(inout,$val1);\n";
    print FH "  csl_port p_addr2(inout,$val3);\n";
    print FH "  b() {\n";
    print FH "    a0.p_data[$u:$l] = ifca2;\n";
    print FH "    a1.p_data3[$u-:$l] = sga;\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i < 2){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  sgb sgb2;\n";
        print FH "  sgb sgb3;\n";
        print FH "  ifca ifca3;\n";
        print FH "  ifcb ifcb3;\n";
    }
    else {
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  b b2;\n";
        print FH "  a a0;\n";
        print FH "  sgb sgb2;\n";
        print FH "  sgb sgb3;\n";
        print FH "  ifca ifca3;\n";
        print FH "  ifcb ifcb3;\n";
    }
 
    print FH "  csl_port p_data(input,$val1);\n";
    print FH "  csl_port p_addr(output,$val1);\n";
    print FH "  csl_port p_data1(input,$val1);\n";
    print FH "  csl_port p_addr1(output,$val2);\n";
    print FH "  csl_port p_data2(inout,$val1);\n";
    print FH "  csl_port p_addr2(inout,$val3);\n";
    print FH "  c() {\n";
    print FH "    b0.p_data3[$u:$l] = sgb2 ;\n"; 
    print FH "    p_addr1[$u-:$l] = b0.sgb1.sga0;\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i < 2){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  sgb sgb4;\n";
        print FH "  sgb sgb5;\n";
        print FH "  ifca ifca4;\n";
        print FH "  ifcb ifcb4;\n";
    }
    else {
        print FH "  f f0;\n";
        print FH "  f f1;\n";
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  sgb sgb4;\n";
        print FH "  sgb sgb5;\n";
        print FH "  ifca ifca4;\n";
        print FH "  ifcb ifcb4;\n";
    }
    print FH "  csl_port p_data(input,$val2);\n"; 
    print FH "  csl_port p_addr(output,$val1);\n";
    print FH "  csl_port p_data1(input,$val1);\n";
    print FH "  csl_port p_addr1(output,$val3);\n";
    print FH "  csl_port p_data2(inout,$val1);\n";
    print FH "  csl_port p_addr2(inout,$val3);\n";
    print FH "  d() {\n";
    if($i < 2) {
        print FH "    b0.p_data[$u-:$l] = ifcb4;\n";
        print FH "    b1.a0.p_addr1[$u:$l] = c0.ifcb3.ifca0;\n";
       
    }
    elsif($i >= 2) {
        print FH "    b1.p_data1[$u:$l] = c0.sgb3.sga0;\n";
        print FH "    p_data2[$u-:$l] = c0.a0.sgb0;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_unit e {\n";  
    if($i < 2){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  sgb sgb3;\n";
        print FH "  sgb sgb4;\n";
        print FH "  ifca ifca5;\n";
        print FH "  ifcb ifcb5;\n";
    }
    elsif($i >= 2) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  c c2;\n";
        print FH "  sgb sgb3;\n";
        print FH "  sgb sgb4;\n";
        print FH "  sga sga3;\n";
        print FH "  ifca ifca5;\n";
        print FH "  ifcb ifcb6;\n";
    }
  
    print FH "  csl_port p_data(input,$val1);\n"; 
    print FH "  csl_port p_addr(output,$val1);\n";   
    print FH "  csl_port p_data1(input,$val2);\n";  
    print FH "  csl_port p_addr1(output,$val3);\n";  
    print FH "  csl_port p_data2(inout,$val1);\n"; 
    print FH "  csl_port p_addr2(inout,$val4);\n";   
    print FH "  e() {\n";
    if($i == 1) {
        print FH "    b0.p_addr1[$u:$l] = d1.sge2;\n";
        print FH "    d0.c1.b0.p_data3[$u:$l] = c0.ifca3;\n";
    }
    elsif($i == 2) {
        print FH "    d0.c1.p_data1[$u-:$l] = c1.b0.ifcb2.ifca1;\n";
        print FH "    d1.p_data1[$u:$l] = c2.b1.sga1;\n";
    }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i < 2){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  d d2;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
        print FH "  sgb sgb6;\n";
        print FH "  sgb sgb7;\n";
    }
    elsif($i >= 2) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
        print FH "  e e2;\n";
        print FH "  a a0;\n";
        print FH "  sgb sgb6;\n";
        print FH "  sgb sgb7;\n";
    }
    print FH "  csl_port p_data(input,$val1);\n"; 
    print FH "  csl_port p_addr(output,$val1);\n";   
    print FH "  csl_port p_data1(input,$val2);\n";  
    print FH "  csl_port p_addr1(output,$val3);\n";  
    print FH "  csl_port p_data2(inout,$val2);\n"; 
    print FH "  csl_port p_addr2(inout,$val2);\n";   
    
    print FH "  top(){\n";
    if($i == 1) {
        print FH "    e0.d0.b1.p_addr1[$u:$l] = d0.sga2;\n";
        print FH "    d1.p_addr1[$u:$l] = e1.d0.b0.a0.ifca1;\n";
        print FH "    d1.b0.p_addr1[$u:$l] = e0.sgb3.sga0;\n"; 
    }
    elsif($i == 3) {
        print FH "    e1.p_addr[$u:$l] = d1.ifcb4.ifca0;\n";
        print FH "    e1.p_data1[$u:$l] = a0.ifca1 ;\n";
        print FH "    p_data1[$u-:$l] = sgb6;\n";
        
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}


#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."assign_part_select_pps_op_concat_replic_invalid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @lower = (0,6,12,24);
my @upper = (35,59,65,77);
for(my $i=1;$i <=9;++$i){
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            &main($i,$l,$u);
        }
    }
}

sub main {
    my ($i,$l,$u) = @_;
    my $test_name;
    $test_name = "assign_part_select_pps_op_concat_replic".$i."_".$l."_".$u."_illegal.csl";
    my $w = $u - $l + 1;
    my $val1 = $w + int(rand(100)) + 1;
    my $val2 = $val1 + int(rand(100)) + 1;
    my $val3 = $val1 + int(rand(30)) + 1;
    my $val4 = $val1 + int(rand(30)) + 1;
    my $val5 = $val1 + int(rand(30)) + 1;
    my $val6 = $w/2;
    my $val7 = $w/3;
    my $val8 = $w/6;
    my $val9 = 2*$w;
    my $val10 = 3*$w;
    my $val11 = 6*$w;
    &mkDir("$path/assign_part_select_pps_op_concat_replic_invalid");
    open(FH,">$path/assign_part_select_pps_op_concat_replic_invalid/$test_name");
    print FH "//Generated by Petronela\n";
     print FH "//Test cases from: assign_test_matrix.odg\n"; 
    print FH "//part select used in assign  port parent input,child output,child inout with op expr,concat expr.,replication expr. \n\n";
    print FH "csl_unit a {\n";
    print FH "  csl_port p_data(input,$val3);\n"; 
    print FH "  csl_port p_addr(output,$val9);\n";
    print FH "  csl_port p_data1(input,$val2);\n";
    print FH "  csl_port p_addr1(output,$val6);\n"; 
    print FH "  csl_port p_addr2(inout,$val7);\n";
    print FH "  csl_port p_data3(output,val7);\n";
    print FH "  csl_port p_addr3(input,$val7);\n";
    print FH "  csl_port p_data4(input,$val8);\n";
    print FH "  csl_port p_data2(inout,$val1);\n"; 
    print FH "  csl_port p_addr4(output,$w);\n";
    print FH "  a() {\n";
    if($i <=3 ){
        print FH "    p_data[$u:$l] = {p_data3,p_addr2,p_addr3};\n";
        print FH "    p_data1[$u-:$l] = {p_data3,p_addr2,p_addr3};\n";
    }
    elsif($i >3 && $i<= 6){
        print FH "    p_data[$u:$l] = {3{p_data3}};\n";
        print FH "    p_data1[$u-:$l] = {3{p_data3}};\n";
    }
    else{
        print FH "    p_data[$u:$l] = ~p_addr4;\n";
        print FH "    p_data1[$u-:$l] = ~p_addr4;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_unit b {\n"; 
    if($i < 2){
        print FH "  a a0;\n";
        print FH "  a a1;\n";
    }
    else {
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  a a2;\n";
    }
   
    print FH "  csl_port p_data(input,$val1);\n";
    print FH "  csl_port p_addr(output,$val2);\n";
    print FH "  csl_port p_data1(input,$val2);\n";
    print FH "  csl_port p_addr1(output,$w);\n";
    print FH "  csl_port p_data2(inout,$val1);\n";
    print FH "  csl_port p_addr2(inout,$w);\n";
    print FH "  csl_port p_data3(input,val9);\n";
    print FH "  csl_port p_addr3(output,$val10);\n";
    print FH "  csl_port p_data4(inout,$val10);\n";
    print FH "  b() {\n";
    if($i<=3){
        print FH "    p_data3 = {p_addr[$u:$l],p_data[$u:$l]};\n";
        print FH "    a0.p_addr = {p_data2[$u-:$l],p_data[$u-:$l]};\n";
    }
    elsif($i >3 && $i<=6){
        print FH "    p_data3 = {2{p_addr[$u:$l]}};\n";
        print FH "    a0.p_addr = {2{p_data2[$u-:$l]}};\n";
    }
    else{
        print FH "    p_data1 = p_addr[$u:$l] | p_data1[$u:$l];\n";
        print FH "    p_data = p_data2[$u-:$l] & p_data[$u-:$l];\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i < 4){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  a a0;\n";
    }
    else {
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  b b2;\n";
        print FH "  a a0;\n";
    }
 
    print FH "  csl_port p_data(input,$val1);\n";
    print FH "  csl_port p_addr(output,$val2);\n";
    print FH "  csl_port p_data1(input,$val2);\n";
    print FH "  csl_port p_addr1(output,$w);\n";
    print FH "  csl_port p_data2(inout,$val1);\n";
    print FH "  csl_port p_addr2(inout,$w);\n";
    print FH "  csl_port p_data3(input,val9);\n";
    print FH "  csl_port p_addr3(output,$val11);\n";
    print FH "  csl_port p_data4(inout,$val10);\n";
    print FH "  c() {\n";
    if($i<=3){
        print FH "    b0.p_addr3 ={b0.p_addr[$u:$l],b0.p_data1[$u:$l],p_data2[$u:$l]};\n";
        print FH "    b1.p_data4 = {b1.p_addr[$u-:$l],b1.p_data1[$u-:$l],b1.p_data[$u-:$l]} ;\n"; 
    }
    elsif($i >3 && $i<=6){
        print FH "    b0.p_addr3 ={2{b0.p_data[$u-:$l]}};\n";
        print FH "    b1.p_data4 = {3{b1.p_addr[$u:$l],b1.p_data1[$u:$l]}} ;\n";
    }
    else{
        print FH "    b0.p_addr =b0.p_data[$u:$l] & b0.p_addr[$u:$l];\n";
        print FH "    b1.p_data2 = b1.p_addr[$u-:$l] | b1.p_data1[$u-:$l];\n"; 
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i < 2){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
    }
    else {
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
    }
    print FH "  csl_port p_data(input,$val9);\n"; 
    print FH "  csl_port p_addr(output,$val4);\n";
    print FH "  csl_port p_data1(input,$val6);\n";
    print FH "  csl_port p_addr1(output,$val6);\n"; 
    print FH "  csl_port p_addr2(inout,$val7);\n";
    print FH "  csl_port p_data3(output,val7);\n";
    print FH "  csl_port p_addr3(input,$val7);\n";
    print FH "  csl_port p_data4(input,$val8);\n";
    print FH "  csl_port p_data2(inout,$val1);\n"; 
    print FH "  csl_port p_addr4(output,$w);\n";  
    print FH "  d() {\n";
    if($i < 4) {
        print FH "    b1.p_addr[$u:$l] = {p_addr1,p_data1};\n";
        print FH "    c0.data2[$u-:$l] = {c0.a0.p_data3,c0.a0.p_addr2,p_addr3};\n";
       
    }
    elsif($i >= 4 && $i <= 6) {
        print FH "    b1.p_addr[$u:$l] = {2{p_data1}};\n";
        print FH "    c0.p_data2[$u-:$l] = {3{c0.a0.p_data4}};\n";
    }
    else{
        print FH "    b1.p_addr[$u:$l] = p_addr4 & p_data1;\n";
        print FH "    c0.p_data2[$u-:$l] = c0.a0.p_data3 | c0.a0.p_addr4;\n";  
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_unit e {\n";  
    if($i < 4){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
    }
    elsif($i >= 4) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  c c2;\n";
    }
  
    print FH "  csl_port p_data(input,$val9);\n"; 
    print FH "  csl_port p_addr(output,$val4);\n";
    print FH "  csl_port p_data1(input,$val6);\n";
    print FH "  csl_port p_addr1(output,$val6);\n"; 
    print FH "  csl_port p_addr2(inout,$val7);\n";
    print FH "  csl_port p_data3(output,val7);\n";
    print FH "  csl_port p_addr3(input,$val7);\n";
    print FH "  csl_port p_data4(input,$val8);\n";
    print FH "  csl_port p_data2(inout,$val1);\n"; 
    print FH "  csl_port p_addr4(output,$w);\n"; 
   
    print FH "  e() {\n";
    if($i <= 3) {
        print FH "    p_data[$u:$l] = {d1.p_addr1,d1.p_data1};\n";
        print FH "    c0.p_addr[$u-:$l] = {p_addr3,p_addr2,p_data3};\n";
    }
    elsif($i > 3 && $i >= 6) {
        print FH "    c0.p_addr[$u:$l] = {3{p_addr3}};\n";
        print FH "    p_data[$u-:$l] = {2{d1.p_addr1}};\n";
        
    }
    else{
        print FH "    p_data[$u:$l] = d1.p_data1 | d1.p_addr4;\n";
        print FH "    c0.p_addr[$u-:$l] = ~p_addr4;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i < 4){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  d d2;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
    }
    elsif($i >= 4) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
        print FH "  e e2;\n";
        print FH "  a a0;\n";
    }
    print FH "  csl_port p_data(input,$val1);\n";
    print FH "  csl_port p_addr(output,$val2);\n";
    print FH "  csl_port p_data1(input,$val2);\n";
    print FH "  csl_port p_addr1(output,$w);\n";
    print FH "  csl_port p_data2(inout,$val1);\n";
    print FH "  csl_port p_addr2(inout,$w);\n";
    print FH "  csl_port p_data3(input,val9);\n";
    print FH "  csl_port p_addr3(output,$val10);\n";
    print FH "  csl_port p_data4(inout,$val10);\n"; 
    print FH "  top(){\n";
    if($i <= 3) {
        print FH "    e0.d0.b1.p_addr3 = {p_data[$u:$l],p_addr[$u:$l],p_data1[$u:$l]};\n";
        print FH "    p_data3 = {d1.c0.p_addr[$u-:$l],p_addr1[$u-:$l]};\n"; 
    }
    elsif($i > 3 && $i <=6) {
        print FH "    e0.d0.b1.p_addr3 = {3{p_addr[$u:$l]}};\n";
        print FH "    p_data3 = {2{d1.c0.p_data2[$u-:$l]}};\n";
    }
    else{
        print FH "    p_data1 = ~p_addr[$u-:$l];\n";
        print FH "    d0.c0.b0.p_addr2 = d1.c0.p_data2[$u:$l] & d1.c0.p_addr[$u:$l];\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}


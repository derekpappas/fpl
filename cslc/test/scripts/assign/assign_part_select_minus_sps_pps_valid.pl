#!/usr/bin/perl

#Author Petronela
#modified by oanab
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."assign_part_select_minus_sps_pps_valid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @lower = (3,10,23);
my @upper = (51,64,80);
for(my $i=1;$i <=3;++$i){
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            &main($i,$l,$u);
        }
    }
}

sub main {
    my ($i,$l,$u) = @_;
    my $test_name;
    $test_name = "assign_part_select_minus_sps_pps".$i."_".$l."_".$u."_legal.csl";
    my $val1 = $u + int(rand(100)) + 1;
    my $w = $l ;
    my $w1 = $w -1;
    my $val2 = $val1 + int(rand(100)) + 1;
    my $val3 = $val1 + int(rand(30)) + 1;
    my $val4 = $val1 + int(rand(30)) + 1;
    my $val5 = $val1 + int(rand(30)) + 1;
    &mkDir("$path/assign_part_select_minus_sps_pps_valid");
    open(FH,">$path/assign_part_select_minus_sps_pps_valid/$test_name");
    
    print FH "//Generated by Petronela\n";
    print FH "//Test cases from: assign_test_matrix.odg, part_select_matrix.odg\n"; 
    print FH "//part select ([upper-:lower]) used in assign sig[ps], sg[.+sg].sig[ps] with port[ps] parent input,child output,parent inout \n";
    print FH "//and port[ps] parent output,child input,parent inout with  sig[ps], sg[.+sg].sig[ps]\n\n";

    print FH "csl_signal_group sga {\n";
    print FH "  csl_signal s_sga$i($val1);\n";
    print FH "  csl_signal s_sgga($val2);\n";
    print FH "  csl_signal s_sa($w);\n";
    print FH "  csl_signal s_sgaa$i($w);\n";
    print FH "  sga() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_signal_group sgb {\n";
    print FH "  sga sga0;\n";
    print FH "  csl_signal s_sgb$i($val1);\n";
    print FH "  csl_signal s_sggb($val2);\n";
    print FH "  csl_signal s_sb($w);\n";
    print FH "  sgb() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    
    print FH "csl_unit a {\n";
    print FH "  csl_signal s_data($val1);\n"; 
    print FH "  csl_signal s_addr($val4);\n";
    print FH "  csl_port p_data1(input,$val1);\n";
    print FH "  csl_port p_addr1(output,$val2);\n"; 
    print FH "  csl_signal s_data2($w);\n"; 
    print FH "  csl_port p_addr3(input,$val2);\n";  
    print FH "  a() {\n";
    print FH "    s_data2 = p_data1[$u-:$l];\n";
    print FH "    p_addr1[$u-:$l] = s_data[$u-:$l];\n";
    print FH "    s_addr[$u-:$l] = p_addr3[$u-:$l];\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    if($i >= 2 ){
        print FH "csl_unit f {\n";
        print FH "  csl_signal s_data($val1);\n"; 
        print FH "  csl_port p_addr(input,$val1);\n";
        print FH "  f() {\n";  
        print FH "    s_data[$u-:$l] = p_addr[$u-:$l];\n";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }

    print FH "csl_unit b {\n"; 
    if($i < 2){
        print FH "  a a0(.p_data1(s_data4),.p_addr1(p_addr11),.p_addr3(s_addr4));\n";
	print FH "  csl_signal s_data21($w);\n";
	print FH "  csl_port p_addr11(output,$val2);\n";
	print FH "  csl_signal s_data4($val1);\n";
	print FH "  csl_signal s_addr4($val2);\n";
    }
    elsif($i >= 2 ) {
        print FH "  f f0(.p_addr(s_data4));\n";
        print FH "  a a0(.p_data1(s_data4),.p_addr1(s_addr4),.p_addr3(s_addr4));\n";
        print FH "  sga sga2;\n";
	print FH "  csl_port p_data31(inout,$val2);\n";
	print FH "  csl_signal s_data4($val1);\n";
	print FH "  csl_signal s_addr4($val2);\n";
        print FH "  csl_port p_data32(input,$val1);\n";
	print FH "  csl_port p_addr12(output,$val2);\n";
    }
    print FH "  b() {\n";
    if($i < 2){
	print FH "    s_data21 = p_addr11[$u-:$l];\n";
    }
    elsif($i >= 2 ) {
	print FH "    sga2.s_sgaa$i = p_data31[$u-:$l];\n";
	print FH "    sga2.s_sga$i\[".($val1-1)."\] = sga2.s_sgga\[".($val2-1)."\];\n";
	print FH "    sga2.s_sgaa$i = sga2.s_sa;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i < 2){
        print FH "  b b0(.p_addr11(sgb2.s_sggb));\n";
        print FH "  sgb sgb2;\n";
	print FH "  csl_port p_data32(input,$val1);\n";
	print FH "  csl_port p_addr12(output,$val2);\n";
    }
    elsif($i >= 2 ) {
        print FH "  b b0(.p_data32(sga1.s_sga$i),.p_addr12(sga1.s_sgga),.p_data31(sga1.s_sgga));\n";
        print FH "  sga sga1;\n";
    }
    print FH "  c() {\n";
    if($i < 2) {
	print FH "    p_data32[$u-:$l] = sgb2.s_sgb$i"."[$u-:$l] ;\n"; 
	print FH "    p_addr12[$u-:$l] = sgb2.s_sb;\n";
	print FH "    sgb2.sga0.s_sgaa$i = sgb2.sga0.s_sa;\n";
	print FH "    sgb2.sga0.s_sga$i\[".($val1-1)."\] = sgb2.sga0.s_sgga\[".($val2-1)."\];\n";
    }
    elsif($i >= 2 ){
	print FH "    sga1.s_sgaa$i = sga1.s_sa;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i < 2){
        print FH "  c c0(.p_data32(sgb4.sga0.s_sga$i),.p_addr12(sgb4.sga0.s_sgga));\n";
        print FH "  c c1(.p_data32(sgb4.s_sgb$i),.p_addr12(sgb4.sga0.s_sgga));\n";
        print FH "  sgb sgb4;\n";
	print FH "  csl_port p_data13(input,$val1);\n";
	print FH "  csl_port p_addr13(output,$val1);\n";
	print FH "  csl_signal s_data6($val2);\n"; 
    }
    elsif($i >= 2 ) {
        print FH "  f f1(.p_addr(sgb4.s_sgb$i));\n";
        print FH "  c c0;\n";
        print FH "  sgb sgb4;\n";
	print FH "  csl_port p_data13(input,$val1);\n";
	print FH "  csl_port p_addr13(output,$val1);\n";
    }  
    print FH "  d() {\n";
    if($i < 2) {
        print FH "    sgb4.s_sggb[$u-:$l] = p_addr13[$u-:$l];\n";
        print FH "    p_data13[$u] = s_data6[$u];\n";
	print FH "    sgb4.sga0.s_sgaa$i = sgb4.sga0.s_sa;\n";
	print FH "    sgb4.s_sb\[".($w-1)."\] = s_data6\[".($val2-1)."\];\n";
       
    }
    elsif($i >= 2) {
        print FH "    p_data13[$u-:$l] = sgb4.sga0.s_sa;\n";
        print FH "    sgb4.sga0.s_sga$i\[".($val1-1)."\-\:".(1)."\] = sgb4.s_sb\[".($w-1)."\-\:".(1)."\];\n";
	print FH "    sgb4.sga0.s_sgaa$i = sgb4.sga0.s_sa;\n";
        print FH "    p_addr13[$u-:$l] = sgb4.s_sgb$i"."[$u-:$l];\n";
        print FH "    sgb4.s_sggb = sgb4.sga0.s_sgga;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    print FH "csl_unit e {\n";  
    if($i < 2){
        print FH "  d d0(.p_data13(sgb3.s_sgb$i),.p_addr13(sgb3.sga0.s_sga$i));\n";
        print FH "  d d1(.p_data13(sgb3.sga0.s_sga$i),.p_addr13(sgb3.s_sgb$i));\n";
        print FH "  sgb sgb3;\n";
	print FH "  csl_port p_data14(input,$val2);\n";
	print FH "  csl_signal s_data24($w);\n"; 
	print FH "  csl_port p_data34(input,$val1);\n";
    }
    elsif($i >= 2) {
        print FH "  d d0(.p_data13(s_a),.p_addr13(s_a));\n";
 	print FH "  csl_port p_addr14(output,$val2);\n";
  	print FH "  csl_signal s_data24($w);\n";
	print FH "  csl_signal s_addr24($w);\n";   
        print FH "  csl_signal s_a($val1);\n";   
    }
    print FH "  e() {\n";
    if($i < 2) {
        print FH "    p_data14[$u-:$l] = sgb3.s_sggb[$u-:$l];\n";
        print FH "    s_data24 = p_data34[$u-:$l];\n";
	print FH "    sgb3.sga0.s_sgaa$i = sgb3.sga0.s_sa;\n";
	print FH "    sgb3.s_sb = s_data24;\n";
	print FH "    sgb3.s_sggb = sgb3.sga0.s_sgga;\n";
    }
    elsif($i >= 2) {
        print FH "    p_addr14[$l] = s_data24[$w1];\n";
        print FH "    p_addr14[$u-:$l] = s_addr24;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i < 2){
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
	print FH "  csl_port p_data15(input,$val1);\n";  
	print FH "  csl_port p_addr15(output,$val2);\n";
	print FH "  csl_signal s_addr25($w);\n";
	print FH "  csl_signal s_data8($val1);\n"; 
	print FH "  csl_signal s_data25($w);\n"; 

    }
    elsif($i >= 2) {
        print FH "  e e1(.p_addr14(sgb6.sga0.s_sgga));\n"; 
        print FH "  e e2(.p_addr14(p_addr15));\n";
        print FH "  sgb sgb6;\n";
	print FH "  csl_port p_addr15(output,$val2);\n";
	print FH "  csl_signal s_data8($val1);\n"; 
	print FH "  csl_signal s_addr8($val1);\n";   
	print FH "  csl_port p_data35(inout,$w);\n";
    }
    print FH "  top(){\n";
    if($i < 2) {
        print FH "    p_data15[$u-:$l] = s_addr25;\n";
        print FH "    s_data8[$u-:$l] = p_addr15[$u-:$l];\n";
        print FH "    s_data25 = p_addr15[$u-:$l];\n"; 
    }
    elsif($i >= 2) {
        print FH "    p_addr15[$u-:$l] = s_data8[$u-:$l];\n";
	print FH "    sgb6.sga0.s_sgaa$i = sgb6.sga0.s_sa;\n";
        print FH "    s_addr8[$u-:$l] = p_addr15[$u-:$l];\n";
        print FH "    p_data35[$w1] = sgb6.s_sggb[$u];\n";
        print FH "    sgb6.s_sgb$i = {sgb6.s_sb\[".($w-1)."\-\:".(1)."\],sgb6.sga0.s_sga$i\[".($val1-1)."\-\:".($val1-1)."\]};\n";
        
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}


#!/usr/bin/perl

use strict;

use Switch;               # the switch/case command
use File::Find;           # traversing the directory tree
use File::Basename;       # retrieving the basename of a directory
use File::Path;           # mkpath command

my $ENUM         = "enum_";
my $cslEnum      = "csl_enum";
my $enumName     = "e";
my $enumItemName = "ei_";
my $possible     = 'abcdefghijkmnpqrstuvwxyz123456789ABCDEFGHJKLMNPQRSTUVWXYZ';

my $ITEMS_NO     = 20;
my $BASE_BIN     = 2;
my $BASE_OCT     = 8;
my $BASE_DEC     = 10;
my $BASE_HEX     = 16;

my $testDate     = `date "+%d/%m/%G, %T"`;
my $start_time   = time();
my $testName     = "";
my $enumItemsNo;
my $noVerNo;
my $eiValue;

&gen_enum();

print "Generated tests path: csl_test_gen/enum_no_char_float_invalid\n";

sub printHeader{
    my $testName = $_[0];

    print FH "//Test generated by AncaO\n";
    print FH "//Test cases from : csl_enum_matr.odg\n";
    print FH "//Test name: $testName\n";
    print FH "//Date: $testDate\n";
    print FH "//csl_enum with verilog numbers is created";
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
    #print "[INFO] Created directory $dirName\n";
}

sub createCSLfile{
    $testName = $_[0];

    &mkDir("$ENV{WORK}/test/csl_test_gen/enum_no_char_float_invalid");
    open( FH, ">$ENV{WORK}/test/csl_test_gen/enum_no_char_float_invalid/$testName");

    &printHeader($testName);
    print FH "\n";
    print FH "$cslEnum e {\n";
#    print FH "  $enumName() {\n";
}

sub closeCSLfile{
#    print FH "   }\n";
    print FH "};\n";       
}

sub generateRandomNumber{
    my ($_digits, $_base) = @_;
    $noVerNo = "";

    for( my $_noDigits = 0; $_noDigits < $_digits; $_noDigits++) {
        my $number = int( rand( $_base));
        $noVerNo .= $number; 
    }
}

sub generateNoWithChar{
    my $_digits = $_[0];
    $eiValue = "";

    while (length($eiValue) < $_digits) {
        $eiValue .= substr($possible, (int(rand(length($possible)))), 1);
    }
}

sub gen_enum{
#valid
    my $_enumItemsNo;
    for( my $enumItemsNo = 0; $enumItemsNo < $ITEMS_NO; $enumItemsNo++) {
        for( my $_digits = 1; $_digits < 5; $_digits++){
            for( my $_digitsf = 1; $_digitsf < 5; $_digitsf++){
                $testName = $ENUM . "float_no_" . $enumItemsNo . "_" . $_digits . "_" . $_digitsf . "_illegal.csl";

                &createCSLfile($testName);
                for( $_enumItemsNo = 0; $_enumItemsNo < $enumItemsNo; $_enumItemsNo++) {
                    &generateRandomNumber($_digits, $BASE_DEC);
                    print FH "     $enumItemName" . $_enumItemsNo . " = " . $noVerNo;
                    &generateRandomNumber($_digitsf, $BASE_DEC);
                    print FH ".$noVerNo,\n";
                }
                &generateRandomNumber($_digits, $BASE_DEC);
                print FH "     $enumItemName" . $_enumItemsNo . " = " . $noVerNo;
                &generateRandomNumber($_digitsf, $BASE_DEC);
                print FH ".$noVerNo\n";
                &closeCSLfile($testName);
            }
            $testName = $ENUM . "no_with_char_" . $enumItemsNo . "_" . $_digits . "_illegal.csl";
            &createCSLfile($testName);
            for( $_enumItemsNo = 0; $_enumItemsNo < $enumItemsNo; $_enumItemsNo++) {
                &generateNoWithChar($_digits);
                print FH "     $enumItemName" . $_enumItemsNo . " = " . $eiValue . ",\n";
            }
            &generateNoWithChar($_digits);
            print FH "     $enumItemName" . $_enumItemsNo . " = " . $eiValue . "\n";
            &closeCSLfile($testName);
        }
    }

    my $finish_time  = time(); #statistics on the time elapsed from the start of the regression until it's end
    my $elapsed_time = $finish_time - $start_time;
    my $day          = int $elapsed_time/86400;
    my $hour         = int $elapsed_time%86400/3600;
    my $min          = int $elapsed_time%3600/60;
    my $sec          = $elapsed_time-$day*86400-$hour*3600-$min*60;
   # print "min = $min\n";
   # print "sec = $sec\n";
}

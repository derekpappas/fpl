#!/usr/bin/perl

#oanab
#fields with part select

use strict;

print "Generated tests path : test/csl_test_gen/field_part_sel_invalid/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 250; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "field_part_sel".$i."_illegal.csl";
   	&createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(20)) + 2;
    my $val2 = int(rand(100)) + 3;
    my $val3 = int(rand(100)) + 4;
    my $l = int(rand(3))+1;
    my $m = $k + int(rand(10)) + 1;
   
    &mkDir("$path/field_part_sel_invalid");
    open(FH,">$path/field_part_sel_invalid/$test_name");
   
    print FH "//Generated by oanab\n\n";

#bitranges
    print FH "csl_bitrange br2($val2);\n\n";

#fields
    print FH "csl_field f1($val1);\n";
    print FH "csl_field f2(br2\[".($val2+2)."\:".(1)."\]);\n";
    print FH "csl_field f3($val3);\n";
    print FH "csl_field f4(".($val2+$val3).");\n";
    print FH "csl_field f5(".($val1+$val2+$val3).");\n";
    print FH "csl_field f6(".(2*$val2+2*$val1).");\n\n";

    
#ifc k
    if($i <= 50 || $i > 200 && $i <= 250) {
	print FH "csl_interface ifc$k {\n";
	print FH "  csl_port p_a$i(input,f3);\n";
	print FH "  csl_port p_b$i(output,f6\[".($val2+2*$val1)."\:".(2*$val1+1)."\]);\n";
	print FH "  csl_port p_c$i(output,f5\[".($val1+$val2+$val3)."\-\:".($val2+$val3)."\]);\n";
	print FH "  csl_port p_d$i(input,f1);\n";
	print FH "  ifc$k () {}\n";
	print FH "};\n\n";
    }

  
#sg k
    if($i > 100 && $i <= 150) {
	print FH "csl_signal_group sg$k {\n";
	print FH "  csl_signal s_a$i(f6\[".(2*$val2+2*$val1)."\-\:".($val2+$val1)."\]);\n";
	print FH "  csl_signal s_b$i(f3);\n";
	print FH "  csl_signal s_c$i(f5\[".($val1+$val3+2*$val2)."\:".($val2+$val1+1)."\]);\n";
	print FH "  csl_signal s_d$i(f4);\n";
	print FH "  sg$k () {}\n";
	print FH "};\n\n";
    }


#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 50) {
	print FH "  ifc$k ifc$k\_$zero;\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_port p_a$i(input,f5\[".($val1+$val2+$val3)."\:".($val2+1)."\]);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_port p_a$i(input,f3);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_signal s_m$i(f5\[".($val1+$val3+2*$val2)."\:".($val2+$val1+1)."\]);\n";
    }
#Invalid part select : upper limit
    elsif($i > 200 && $i <= 250) {
	print FH "  csl_port p_x$i(input,f4\[".($val2+$val3+$val1)."\-\:".($val2+$val3+1)."\]);  // Invalid part select : upper limit\n";
	print FH "  csl_port p_y$i(output,f6\[".(2*$val2+2*$val1)."\-\:".($val1+$val2+1)."\]);\n";
    }
    print FH "  a$k () {\n";
    if($i > 200 && $i <= 250) {
	print FH "    p_x$i = p_y$i\[".(2*$val2+$val1)."\:".(2*$val2+1)."\];\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i <= 50) {
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  csl_port p_x$i(output,f4\[".($val2+$val3)."\:".($val3)."\]);\n";
    }
#f2a : Invalid connection (different widths) : port---concat expr
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_signal s_x$i(f4\[".($val2+$val3)."\-\:".($val3)."\]);\n";
	print FH "  csl_signal s_y$i(f6\[".(2*$val2+2*$val1)."\:".(2*$val2+$val1)."\]);\n";
	print FH "  a$k a$k\_$one(.p_a$i({s_x$i,s_y$i}));  // Invalid connection (different widths) : port---concat expr\n";
    }
#f2a : Invalid connection (different widths) : port---sg.sig.ps 
    elsif($i > 100 && $i <= 150) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  a$k a$k\_$two(.p_a$i(sg$k\_$zero.s_c$i\[".($val3+$val2)."\:".($val2)."\]));  // Invalid connection (different widths) : port---sg.sig.ps\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_port p_m$i(output,".($val2+2).");\n";
    }
#Invalid part select : upper limit
    if($i > 200 && $i <= 250) {
	print FH "  csl_port p_x$i(output,f5\[".($val2+$val1+2*$val3)."\:".(2*$val3+$val1+1)."\]);  // Invalid part select : upper limit\n";
    }
    print FH "  b$k () {\n";
#assign : Invalid assign (different widths) : port---ifc.p
    if($i <= 50) {
	print FH "    p_x$i = ifc$k\_$one.p_b$i;  // Invalid assign (different widths) : port---ifc.p\n";
    }
#connect_by_name : Invalid connection (different widths) : sig---port
    elsif($i > 150 && $i <= 200) {
	print FH "    a$k\_$zero.s_m$i.connect_by_name(p_m$i);  // Invalid connection (different widths) : sig---port\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
#f2a : Invalid connection (different widths) : port---sig
    if($i <= 50) {
	print FH "  csl_signal s_x$i(f5\[".($val1+$val3)."\-\:".($val3)."\]);\n";
	print FH "  b$k b$k\_$one(.p_x$i(s_x$i));  // Invalid connection (different widths) : port---sig\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_signal s_a$i(f6\[".($val2+2*$val1)."\:".($val2+$val1)."\]);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_port p_x$i(input,f5\[".($val1+$val2+$val3)."\:".($val3+1)."\]);\n";
	print FH "  csl_signal s_x$i(f6\[".(2*$val2+2*$val1)."\-\:".($val2+$val1)."\]);\n";
    }
    if($i > 200 && $i <= 250) {
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  b$k b$k\_$one(.p_x$i(ifc$k\_$zero.p_b$i\[".($val2+2*$val1)."\:".(2*$val1+1)."\]));\n";
    }
    print FH "  c$k () {\n";
#connect_by_name : Invalid connection (different widths) : sig---port
    if($i > 50 && $i <= 100) {
	print FH "    s_a$i.connect_by_name(b$k\_$zero.a$k\_$zero.p_a$i);  // Invalid connection (different widths) : sig---port\n";
    }
#assign : Invalid assign (upper limit in sig.ps) : port---sig.ps
    elsif($i > 150 && $i <= 200) {
	print FH "    p_x$i = s_x$i\[".(3*$val2+2*$val1)."\:".(2*$val2+$val1+1)."\];  // Invalid assign (upper limit in sig.ps) : port---sig.ps\n";
    }
    print FH "  }\n";
    print FH "};\n\n";











}

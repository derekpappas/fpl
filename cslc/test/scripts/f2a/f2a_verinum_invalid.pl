#!/usr/bin/perl

#oanab
#verinum used with f2a
use strict;

print "Generated tests path : test/csl_test_gen/f2a_verinum_invalid/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 300; $i++) {
	&main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "f2a_verinum".$i."_illegal.csl";
    &createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100)) + 1;
    my $val2 = int(rand(100)) + 2;
    my $val3 = int(rand(100)) + 3;
    my $l = int(rand(3)) + 1;
    my $hex1 = sprintf("%x",$val1);
    my $hex2 = sprintf("%x",$val2);
    my $hex3 = sprintf("%x",$val3);
    my $bin1 = sprintf("%b",$val1);
    my $bin2 = sprintf("%b",$val2);
    my $bin3 = sprintf("%b",$val3);
    my $oct1 = sprintf("%o",$val1);
    my $oct2 = sprintf("%o",$val2);
    my $oct3 = sprintf("%o",$val3);
    if($test_name=~/(_legal)/){
        &mkDir("$path/f2a_verinum_valid");
        open(FH,">$path/f2a_verinum_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/f2a_verinum_invalid"); 
        open(FH,">$path/f2a_verinum_invalid/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#bitranges
    print FH "csl_bitrange br1($val1);  // dec bitrange\n"; # dec bitrange
    print FH "csl_bitrange br2(".(length($bin2))."'h$hex2);  // hex bitrange\n"; # hex bitrange
    print FH "csl_bitrange br3(".(length($bin3))."'o$oct3);  // octal bitrange\n"; # octal bitrange
    print FH "csl_bitrange br4(".($val2+$val3).");  // dec bitrange\n\n"; # dec bitrange

#fields
    print FH "csl_field f2(".(length($bin2))."'b$bin2);  // binary bitrange\n"; # binary bitrange
    print FH "csl_field f5(".($val1+$val2+$val3).");  // dec bitrange\n\n"; # dec bitrange


#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 50) {
	print FH "  csl_port p_x$i($dir{$l},br3);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_signal s_a$i;\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_port p_m$i($dir{$l},$val2);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_port p_a$i($dir{$l},f2);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  csl_port p_x$i($dir{$l},br2);\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  csl_signal s_b$i;\n";
    }
    print FH "  a$k () {\n";
    if($i > 50 && $i <= 100) {
	print FH "    s_a$i.set_width(".(length($bin3))."'h$hex3); // hex width\n"; # hex width
    }
    elsif($i > 250 && $i <= 300) {
	print FH "    s_b$i.set_range(".(length($bin2))."'o$oct2,0);  // lower should be first\n"; # lower should be first
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i <= 50) {
	print FH "  csl_port p_x$i($dir{$l},br2);\n";
#f2a : port---port (different widths)
	print FH "  a$k a$k\_$one(.p_x$i(p_x$i));  // f2a : port---port (different widths)\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_port p_b$i($dir{$l},".(length($bin2))."'o$oct2);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_signal s_a$i(f2);\n";
	print FH "  csl_signal s_b$i(br3);\n";
#f2a : port---concat expr (different widths)
	print FH "  a$k a$k\_$one(.p_m$i({s_a$i,s_b$i}));  // f2a : port---concat expr (different widths)\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_signal s_a$i(br4);\n";
#f2a : port---sig.ps (different widths)
	print FH "  a$k a$k\_$one(.p_a$i(s_a$i\[$val2\]));  // f2a : port---sig.ps (different widths)\n";
    }
    elsif($i > 200 && $i <= 250) {
	my $hex = sprintf("%x",$val2+$val3+1);
	my $bin = sprintf("%b",$val2+$val3+1);
	my $oct = sprintf("%o",$val3+2);
	my $binm = sprintf("%b",$val3+2);
	print FH "  csl_signal s_x$i(br4);\n";
#f2a : port---sig.ps (upper limit incorrect)
	print FH "  a$k a$k\_$one(.p_x$i(s_x$i\[".(length($bin))."'h$hex\:".(length($binm))."'o$oct\]));  // f2a : port---sig.ps (upper limit incorrect)\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  csl_port p_m$i($dir{$l},br4);\n";
    }
    print FH "  b$k () {\n";
   
    print FH "  }\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    if($i <= 50) {
	print FH "  csl_signal s_x$i(f5);\n";
#f2a : port---sig (different widths)
	print FH "  b$k b$k\_$one(.p_x$i(s_x$i));  // f2a : port---sig (different widths)\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_signal s_c$i(".(length($bin2))."'b$oct2);  // invalid : octal number with 'b\n"; # invalid : octal number with 'b
#f2a : port---sig
	print FH "  b$k b$k\_$one(.p_b$i(s_c$i));  // f2a : port---sig\n"; 
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  csl_signal s_a$i(br3);\n";
#f2a : port---concat expr (different widths)
	print FH "  b$k b$k\_$one(.p_m$i({s_a$i,".(length($bin1))."'h$hex1}));  // f2a : port---concat expr (different widths)\n";
    }
    print FH "  c$k () {\n";
    
    print FH "  }\n";
    print FH "};\n\n";





}

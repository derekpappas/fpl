#!/usr/bin/perl

#oanab
#methods for signals/ports with part select 

use strict;

print "Generated tests path : test/csl_test_gen/inter_part_sel_invalid/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 250; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "inter_part_sel".$i."_illegal.csl";
   	&createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(20))+1;
    my $val2 = int(rand(100))+2;
    my $val3 = int(rand(100))+3;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/inter_part_sel_valid");
        open(FH,">$path/inter_part_sel_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/inter_part_sel_invalid"); 
        open(FH,">$path/inter_part_sel_invalid/$test_name");
    }
    print FH "//Generated by oanab\n\n";
    print FH "//Test cases from: part_select_matrix.ods, set_clock_matrix.ods\n";
#bitranges
    print FH "csl_bitrange br1($val1);\n";
    print FH "csl_bitrange br2(".($val2+$val3).");\n\n";

#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 50) {
	print FH "  csl_port p_a$i($dir{$l});\n";
	print FH "  csl_signal s_a$i;\n";
    }
    if($i > 50 && $i <= 100) {
	print FH "  csl_signal s_x$i;\n";
    }
    if($i > 100 && $i <= 150) {
	print FH "  csl_port p_b$i(output,br2\[".($val2+$val3)."\:".($val3+1)."\]);\n";
	print FH "  csl_signal s_b$i(br1);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_port p_a$i($dir{$l});\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  csl_port clk(input);\n";
	print FH "  csl_signal s_x$i($val2);\n";
    }
    print FH "  a$k () {\n";
#Invalid : p.ps [],sig.ps [:]
    if($i <= 50) {
	print FH "    p_a$i\[$val2\].set_width($val2);  // Invalid use of part select\n";
	print FH "    s_a$i\[".($val1)."\:".($val1-1)."\].set_range(2,1);  // Invalid use of part select\n";
    }
#Invalid : sig.ps []
    elsif($i > 50 && $i <= 100) {
	print FH "    s_x$i\[$val1\].set_bitrange(br1);  // Invalid use of part select\n";
    }
#Invalid : p.ps [],sig.ps [-:]
    elsif($i > 100 && $i <= 150) {
	print FH "    p_b$i\[2\].set_type(wire);  // Invalid use of part select\n";
	print FH "    s_b$i\[".$val1."\-\:".(2)."\].set_type(tri);  // Invalid use of part select\n";
    }
#Invalid : p,p.ps []
    elsif($i > 150 && $i <= 200) {
	print FH "    p_a$i.set_range($val3,0);\n";
	print FH "    p_a$i\[4\].reverse();  // Invalid use of part select\n";
    }
#Invalid : p,sig.ps []
    elsif($i > 200 && $i <= 250) {
	print FH "    clk.set_attr(clock);\n";
	print FH "    s_x$i\[1\].set_clock(clk);  // Invalid use of part select\n";
    }
    print FH "  }\n";
    print FH "};\n";


#unit b
    print FH "csl_unit b$k {\n";
    print FH "  csl_signal s_a$i;\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i > 50 && $i <= 100) {
	print FH "  csl_port p_b$i(output,$val2);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_signal s_m$i(br2\[".($val2+$val3)."\-\:".($val3)."\]);\n";
    }
    print FH "  b$k () {\n";
#Invalid : sig.ps [-:]
    if($i <= 50) {
	print FH "    s_a$i\[".$val3."\-\:".(3)."\].set_width(3);  // Invalid use of part select\n";
    }
#Invalid : p.ps []
    if($i > 50 && $i <= 100) {
	print FH "    p_b$i\[4\].set_range(3,0);  // Invalid use of part select\n";
    }
#Invalid : sig.ps []
    elsif($i > 150 && $i <= 200) {
	print FH "    s_m$i\[".($val3-3)."\].set_attr(mux_sel);  // Invalid use of part select\n";
    }
    print FH "  }\n";
    print FH "};\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    if($i > 50 && $i <= 100) {
	print FH "  csl_port p_x$i(output);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_signal s_m$i;\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_port p_m$i(input,$val3);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  csl_port clk(input);\n";
	print FH "  csl_port p_x$i(input,br2\[".($val3+$val2)."\:".($val3)."\]);\n";
    }
    print FH "  c$k () {\n";
#Invalid : p.ps [-:]
    if($i > 50 && $i <= 100) {
	print FH "    p_x$i\[".($val2+$val1)."\-\:".($val1)."\].set_bitrange(br1);  // Invalid use of part select\n";
    }
#Invalid : sig.ps [:],sig
    elsif($i > 100 && $i <= 150) {
	print FH "    s_m$i\[".($val2+12)."\:".(7)."\].set_type(wor);  // Invalid use of part select\n";
	print FH "    s_m$i.set_range($val2,0);\n";
    }
#Invalid : p.ps []
    elsif($i > 150 && $i <= 200) {
	print FH "    p_m$i\[21\].set_attr(decode);  // Invalid use of part select\n";
    }
#Invalid : sig,p.ps []
    elsif($i > 200 && $i <= 250) {
	print FH "    clk.set_attr(clock);\n";
	print FH "    p_x$i\[1\].set_clock(clk);  // Invalid use of part select\n";
    }
    print FH "  }\n";
    print FH "};\n";











}

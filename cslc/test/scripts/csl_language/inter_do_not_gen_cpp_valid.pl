#!/usr/bin/perl

#oanab
#generating tests with the method called in unit,reg,rf,fifo,mem and tb

use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

print "Generated tests path : test/csl_test_gen/inter_not_gen_cpp_valid/\n";

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 500; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "inter_not_gen_cpp".$i."_legal.csl";
   	&createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(20))+1;
    my $val2 = int(rand(100))+2;
    my $val3 = int(rand(100))+3;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/inter_not_gen_cpp_valid");
        open(FH,">$path/inter_not_gen_cpp_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/inter_not_gen_cpp_invalid1"); 
        open(FH,">$path/inter_not_gen_cpp_invalid1/$test_name");
    }
    print FH "//Generated by oanab \n";
    print FH "//Test cases from: do_not_gen_cpp_test_matr.odg \n\n";


#register reg
    if($i <= 100 || $i > 150 && $i <= 250 || $i > 325 && $i <= 400) {
	print FH "csl_register reg$k {\n";
	print FH "  reg$k () {\n";
	print FH "    set_width($val2);\n";
	print FH "    set_type(register);\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#register rreg
    if($i <= 50 || $i > 100 && $i <= 150 || $i > 475 && $i <= 500) {
	print FH "csl_register rreg$k {\n";
	print FH "  rreg$k () {\n";
	print FH "    set_width($val3);\n";
	print FH "    set_type(register);\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }


#register file rf
    if($i > 50 && $i <= 100 || $i > 150 && $i <= 300 || $i > 350 && $i <= 400) {
	print FH "csl_register_file rf$k {\n";
	print FH "  rf$k () {\n";
	print FH "    set_width($val3);\n";
	print FH "    set_depth(".($val2+$val3).");\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }
    my $valr = $val2 + $val3;
    my $binvr = sprintf("%b",$valr);
    my $valrr = $val2 + $val1;
    my $binvrr = sprintf("%b",$valrr);


#register file rrf
    if($i > 250 && $i <= 275 || $i > 425 && $i <= 475) {
	print FH "csl_register_file rrf$k {\n";
	print FH "  rrf$k () {\n";
	print FH "    set_width($val1);\n";
	print FH "    set_depth(".($val2+$val1).");\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }


#fifo f
    if($i > 50 && $i <= 100 || $i > 150 && $i <= 325 || $i > 350 && $i <= 400) {
	print FH "csl_fifo f$k {\n";
	print FH "  f$k () {\n";
	print FH "    set_width($val1);\n";
	print FH "    set_depth(".($val2+$val1).");\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#fifo ff
    if($i > 350 && $i <= 400 || $i > 425 && $i <= 475) {
	print FH "csl_fifo ff$k {\n";
	print FH "  ff$k () {\n";
	print FH "    set_width($val3);\n";
	print FH "    set_depth(".($val3+$val1).");\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }
    
    
#memory mem
    if($i > 100 && $i <= 200 || $i > 250 && $i <= 325 || $i > 350 && $i <= 425) {
	print FH "csl_memory mem$k {\n";
	print FH "  mem$k () {\n";
	print FH "    set_width($val2);\n";
	print FH "    set_depth(".($val2+$val1).");\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }
  
#memory mmem
    if($i > 400 && $i <= 450) {
	print FH "csl_memory mmem$k {\n";
	print FH "  mmem$k () {\n";
	print FH "    set_width($val3);\n";
	print FH "    set_depth(".($val2+$val3).");\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }  



#unit a
    print FH "csl_unit a$k {\n";
    if($i > 275 && $i <= 350 || $i > 400 && $i <= 450) {
	print FH "  csl_port p_b$i(input,$val3);\n";
	print FH "  csl_port p_c$i(output,$val3);\n";
	print FH "  csl_port clk(input);\n";
    }
    if($i <= 100) {
	print FH "  csl_signal reg_in($val2);\n";
	print FH "  csl_signal reg_out($val2);\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  reg$k reg$k\_$zero(.reg_in(reg_in),.reg_out(reg_out),.clock(clock),.enable(enable),.reset_(reset_));\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  mem$k mem$k\_$zero;\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_signal reg_in($val2);\n";
	print FH "  csl_signal reg_out($val2);\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  reg$k reg$k\_$zero(.reg_in(reg_in),.reg_out(reg_out),.clock(clock),.enable(enable),.reset_(reset_));\n";
	print FH "  mem$k mem$k\_$zero;\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  csl_signal reg_in($val2);\n";
	print FH "  csl_signal reg_out($val2);\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  reg$k reg$k\_$zero(.reg_in(reg_in),.reg_out(reg_out),.clock(clock),.enable(enable),.reset_(reset_));\n";
    }
    elsif($i > 250 && $i <= 275) {
	print FH "  csl_signal rd_en1;\n";
	print FH "  csl_signal rd_en0;\n";
	print FH "  csl_signal wr_en;\n";
	print FH "  csl_signal data_out1($val1);\n";
	print FH "  csl_signal data_out0($val1);\n";
	print FH "  csl_signal data_in($val1);\n";
	print FH "  csl_signal rd_addr1(".(length($binvrr)).");\n";
	print FH "  csl_signal rd_addr0(".(length($binvrr)).");\n";
	print FH "  csl_signal wr_addr(".(length($binvrr)).");\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal clear;\n";
	print FH "  csl_signal reset;\n";
	print FH "  rrf$k rrf$k\_$one(.valid(valid),.rd_en1(rd_en1),.rd_en0(rd_en0),.wr_en(wr_en),.data_out1(data_out1),.data_out0(data_out0),.data_in(data_in),.rd_addr1(rd_addr1),.rd_addr0(rd_addr0),.wr_addr(wr_addr),.clock(clock),.clear(clear),.reset(reset));\n";
    }
    elsif($i > 300 && $i <= 325) {
	print FH "  csl_signal wr_data($val1);\n";
	print FH "  csl_signal rd_data($val1);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  f$k f$k\_$two(.valid(valid),.clock(clock),.reset_(reset_),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";
    }
    elsif($i > 350 && $i <= 400) {
	print FH "  csl_signal reg_in($val2);\n";
	print FH "  csl_signal reg_out($val2);\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  reg$k reg$k\_$one(.reg_in(reg_in),.reg_out(reg_out),.clock(clock),.enable(enable),.reset_(reset_));\n";
    }
    elsif($i > 400 && $i <= 425) {
	print FH "  mem$k mem$k\_$one;\n";
    }
    elsif($i > 450 && $i <= 475) {
	print FH "  csl_port p_a$i(output,$val1);\n";
	print FH "  csl_port p_b$i(input,$val1);\n";
	print FH "  csl_port p_c$i(output,$val1);\n";
	print FH "  csl_port clk(input);\n";
	print FH "  csl_signal rd_en1;\n";
	print FH "  csl_signal rd_en0;\n";
	print FH "  csl_signal wr_en;\n";
	print FH "  csl_signal rd_addr1(".(length($binvrr)).");\n";
	print FH "  csl_signal rd_addr0(".(length($binvrr)).");\n";
	print FH "  csl_signal wr_addr(".(length($binvrr)).");\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal clear;\n";
	print FH "  csl_signal reset;\n";
	print FH "  rrf$k rrf$k\_$two(.valid(valid),.rd_en1(rd_en1),.rd_en0(rd_en0),.wr_en(wr_en),.data_out1(p_a$i),.data_out0(p_c$i),.data_in(p_b$i),.rd_addr1(rd_addr1),.rd_addr0(rd_addr0),.wr_addr(wr_addr),.clock(clk),.clear(clear),.reset(reset));\n";
    }
    elsif($i > 475 && $i <= 500) {
	print FH "  csl_port p_b$i(input,$val3);\n";
	print FH "  csl_port p_c$i(output,$val3);\n";
	print FH "  csl_port clk(input);\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  rreg$k rreg$k\_$one(.reg_in(p_b$i),.reg_out(p_c$i),.clock(clk),.enable(enable),.reset_(reset_));\n";
    }
    print FH "  a$k () {\n";
    if($i > 50 && $i <= 100) {
	print FH "    do_not_gen_cpp();\n";
    }
    elsif($i > 275 && $i <= 350 || $i > 400 && $i <= 425 || $i > 450 && $i <= 500) {
	print FH "    clk.set_attr(clock);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit b
    print FH "csl_unit b$k {\n";
    if($i <= 50) {
	print FH "  a$k a$k\_$zero;\n";
	print FH "  csl_signal reg_in($val3);\n";
	print FH "  csl_signal reg_out($val3);\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  rreg$k rreg$k\_$zero(.reg_in(reg_in),.reg_out(reg_out),.clock(clock),.enable(enable),.reset_(reset_));\n";
    }
    elsif($i > 50 && $i <= 150) {
	print FH "  a$k a$k\_$zero;\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  a$k a$k\_$zero;\n";
	print FH "  csl_signal rd_en1;\n";
	print FH "  csl_signal rd_en0;\n";
	print FH "  csl_signal wr_en;\n";
	print FH "  csl_signal data_out1($val3);\n";
	print FH "  csl_signal data_out0($val3);\n";
	print FH "  csl_signal data_in($val3);\n";
	print FH "  csl_signal rd_addr1(".(length($binvr)).");\n";
	print FH "  csl_signal rd_addr0(".(length($binvr)).");\n";
	print FH "  csl_signal wr_addr(".(length($binvr)).");\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal clear;\n";
	print FH "  csl_signal reset;\n";
	print FH "  rf$k rf$k\_$one(.valid(valid),.rd_en1(rd_en1),.rd_en0(rd_en0),.wr_en(wr_en),.data_out1(data_out1),.data_out0(data_out0),.data_in(data_in),.rd_addr1(rd_addr1),.rd_addr0(rd_addr0),.wr_addr(wr_addr),.clock(clock),.clear(clear),.reset(reset));\n";
	print FH "  f$k f$k\_$one(.valid(valid),.clock(clock),.reset_(reset),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";
	print FH "  csl_signal wr_data($val1);\n";
	print FH "  csl_signal rd_data($val1);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
    }
    elsif($i > 200 && $i <= 300) {
	if($i > 275) {
	    print FH "  a$k a$k\_$zero(.clk(clock),.p_b$i(data_out1),.p_c$i(data_out0));\n";
	}
	else {
	    print FH "  a$k a$k\_$zero;\n";
	}
	print FH "  csl_signal rd_en1;\n";
	print FH "  csl_signal rd_en0;\n";
	print FH "  csl_signal wr_en;\n";
	print FH "  csl_signal data_out1($val3);\n";
	print FH "  csl_signal data_out0($val3);\n";
	print FH "  csl_signal data_in($val3);\n";
	print FH "  csl_signal rd_addr1(".(length($binvr)).");\n";
	print FH "  csl_signal rd_addr0(".(length($binvr)).");\n";
	print FH "  csl_signal wr_addr(".(length($binvr)).");\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal clear;\n";
	print FH "  csl_signal reset;\n";
	print FH "  rf$k rf$k\_$zero(.valid(valid),.rd_en1(rd_en1),.rd_en0(rd_en0),.wr_en(wr_en),.data_out1(data_out1),.data_out0(data_out0),.data_in(data_in),.rd_addr1(rd_addr1),.rd_addr0(rd_addr0),.wr_addr(wr_addr),.clock(clock),.clear(clear),.reset(reset));\n";
    }
    elsif($i > 300 && $i <= 325) {
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal s_b$i($val3);\n";
	print FH "  csl_signal s_c$i($val3);\n";
	print FH "  a$k a$k\_$zero(.clk(clock),.p_b$i(s_b$i),.p_c$i(s_c$i));\n";
    }
    elsif($i > 325 && $i <= 350) {
	print FH "  a$k a$k\_$zero(.clk(clock),.p_b$i(s_b$i),.p_c$i(s_c$i));\n";
	print FH "  csl_signal s_b$i($val3);\n";
	print FH "  csl_signal s_c$i($val3);\n";
	print FH "  csl_signal reg_in($val2);\n";
	print FH "  csl_signal reg_out($val2);\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  reg$k reg$k\_$two(.reg_in(reg_in),.reg_out(reg_out),.clock(clock),.enable(enable),.reset_(reset_));\n";
    }
    elsif($i > 350 && $i <= 400) {
	print FH "  a$k a$k\_$zero;\n";
	print FH "  csl_signal wr_data($val1);\n";
	print FH "  csl_signal rd_data($val1);\n";
	print FH "  csl_signal wr_data_($val3);\n";
	print FH "  csl_signal rd_data_($val3);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  f$k f$k\_$tre(.valid(valid),.clock(clock),.reset_(reset_),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";
	print FH "  ff$k ff$k\_$tre(.valid(valid),.clock(clock),.reset_(reset_),.wr_data(wr_data_),.rd_data(rd_data_),.empty(empty),.full(full),.pop(pop),.push(push));\n";
    }
    elsif($i > 400 && $i <= 450) {
	print FH "  a$k a$k\_$zero(.clk(clk),.p_b$i(s_b$i),.p_c$i(s_c$i));\n";
	print FH "  csl_signal s_b$i($val3);\n";
	print FH "  csl_signal s_c$i($val3);\n";
	print FH "  csl_signal clk;\n";
	print FH "  mmem$k mmem$k\_$one;\n";
    }
    elsif($i > 450 && $i <= 475) {
	print FH "  a$k a$k\_$zero(.clk(clk),.p_a$i(s_a$i),.p_b$i(s_b$i),.p_c$i(s_c$i));\n";
	print FH "  csl_signal s_a$i($val1);\n";
	print FH "  csl_signal s_b$i($val1);\n";
	print FH "  csl_signal s_c$i($val1);\n";
	print FH "  csl_signal clk;\n";
    }
    elsif($i > 475 && $i <= 500) {
	print FH "  a$k a$k\_$zero(.clk(clk),.p_b$i(s_b$i),.p_c$i(s_c$i));\n";
	print FH "  csl_signal s_b$i($val3);\n";
	print FH "  csl_signal s_c$i($val3);\n";
	print FH "  csl_signal clk;\n";
    }
    print FH "  b$k () {\n";
    if($i <= 50 || $i > 100 && $i <= 150 || $i > 475 && $i <= 500) {
	print FH "    do_not_gen_cpp();\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    if($i <= 50) {
	print FH "  b$k b$k\_$zero;\n";
    }
    if($i > 50 && $i <= 100) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  csl_signal rd_en1;\n";
	print FH "  csl_signal rd_en0;\n";
	print FH "  csl_signal wr_en;\n";
	print FH "  csl_signal data_out1($val3);\n";
	print FH "  csl_signal data_out0($val3);\n";
	print FH "  csl_signal data_in($val3);\n";
	print FH "  csl_signal rd_addr1(".(length($binvr)).");\n";
	print FH "  csl_signal rd_addr0(".(length($binvr)).");\n";
	print FH "  csl_signal wr_addr(".(length($binvr)).");\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal clear;\n";
	print FH "  csl_signal reset;\n";
	print FH "  rf$k rf$k\_$zero(.valid(valid),.rd_en1(rd_en1),.rd_en0(rd_en0),.wr_en(wr_en),.data_out1(data_out1),.data_out0(data_out0),.data_in(data_in),.rd_addr1(rd_addr1),.rd_addr0(rd_addr0),.wr_addr(wr_addr),.clock(clock),.clear(clear),.reset(reset));\n";
	print FH "  f$k f$k\_$zero(.valid(valid),.clock(clock),.reset_(reset),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";
	print FH "  csl_signal wr_data($val1);\n";
	print FH "  csl_signal rd_data($val1);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  csl_signal reg_in($val3);\n";
	print FH "  csl_signal reg_out($val3);\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal enable;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  rreg$k rreg$k\_$one(.reg_in(reg_in),.reg_out(reg_out),.clock(clock),.enable(enable),.reset_(reset_));\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  b$k b$k\_$zero;\n"
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  csl_signal wr_data($val1);\n";
	print FH "  csl_signal rd_data($val1);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  f$k f$k\_$zero(.valid(valid),.clock(clock),.reset_(reset_),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  csl_signal wr_data($val1);\n";
	print FH "  csl_signal rd_data($val1);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal reset_;\n";
	print FH "  f$k f$k\_$two(.valid(valid),.clock(clock),.reset_(reset_),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";
	print FH "  mem$k mem$k\_$two;\n";
    }
    elsif($i > 300 && $i <= 325) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  mem$k mem$k\_$two;\n";
    }
    elsif($i > 325 && $i <= 350) {
	print FH "  b$k b$k\_$zero;\n";
    }
    elsif($i > 350 && $i <= 400) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  csl_signal rd_en1;\n";
	print FH "  csl_signal rd_en0;\n";
	print FH "  csl_signal wr_en;\n";
	print FH "  csl_signal data_out1($val3);\n";
	print FH "  csl_signal data_out0($val3);\n";
	print FH "  csl_signal data_in($val3);\n";
	print FH "  csl_signal rd_addr1(".(length($binvr)).");\n";
	print FH "  csl_signal rd_addr0(".(length($binvr)).");\n";
	print FH "  csl_signal wr_addr(".(length($binvr)).");\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal clear;\n";
	print FH "  csl_signal reset;\n";
	print FH "  rf$k rf$k\_$zero(.valid(valid),.rd_en1(rd_en1),.rd_en0(rd_en0),.wr_en(wr_en),.data_out1(data_out1),.data_out0(data_out0),.data_in(data_in),.rd_addr1(rd_addr1),.rd_addr0(rd_addr0),.wr_addr(wr_addr),.clock(clock),.clear(clear),.reset(reset));\n";
	print FH "  mem$k mem$k\_$zero;\n";
    }
    elsif($i > 400 && $i <= 425) {
	print FH "  b$k b$k\_$zero;\n";
    }
    elsif($i > 425 && $i <= 450) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  csl_signal rd_en1;\n";
	print FH "  csl_signal rd_en0;\n";
	print FH "  csl_signal wr_en;\n";
	print FH "  csl_signal data_out1($val1);\n";
	print FH "  csl_signal data_out0($val1);\n";
	print FH "  csl_signal data_in($val1);\n";
	print FH "  csl_signal rd_addr1(".(length($binvrr)).");\n";
	print FH "  csl_signal rd_addr0(".(length($binvrr)).");\n";
	print FH "  csl_signal wr_addr(".(length($binvrr)).");\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal clear;\n";
	print FH "  csl_signal reset;\n";
	print FH "  rrf$k rrf$k\_$zero(.valid(valid),.rd_en1(rd_en1),.rd_en0(rd_en0),.wr_en(wr_en),.data_out1(data_out1),.data_out0(data_out0),.data_in(data_in),.rd_addr1(rd_addr1),.rd_addr0(rd_addr0),.wr_addr(wr_addr),.clock(clock),.clear(clear),.reset(reset));\n";
	print FH "  csl_signal wr_data($val3);\n";
	print FH "  csl_signal rd_data($val3);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
	print FH "  ff$k ff$k\_$zero(.valid(valid),.clock(clock),.reset_(reset),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";
    }
    elsif($i > 450 && $i <= 475) {
	print FH "  b$k b$k\_$zero;\n";
	print FH "  csl_signal clock;\n";
	print FH "  csl_signal valid;\n";
	print FH "  csl_signal reset;\n";
	print FH "  csl_signal wr_data($val3);\n";
	print FH "  csl_signal rd_data($val3);\n";
	print FH "  csl_signal empty;\n";
	print FH "  csl_signal full;\n";
	print FH "  csl_signal pop;\n";
	print FH "  csl_signal push;\n";
	print FH "  ff$k ff$k\_$one(.valid(valid),.clock(clock),.reset_(reset),.wr_data(wr_data),.rd_data(rd_data),.empty(empty),.full(full),.pop(pop),.push(push));\n";  
    }
    elsif($i > 475 && $i <= 500) {
	print FH "  b$k b$k\_$zero;\n";
    }
    print FH "  c$k () {\n";
    if($i <= 50 || $i > 150 && $i <= 200 || $i > 325 && $i <= 350) {
	print FH "    do_not_gen_cpp();\n";
    }
    print FH "  }\n";
    print FH "};\n\n";
  
  
#stim vector
    if($i > 275 && $i <= 350 || $i > 400 && $i <= 425 || $i > 450 && $i <= 500) {
	print FH "csl_vector stim_vect$k {\n";
	print FH "  stim_vect$k () {\n";
	print FH "    set_unit_name(a$k);\n";
	print FH "    set_direction(input);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#exp vector
    if($i > 275 && $i <= 350 || $i > 400 && $i <= 425 || $i > 450 && $i <= 500) {
	print FH "csl_vector exp_vect$k {\n";
	print FH "  exp_vect$k () {\n";
	print FH "    set_unit_name(a$k);\n";
	print FH "    set_direction(output);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#testbench tb
    if($i > 275 && $i <= 350 || $i > 400 && $i <= 425 || $i > 450 && $i <= 500) {
	print FH "csl_testbench tb$k {\n";
	print FH "  csl_signal clk(reg);\n";
	print FH "  a$k a$k\_$one;\n";
	print FH "  tb$k () {\n";
	print FH "    clk.set_attr(clock);\n";
	print FH "    add_logic(clock,clk,10,ps);\n";
	print FH "    do_not_gen_cpp();\n";
	print FH "  }\n";
	print FH "};\n\n";
    }



}

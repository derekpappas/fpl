#!/usr/bin/perl


use Switch;               # the switch/case command
use File::Find;           # traversing the directory tree
use File::Basename;       # retrieving the basename of a directory
use File::Path;           # mkpath command

use strict;

#const for the test name
my $MEMMAPPAGE        = "mmp";
my $SETUNIT           = "_setu";
my $NOUNIT            = "_0u";
my $ONEUNIT           = "_1u";
my $TWOUNIT           = "_2u";
my $ONEMMP            = "_1mmp";
my $TWOMMP            = "_2mmp";
my $ADDOBJ            = "_addobj";

#var used in tests
my $classMemoryMap     = "csl_memory_map";
my $memoryMapName      = "mem";
my $classMemoryMapPage = "csl_memory_map_page";
my $memoryMapPageName1 = "mempage1";
my $memoryMapPageName2 = "mempage2";
my $addAdrRange        = "add_address_range";
#my $addAdrRangeResv    = "add_reserved_address_range";
#my $setAccessRights    = "set_access_rights";
my $addObject          = "add";
my $setUnit            = "set_unit";
my $classRegisterFile  = "csl_register_file";
my $registerFileName1  = "reg1";
my $registerFileName2  = "reg2";
my $classUnit          = "csl_unit";
my $unitName1          = "u1";
my $unitName2          = "u2";


my $memAdrRange        = " 128, 1024";
my $memAdrRangeResv    = " 128, 1024";
my $rfRange1           = " 200";

my $test_name = "";
my $test_date = `date "+%d/%m/%G, %T"`;
my @test_list = ();


#subroutine called
&generate_memory_map_tests;

#subroutine to print in the generated file the header
sub print_header {
    my $test_name = $_[0];

    #print "print_header\n";
    print FH "//Test generated by Ines\n";
    print FH "//Test name: $test_name\n";
    print FH "//Date: $test_date\n";
    print FH "//a csl_register_file, csl_unit, csl_memory_map & csl_memory_map_page are created\n";
    print FH "//the csl_memory_map_page has the folowing range of addresses ($memAdrRange)\n";
    print FH "//the csl_memory_map_page has the folowing command set_unit() under test\n";
}

#subroutine gen tests name
sub generate_memory_map_tests {
    
    #print "generate_memory_map_tests\n";

    $test_name = $MEMMAPPAGE . $SETUNIT . "_valid.csl" ;
    open (FH, ">work/tests_set_unit/$test_name");
    &print_header($test_name);
    print FH "\n";

    #csl_register
    print FH "$classRegisterFile $registerFileName1 {\n";
    print FH "    $registerFileName1() {\n";
    print FH "        set_width(32);\n";
    print FH "        set_depth(64);\n";
    print FH "    }\n";
    print FH "};\n\n";

    printf FH "csl_unit dut{ \n";
    printf FH "    csl_port stim_in(input), stim_v(input), exp_d(output), exp_v(output); \n";
    printf FH "    csl_port clk(input); \n";
    printf FH "    dut(){ \n";
    printf FH "        clk.set_attr(clock); \n";
    printf FH "    } \n";
    printf FH "}; \n";
             
    printf FH "csl_vector stim_vec{ \n";
    printf FH "    stim_vec(){ \n";
    printf FH "        set_vc_unit_name(dut); \n";
    printf FH "        set_direction(input); \n";
    printf FH "        set_version(2); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    printf FH "csl_vector exp_vec{ \n";
    printf FH "    exp_vec(){ \n";
    printf FH "        set_unit_name(dut); \n";
    printf FH "        set_direction(output); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    printf FH "csl_state_data sd{ \n";
    printf FH "    sd(){ \n";
    printf FH "        set_memory_instance_name($registerFileName1); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    printf FH "csl_testbench tb{ \n";
    printf FH "    csl_signal clk(wire); \n";
    printf FH "    dut dut_1(.clk(clk)); \n";
    printf FH "    tb(){ \n";
    printf FH "        clk.set_attr(clock); \n";
    printf FH "        add_logic(clock,clk,100,ps); \n";
    printf FH "    } \n";
    printf FH "}; \n";


    close(FH);
    print "[INFO]Done\n";
}

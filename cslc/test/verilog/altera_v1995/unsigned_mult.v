// megafunction wizard: %ALTMEMMULT%CBX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altmemmult 

// ============================================================
// File Name: unsigned_mult.v
// Megafunction Name(s):
// 			altmemmult
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
// ************************************************************


//Copyright (C) 1991-2003 Altera Corporation
//Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
//support information,  device programming or simulation file,  and any other
//associated  documentation or information  provided by  Altera  or a partner
//under  Altera's   Megafunction   Partnership   Program  may  be  used  only
//to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
//other  use  of such  megafunction  design,  netlist,  support  information,
//device programming or simulation file,  or any other  related documentation
//or information  is prohibited  for  any  other purpose,  including, but not
//limited to  modification,  reverse engineering,  de-compiling, or use  with
//any other  silicon devices,  unless such use is  explicitly  licensed under
//a separate agreement with  Altera  or a megafunction partner.  Title to the
//intellectual property,  including patents,  copyrights,  trademarks,  trade
//secrets,  or maskworks,  embodied in any such megafunction design, netlist,
//support  information,  device programming or simulation file,  or any other
//related documentation or information provided by  Altera  or a megafunction
//partner, remains with Altera, the megafunction partner, or their respective
//licensors. No other licenses, including any licenses needed under any third
//party's intellectual property, are provided herein.


//altmemmult COEFFICIENT0=5 DATA_REPRESENTATION=UNSIGNED DEVICE_FAMILY=Stratix MAX_CLOCK_CYCLES_PER_RESULT=1 RAM_BLOCK_TYPE=M4K TOTAL_LATENCY=2 WIDTH_C=10 WIDTH_D=8 WIDTH_R=18 clock data_in result sclr
//VERSION_BEGIN 3.0 cbx_altaccumulate 2003:04:08:16:04:48:SJ cbx_altmemmult 2003:04:28:19:18:22:SJ cbx_altsyncram 2003:05:29:15:19:40:SJ cbx_lpm_compare 2002:11:25:18:23:06:SJ cbx_lpm_decode 2003:03:25:17:43:04:SJ cbx_lpm_mux 2003:03:25:16:55:12:SJ cbx_mgl 2003:06:11:11:00:44:SJ cbx_stratix 2003:05:16:10:26:50:SJ  VERSION_END


//altsyncram DEVICE_FAMILY=Stratix INIT_FILE=unsigned_mult.hex OPERATION_MODE=ROM OUTDATA_REG_A=CLOCK0 RAM_BLOCK_TYPE=M4K WIDTH_A=18 WIDTHAD_A=8 address_a clock0 q_a
//VERSION_BEGIN 3.0 cbx_altsyncram 2003:05:29:15:19:40:SJ cbx_lpm_compare 2002:11:25:18:23:06:SJ cbx_lpm_decode 2003:03:25:17:43:04:SJ cbx_lpm_mux 2003:03:25:16:55:12:SJ cbx_mgl 2003:06:11:11:00:44:SJ cbx_stratix 2003:05:16:10:26:50:SJ  VERSION_END

//synthesis_resources = altsyncram 1 
module  unsigned_mult_altmemmult_vqi
	( 
	clock,
	data_in,
	result,
	result_valid,
	sclr) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  data_in;
	output   [17:0]  result;
	output   result_valid;
	input   sclr;

	wire  [17:0]   wire_altsyncram1_q_a;

	altsyncram   altsyncram1
	( 
	.address_a(data_in[7:0]),
	.clock0(clock),
	.q_a(wire_altsyncram1_q_a));
	defparam
		altsyncram1.init_file = "unsigned_mult.hex",
		altsyncram1.operation_mode = "ROM",
		altsyncram1.outdata_reg_a = "CLOCK0",
		altsyncram1.ram_block_type = "M4K",
		altsyncram1.width_a = 18,
		altsyncram1.widthad_a = 8,
		altsyncram1.lpm_type = "altsyncram";
	assign
		result = {wire_altsyncram1_q_a[17:0]},
		result_valid = 1'b0;
	initial
 	begin
		$display("WARNING : Ignored input port sclr -- port not used in current design");
	end
endmodule //unsigned_mult_altmemmult_vqi
//VALID FILE


module unsigned_mult (
	sclr,
	data_in,
	clock,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  sclr;
	input	[7:0]  data_in;
	input	  clock;
	output	[17:0]  result;

	wire [17:0] sub_wire0;
	wire [17:0] result = sub_wire0[17:0];

	unsigned_mult_altmemmult_vqi	unsigned_mult_altmemmult_vqi_component (
				.sclr (sclr),
				.data_in (data_in),
				.clock (clock),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: COEFFICIENT0 STRING "5"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "2"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix"
// Retrieval info: PRIVATE: COUNT_C_COMBO STRING "10"
// Retrieval info: PRIVATE: COUNT_D_COMBO STRING "8"
// Retrieval info: PRIVATE: DATA_REPRESENTATION_COMBO STRING "UNSIGNED"
// Retrieval info: PRIVATE: SCLR_CHECK STRING "1"
// Retrieval info: CONSTANT: WIDTH_D NUMERIC "8"
// Retrieval info: CONSTANT: COEFFICIENT0 STRING "5"
// Retrieval info: CONSTANT: RAM_BLOCK_TYPE STRING "M4K"
// Retrieval info: CONSTANT: MAX_CLOCK_CYCLES_PER_RESULT NUMERIC "1"
// Retrieval info: CONSTANT: DATA_REPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix"
// Retrieval info: CONSTANT: TOTAL_LATENCY NUMERIC "2"
// Retrieval info: CONSTANT: WIDTH_R NUMERIC "18"
// Retrieval info: CONSTANT: WIDTH_C NUMERIC "10"
// Retrieval info: USED_PORT: sclr 0 0 0 0 INPUT NODEFVAL "sclr"
// Retrieval info: USED_PORT: data_in 0 0 8 0 INPUT NODEFVAL "data_in[7..0]"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: result 0 0 18 0 OUTPUT NODEFVAL "result[17..0]"
// Retrieval info: CONNECT: @data_in 0 0 8 0 data_in 0 0 8 0
// Retrieval info: CONNECT: result 0 0 18 0 @result 0 0 18 0
// Retrieval info: CONNECT: @sclr 0 0 0 0 sclr 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0

// Copyright FastPath Logic (2009)
// Interface Library File v1.0, this is autogenerated by FastPath Generator 2009-12-17 21:13
//----------------------------------------------------------------------
// Copyright (c) 2005-2008 Fastpathlogic
// All Rights Reserved.
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of Fastpathlogic;
// the contents of this file may not be disclosed to third parties,
// copied or duplicated in any form, in whole or in part, without the prior
// written permission of Fastpathlogic.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to
// restrictions as set forth in subdivision (c)(1)(ii) of the Rights in
// Technical Data and Computer Software clause at DFARS 252.227-7013,
// and/or in similar or succesor clauses in the FAR, DOD or NASA FAR Supplement.
// Unpublished rights reserved under the Copyright Laws of the United States
//----------------------------------------------------------------------




//------------------------------------------------------------
// Begin csl_interface declarations
//------------------------------------------------------------
csl_interface adrv_ifc { 
    csl_port addr ( output , wire , 18);
    csl_port data ( output , wire , 32);
    csl_port ready ( input , wire , 1);
    csl_port valid ( output , wire , 1);

    adrv_ifc() {
 }
};

csl_interface adw_ifc { 
    csl_port addr ( output , wire , 18);
    csl_port data ( output , wire , 32);
    csl_port wr ( input , wire , 1);

    adw_ifc() {
 }
};

csl_interface adwr_ifc { 
    csl_port addr ( output , wire , 18);
    csl_port data ( output , wire , 32);
    csl_port wr ( output , wire , 1);
    csl_port rd ( output , wire , 1);

    adwr_ifc() {
 }
};

csl_interface cdrv_ifc { 
    csl_port cmd ( input , wire , 1);
    csl_port data ( input , wire , 32);
    csl_port ready ( input , wire , 1);
    csl_port valid ( input , wire , 1);

    cdrv_ifc() {
 }
};

csl_interface dw_ifc { 
    csl_port data ( output , wire , 32);
    csl_port wr ( input , wire , 1);

    dw_ifc() {
 }
};

csl_interface fabric_ifc { 
    csl_port addr ( output , wire , 18);
    csl_port data ( output , wire , 32);
    csl_port nid ( output , wire , 4);
    csl_port ready ( input , wire , 1);
    csl_port reject ( output , wire , 1);
    csl_port type ( output , wire , 4);
    csl_port valid ( output , wire , 1);

    fabric_ifc() {
 }
};

csl_interface malt_ifc { 
    csl_port busy ( output , wire , 1);
    csl_port hit ( output , wire , 1);
    csl_port port ( output , wire , 1);
    csl_port start ( input , wire , 1);

    malt_ifc() {
 }
};

csl_interface nios_cii_ifc { 
    csl_port a ( output , wire , 1);
    csl_port b ( output , wire , 1);
    csl_port c ( output , wire , 1);
    csl_port clk_en ( output , wire , 1);
    csl_port clk ( output , wire , 1);
    csl_port dataa ( output , wire , 32);
    csl_port datab ( output , wire , 32);
    csl_port done ( input , wire , 1);
    csl_port n ( output , wire , 8);
    csl_port readra ( input , wire , 32);
    csl_port readrb ( input , wire , 32);
    csl_port reset ( output , wire , 1);
    csl_port result ( input , wire , 32);
    csl_port start ( output , wire , 1);
    csl_port writerc ( input , wire , 32);

    nios_cii_ifc() {
 }
};

csl_interface nios_int_ifc { 
    csl_port irq_i_to_the_interrupt_0 ( input , wire , 1);
    csl_port irq_i_to_the_interrupt_1 ( input , wire , 1);
    csl_port irq_i_to_the_interrupt_2 ( input , wire , 1);
    csl_port irq_i_to_the_interrupt_3 ( input , wire , 1);

    nios_int_ifc() {
 }
};

csl_interface nios_tcm_ifc { 
    csl_port address ( output , wire , 18);
    csl_port byteena ( output , wire , 4);
    csl_port chipsel ( output , wire , 1);
    csl_port enable ( output , wire , 1);
    csl_port dout ( input , wire , 32);
    csl_port wren ( output , wire , 1);
    csl_port din ( output , wire , 32);

    nios_tcm_ifc() {
 }
};

csl_interface ram_ifc { 
    csl_port address ( input , wire , 11);
    csl_port byteena ( input , wire , 4);
    csl_port clock ( input , wire , 1);
    csl_port data ( input , wire , 32);
    csl_port enable ( input , wire , 1);
    csl_port q ( output , wire , 16);
    csl_port wren ( input , wire , 1);

    ram_ifc() {
 }
};

csl_interface sb_ifc { 
    csl_port start ( output , wire , 1);
    csl_port busy ( input , wire , 1);

    sb_ifc() {
 }
};

csl_interface sber_ifc { 
    csl_port start ( output , wire , 1);
    csl_port busy ( input , wire , 1);
    csl_port empty ( output , wire , 1);
    csl_port result ( output , wire , 1);

    sber_ifc() {
 }
};

csl_interface sbhp_ifc { 
    csl_port start ( input , wire , 1);
    csl_port busy ( output , wire , 1);
    csl_port hit ( output , wire , 1);
    csl_port port ( output , wire , 1);

    sbhp_ifc() {
 }
};

csl_interface vrr_ifc { 
    csl_port valid ( output , wire , 1);
    csl_port rd ( input , wire , 1);
    csl_port result ( output , wire , 32);

    vrr_ifc() {
 }
};

csl_interface vsr_ifc { 
    csl_port read_response_valid ( output , wire , 1);
    csl_port fabric_start ( input , wire , 1);
    csl_port read_response ( output , wire , 32);

    vsr_ifc() { 
    }
};

//------------------------------------------------------------
// Begin csl_unit predecalaration
//------------------------------------------------------------
csl_unit arb;
csl_unit cil;
csl_unit data_tcm;
csl_unit doorbell;
csl_unit fabric_add;
csl_unit fabric_dma;
csl_unit fabric_drop;
csl_unit fabric_interface;
csl_unit fabric_unit;
csl_unit inst_tcm;
csl_unit ipc;
csl_unit maclu;
csl_unit nios;
csl_unit pie_aud_dq1;
csl_unit pie_aud_nq1;
csl_unit pie_eth_dq1;
csl_unit pie_eth_nq01;
csl_unit pie_eth_nq11;
csl_unit pie_ex_dq1;
csl_unit pie_ex_nq1;
csl_unit proc_ring;
csl_unit put_dma;
csl_unit qm;
csl_unit reg;
csl_unit sram0;



//------------------------------------------------------------
// Begin csl_unit declarations
//------------------------------------------------------------
//------------------------------------------------------
csl_unit fabric_interface {  // declaration
	// unit instances
	// interface instances
	fabric_interface() { 
	}
};


//------------------------------------------------------
csl_unit fabric_add {  // declaration
	// unit instances
	// interface instances
	fabric_add() { 
	}
};


//------------------------------------------------------
csl_unit pie_eth_dq1 {  // declaration
	// unit instances
	fabric_interface fabric_interface; // unit instance
	fabric_add fabric_add; // unit instance
	fabric_drop fabric_drop; // unit instance
	fabric_dma fabric_dma0; // unit instance
	fabric_dma fabric_dma1; // unit instance
	put_dma put_dma0; // unit instance
	put_dma put_dma1; // unit instance
	doorbell doorbell; // unit instance
	maclu maclu; // unit instance
	reg reg; // unit instance
	qm qm; // unit instance
	arb arb; // unit instance
	data_tcm data_tcm; // unit instance
	inst_tcm inst_tcm; // unit instance
	nios nios; // unit instance
	cil cil; // unit instance
	// interface instances
	pie_eth_dq1() { 
	}
};


//------------------------------------------------------
csl_unit fabric_drop {  // declaration
	// unit instances
	// interface instances
	fabric_drop() { 
	}
};


//------------------------------------------------------
csl_unit fabric_dma {  // declaration
	// unit instances
	// interface instances
	fabric_dma() { 
	}
};


//------------------------------------------------------
csl_unit put_dma {  // declaration
	// unit instances
	// interface instances
	put_dma() { 
	}
};


//------------------------------------------------------
csl_unit doorbell {  // declaration
	// unit instances
	// interface instances
	doorbell() { 
	}
};


//------------------------------------------------------
csl_unit maclu {  // declaration
	// unit instances
	// interface instances
	maclu() { 
	}
};


//------------------------------------------------------
csl_unit reg {  // declaration
	// unit instances
	// interface instances
	reg() { 
	}
};


//------------------------------------------------------
csl_unit qm {  // declaration
	// unit instances
	// interface instances
	qm() { 
	}
};


//------------------------------------------------------
csl_unit arb {  // declaration
	// unit instances
	// interface instances
	arb() { 
	}
};


//------------------------------------------------------
csl_unit data_tcm {  // declaration
	// unit instances
	// interface instances
	data_tcm() { 
	}
};


//------------------------------------------------------
csl_unit inst_tcm {  // declaration
	// unit instances
	// interface instances
	inst_tcm() { 
	}
};


//------------------------------------------------------
csl_unit nios {  // declaration
	// unit instances
	// interface instances
	nios() { 
	}
};


//------------------------------------------------------
csl_unit cil {  // declaration
	// unit instances
	// interface instances
	cil() { 
	}
};


//------------------------------------------------------
csl_unit pie_eth_nq01 {  // declaration
	// unit instances
	fabric_interface fabric_interface; // unit instance
	fabric_add fabric_add; // unit instance
	fabric_drop fabric_drop; // unit instance
	fabric_dma fabric_dma0; // unit instance
	fabric_dma fabric_dma1; // unit instance
	// interface instances
	pie_eth_nq01() { 
	}
};


//------------------------------------------------------
csl_unit pie_eth_nq11 {  // declaration
	// unit instances
	// interface instances
	pie_eth_nq11() { 
	}
};


//------------------------------------------------------
csl_unit pie_aud_nq1 {  // declaration
	// unit instances
	// interface instances
	pie_aud_nq1() { 
	}
};


//------------------------------------------------------
csl_unit pie_aud_dq1 {  // declaration
	// unit instances
	// interface instances
	pie_aud_dq1() { 
	}
};


//------------------------------------------------------
csl_unit ipc {  // declaration
	// unit instances
	// interface instances
	ipc() { 
	}
};


//------------------------------------------------------
csl_unit pie_ex_nq1 {  // declaration
	// unit instances
	// interface instances
	pie_ex_nq1() { 
	}
};


//------------------------------------------------------
csl_unit pie_ex_dq1 {  // declaration
	// unit instances
	// interface instances
	pie_ex_dq1() { 
	}
};


//------------------------------------------------------
csl_unit sram0 {  // declaration
	// unit instances
	// interface instances
	sram0() { 
	}
};


//------------------------------------------------------
csl_unit fabric_unit {  // declaration
	// unit instances
	pie_eth_dq1 pie_eth_dq11; // unit instance
	pie_eth_dq1 pie_eth_dq12; // unit instance
	pie_eth_dq1 pie_eth_dq13; // unit instance
	pie_eth_dq1 pie_eth_dq14; // unit instance
	// interface instances
	fabric_ifc fab_ifc12; // driver interface
	fabric_ifc fab_ifc11; // receiver interface
	fabric_unit() { 
		fab_ifc11.reverse();
	}
};


//------------------------------------------------------
csl_unit proc_ring {  // declaration
	// unit instances
	pie_eth_dq1 pie_eth_dq1; // unit instance
	pie_eth_nq01 pie_eth_nq01; // unit instance
	pie_eth_nq11 pie_eth_nq11; // unit instance
	pie_aud_nq1 pie_aud_nq1; // unit instance
	pie_aud_dq1 pie_aud_dq1; // unit instance
	ipc ipc; // unit instance
	pie_ex_nq1 pie_ex_nq1; // unit instance
	pie_ex_dq1 pie_ex_dq1; // unit instance
	sram0 sram0; // unit instance
	fabric_unit fab_unit1; // unit instance
	fabric_unit fab_unit2; // unit instance
	fabric_unit fab_unit3; // unit instance
	fabric_unit fab_unit4; // unit instance
	fabric_unit fab_unit0; // unit instance
	// interface instances
	proc_ring() { 
		proc_ring.fab_unit1.fab_ifc12.connect_by_name(proc_ring.fab_unit2.fab_ifc11,cc1);
		proc_ring.fab_unit2.fab_ifc12.connect_by_name(proc_ring.fab_unit3.fab_ifc11,cc3);
		proc_ring.fab_unit3.fab_ifc12.connect_by_name(proc_ring.fab_unit4.fab_ifc11,cc5);
		proc_ring.fab_unit4.fab_ifc12.connect_by_name(proc_ring.fab_unit0.fab_ifc11,cc6);
		proc_ring.fab_unit0.fab_ifc12.connect_by_name(proc_ring.fab_unit1.fab_ifc11,cc7);
	}
};



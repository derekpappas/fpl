#!/usr/bin/perl


use Switch;               # the switch/case command
use File::Find;           # traversing the directory tree
use File::Basename;       # retrieving the basename of a directory
use File::Path;           # mkpath command

use strict;

#const for the test name
my $TESTBENCH = "tb";  
my $NOFIFO    = "_0f"; 
my $ONEFIFO   = "_1f"; 
my $TWOFIFO   = "_2f"; 
my $ASYNC     = "_async";
my $SYNC      = "_sync";

#var used in tests
my $classTestbench = "csl_testbench";
my $testbenchName  = "tb";
my $classVector    = "csl_vector";
my $classFifo      = "csl_fifo";
my $fifoName1      = "f1";
my $fifoName2      = "f2";
my $asyncronous    = "async_fifo";
my $syncronous     = "sync_fifo";
my $classUnit         = "csl_unit";
my $unitDUT           = "dut";

my @fifoArray = ($NOFIFO, $ONEFIFO, $TWOFIFO);
my @syncArray = ($ASYNC, $SYNC);

my $test_name = "";
my $test_date = `date "+%d/%m/%G, %T"`;
my @test_list = ();


#subroutine called
&generate_testbench_tests;

#subroutine to make directories
sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

#subroutine to print in the generated file the legend
sub print_legend {
    my $range_type = $_[0];
    my $type       = $_[1];

    #print "print_legend\n";

}

#subroutine to print in the generated file the header
sub print_header {
    my $test_name = $_[0];
    my $type      = $_[1];

    my $path="$ENV{WORK}/test/csl_test_gen/";
    &mkDir("$path/testbench_fifo_valid/");
    &mkDir("$path/testbench_fifo_invalid/");

    if ( $type eq "valid") { 
        open (FH, ">$path/testbench_fifo_valid/$test_name");   
    }
    else {
        open (FH, ">$path/testbench_fifo_invalid/$test_name");   
    }

    #print "print_header\n";
    print FH "//Test generated by Ines\n";
    print FH "//Test name: $test_name\n";
    print FH "//Date: $test_date\n\n";
    print FH "// tb = testbench \n";      
    print FH "// _0f = no_fifo \n"; 
    print FH "// _1f = one_fifo \n"; 
    print FH "// _2f = two_fifos \n\n"; 
    print FH "//a csl_fifo & csl_testbench are created\n";
    print FH "//the csl_testbench has the folowing command set_unit_name() under test\n";
}

#subroutine gen tests name
sub generate_testbench_tests {
    
    #print "generate_testbench_tests\n";

    #csl_fifo_async
    $test_name = $TESTBENCH . $ONEFIFO . $ASYNC . "_valid.csl" ;
    &print_header($test_name, "valid");
    print FH "\n";

    print FH "$classFifo $fifoName1 {\n";
    print FH "    $fifoName1() {\n";
    print FH "        set_width(32);\n";
    print FH "        set_depth(64);\n";
    print FH "        set_clock_name(\"clk\");\n";
    print FH "        add_logic($asyncronous);\n";
    print FH "    }\n";
    print FH "};\n\n";

    print FH "$classVector stim_vec { \n";
    print FH "    stim_vec(){ \n";
    print FH "        set_unit_name($fifoName1); \n";
    print FH "        set_direction(input); \n";
    print FH "    } \n";
    print FH "}; \n";
         
    print FH "$classVector exp_vec { \n";
    print FH "    exp_vec(){ \n";
    print FH "        set_unit_name($fifoName1); \n";
    print FH "        set_direction(output); \n";
    print FH "    } \n";
    print FH "}; \n";

    printf FH "csl_testbench tb{ \n";
    printf FH "    csl_signal clk(wire); \n";
    printf FH "    $fifoName1 $fifoName1(.clk(clk)); \n"; # look up what is the name for the fifo clock
    printf FH "    tb(){ \n";
    printf FH "        clk.set_attr(clock); \n";
    printf FH "        add_logic(clock,clk,100,ps); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    close(FH);

    #csl_fifo_sync
    $test_name = $TESTBENCH . $ONEFIFO . $SYNC . "_valid.csl" ;
    &print_header($test_name, "valid");
    print FH "\n";

    print FH "$classFifo $fifoName1 {\n";
    print FH "    $fifoName1() {\n";
    print FH "        set_width(32);\n";
    print FH "        set_depth(64);\n";
    print FH "        set_clock_name(\"clk\");\n";
    print FH "        add_logic($syncronous);\n";
    print FH "    }\n";
    print FH "};\n\n";

    print FH "$classVector stim_vec { \n";
    print FH "    stim_vec(){ \n";
    print FH "        set_unit_name($fifoName1); \n";
    print FH "        set_direction(input); \n";
    print FH "    } \n";
    print FH "}; \n";
         
    print FH "$classVector exp_vec { \n";
    print FH "    exp_vec(){ \n";
    print FH "        set_unit_name($fifoName1); \n";
    print FH "        set_direction(output); \n";
    print FH "    } \n";
    print FH "}; \n";

    printf FH "csl_testbench tb{ \n";
    printf FH "    csl_signal clk(wire); \n";
    printf FH "    $fifoName1 $fifoName1(.clk(clk)); \n"; # look up what is the name for the fifo clock
    printf FH "    tb(){ \n";
    printf FH "        clk.set_attr(clock); \n";
    printf FH "        add_logic(clock,clk,100,ps); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    close(FH);

    #csl_fifo & csl_unit
    $test_name = $TESTBENCH . $ONEFIFO . "_1u" . "_valid.csl" ;
    &print_header($test_name, "valid");
    print FH "\n";

    print FH "$classFifo $fifoName1 {\n";
    print FH "    $fifoName1() {\n";
    print FH "        set_width(32);\n";
    print FH "        set_depth(64);\n";
    print FH "        set_clock_name(\"clk\");\n";
    print FH "    }\n";
    print FH "};\n\n";

    printf FH "$classUnit $unitDUT { \n";
    print FH "    $fifoName1 $fifoName1" . "_1; \n";
    print FH "    csl_port stim_in(input); \n";   
    print FH "    csl_port exp_vec(output); \n";   
    print FH "    csl_port clk(input); \n";
    print FH "    dut(){ \n";
    print FH "        clk.set_attr(clock); \n";
    print FH "    } \n";
    print FH "}; \n";

    print FH "$classVector stim_vec { \n";
    print FH "    stim_vec(){ \n";
    print FH "        set_unit_name($unitDUT); \n";
    print FH "        set_direction(input); \n";
    print FH "    } \n";
    print FH "}; \n";
         
    print FH "$classVector exp_vec { \n";
    print FH "    exp_vec(){ \n";
    print FH "        set_unit_name($unitDUT); \n";
    print FH "        set_direction(output); \n";
    print FH "    } \n";
    print FH "}; \n";

    printf FH "csl_testbench tb{ \n";
    printf FH "    csl_signal clk(wire); \n";
    printf FH "    $unitDUT $unitDUT(.clk(clk)); \n"; # look up what is the name for the fifo clock
    printf FH "    tb(){ \n";
    printf FH "        clk.set_attr(clock); \n";
    printf FH "        add_logic(clock,clk,100,ps); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    close(FH);

    #csl_fifos & csl_unit
    $test_name = $TESTBENCH . "_100f" . "_1u" . "_valid.csl" ;
    &print_header($test_name, "valid");
    print FH "\n";

    my $i;
    for ( $i=0; $i<100; $i++) {   
        print FH "$classFifo f_$i {\n";
        print FH "    f_$i() {\n";
        print FH "        set_width(32);\n";
        print FH "        set_depth(64);\n";
        print FH "        set_clock_name(\"clk\");\n";
        print FH "    }\n";
        print FH "};\n\n";
    }

    printf FH "$classUnit $unitDUT { \n";
    my $i;
    for ( $i=0; $i<100; $i++) {   
        print FH "    f_$i f_$i" . "_1; \n";
    }
    print FH "    csl_port stim_in(input); \n";   
    print FH "    csl_port exp_vec(output); \n";   
    print FH "    csl_port clk(input); \n";
    print FH "    dut(){ \n";
    print FH "        clk.set_attr(clock); \n";
    print FH "    } \n";
    print FH "}; \n";

    print FH "$classVector stim_vec { \n";
    print FH "    stim_vec(){ \n";
    print FH "        set_unit_name($unitDUT); \n";
    print FH "        set_direction(input); \n";
    print FH "    } \n";
    print FH "}; \n";
         
    print FH "$classVector exp_vec { \n";
    print FH "    exp_vec(){ \n";
    print FH "        set_unit_name($unitDUT); \n";
    print FH "        set_direction(output); \n";
    print FH "    } \n";
    print FH "}; \n";

    printf FH "csl_testbench tb{ \n";
    printf FH "    csl_signal clk(wire); \n";
    printf FH "    $unitDUT $unitDUT(.clk(clk)); \n"; # look up what is the name for the fifo clock
    printf FH "    tb(){ \n";
    printf FH "        clk.set_attr(clock); \n";
    printf FH "        add_logic(clock,clk,100,ps); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    close(FH);

    #csl_fifos & csl_units
    $test_name = $TESTBENCH . "_100f" . "_101u" . "_valid.csl" ;
    &print_header($test_name, "valid");
    print FH "\n";

    my $i;
    for ( $i=0; $i<100; $i++) {   
        print FH "$classFifo f_$i {\n";
        print FH "    f_$i() {\n";
        print FH "        set_width(32);\n";
        print FH "        set_depth(64);\n";
        print FH "        set_clock_name(\"clk\");\n";
        print FH "    }\n";
        print FH "};\n\n";
  
        print FH "$classUnit u_$i {\n";
        print FH "    f_$i f_$i" . "_1; \n";
        print FH "    u_$i() {\n";
        print FH "    }\n";
        print FH "};\n\n";
    }

    printf FH "$classUnit $unitDUT { \n";
    my $i;
    for ( $i=0; $i<100; $i++) {   
        print FH "    u_$i u_$i" . "_1; \n";
    }
    print FH "    csl_port stim_in(input); \n";   
    print FH "    csl_port exp_vec(output); \n";   
    print FH "    csl_port clk(input); \n";
    print FH "    dut(){ \n";
    print FH "        clk.set_attr(clock); \n";
    print FH "    } \n";
    print FH "}; \n";

    print FH "$classVector stim_vec { \n";
    print FH "    stim_vec(){ \n";
    print FH "        set_unit_name($unitDUT); \n";
    print FH "        set_direction(input); \n";
    print FH "    } \n";
    print FH "}; \n";
         
    print FH "$classVector exp_vec { \n";
    print FH "    exp_vec(){ \n";
    print FH "        set_unit_name($unitDUT); \n";
    print FH "        set_direction(output); \n";
    print FH "    } \n";
    print FH "}; \n";

    printf FH "csl_testbench tb{ \n";
    printf FH "    csl_signal clk(wire); \n";
    printf FH "    $unitDUT $unitDUT(.clk(clk)); \n"; # look up what is the name for the fifo clock
    printf FH "    tb(){ \n";
    printf FH "        clk.set_attr(clock); \n";
    printf FH "        add_logic(clock,clk,100,ps); \n";
    printf FH "    } \n";
    printf FH "}; \n";

    close(FH);

    print "[INFO]Done\n";
}

#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen";
print "the path for generated tests is: $path/conn_units_ifc_sg_u_mem_fifo_reg_rf_invalid\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @units = ("unit","fifo","register","register_file","memory");
foreach my $unit(@units){
    for(my $i = 1;$i < 15;++$i){
        &main($i,$unit);
    }
}

sub main {
    my ($i,$unit) = @_;
    my $test_name = "conn_units_ifc_sg_".$unit."_".$i."_illegal.csl";
    &createCslFile($test_name, $unit,$i);
}

sub createCslFile {
    my($test_name, $unit,$i) = @_;
    my $val = 1;
    my $val1 = int(rand(20)) + 1;
    my $val2 = $val1 + int(rand(20)) + 1;
    my $val3 = int(rand(30)) + 1;
    &mkDir("$path/conn_units_ifc_sg_u_mem_fifo_reg_rf_invalid/");
    open(FH,">$path/conn_units_ifc_sg_u_mem_fifo_reg_rf_invalid/$test_name");
    print FH "//Generated by Petronela\n";  
    print FH "//testing cmd. connect_units for connections ifc to unit, ifc to fifo, ifc to register, ifc to register_file, ifc to memory \n";
    print FH "//unit to ifc, fifo to ifc, register to ifc, refister_file to ifc, memory to ifc and \n";
    print FH "//signal_group to unit, signal_group to fifo, signal_group to register, signal_group to register_file, signal_group to memory \n";
    print FH "//unit to signal_group, fifo to signal_group, register to signal_group, refister_file to signal_group, memory to signal_group \n\n";
  
    print FH "csl_interface ifca {\n";
    if($i <= 5 ) {
        print FH "  csl_port p_ifca$i(input,$val1);\n";
        print FH "  csl_port p_ifa(input,$val1);\n";
    }
    elsif($i > 5 && $i <= 10) {
        print FH "  csl_port p_ifca$i(output,$val2);\n";
        print FH "  csl_port p_ifa(output,$val2);\n";
        print FH "  csl_port p_if(output,$val2);\n";
    }
    elsif($i > 10 ) { 
        print FH "  csl_port p_ifca$i(input,$val1);\n";
        print FH "  csl_port p_ifa(input,$val1);\n";
        print FH "  csl_port p_if(input,$val1);\n";
        print FH "  csl_port p_ifta$i(input,$val1);\n";
    }
    print FH "  ifca() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_interface ifcb {\n";
    print FH "  ifca ifca0;\n";
    print FH "  ifca ifca1;\n";
    if($i <= 5) {
        print FH "  csl_port p_ifcb$i(input,$val1);\n";
        print FH "  csl_port p_ifb(input,$val1);\n";
        print FH "  csl_port p_if(input,$val1);\n";
    }
    elsif($i > 5 && $i <= 10) {
        print FH "  csl_port p_ifcb$i(output,$val2);\n";
        print FH "  csl_port p_ifb(output,$val2);\n";
        
    }
    elsif($i > 10) {  
        print FH "  csl_port p_ifcb$i(input,$val1);\n";
        print FH "  csl_port p_ifb(input,$val1);\n";
        print FH "  csl_port p_if(input,$val1);\n";
        print FH "  csl_port p_iftb$i(input,$val1);\n";
        print FH "  csl_port p_b(input,$val1);\n";
    }
    print FH "  ifcb() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_interface ifcd {\n";
    print FH "  ifcb ifcb0;\n";
    print FH "  ifcb ifcb1;\n";
    print FH "  ifcb ifcb2;\n";
    if($i <= 5) {
        print FH "  csl_port p_ifcd$i(input,$val1);\n";
        print FH "  csl_port p_ifd(input,$val1);\n";
        print FH "  csl_port p_if(input,$val1);\n";
    }
    elsif($i > 5 && $i <= 10) {
        print FH "  csl_port p_ifcd$i(output,$val2);\n";
        print FH "  csl_port p_ifd(output,$val2);\n";
        
    }
    elsif($i > 10) {  
        print FH "  csl_port p_ifcd$i(input,$val1);\n";
        print FH "  csl_port p_ifd(input,$val1);\n";
        print FH "  csl_port p_if(input,$val1);\n";
        print FH "  csl_port p_iftd$i(input,$val1);\n";
        print FH "  csl_port p_d(input,$val1);\n";
    }

    print FH "  ifcd() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    print FH "csl_signal_group sga {\n";
    if($i <= 5){
        print FH "  csl_signal s_sga($val1);\n";
        print FH "  csl_signal s_sa($val2);\n";
        print FH "  csl_signal s_sgga($val1);\n";
    }
    elsif($i > 5 && $i <= 10){
        print FH "  csl_signal s_siga($val1);\n";
        print FH "  csl_signal s_sigga($val2);\n";
        print FH "  csl_signal s_sta($val1);\n";
    }
    elsif($i > 10){
        print FH "  csl_signal s_sta($val2);\n";
        print FH "  csl_signal s_sitga($val2);\n";
        print FH "  csl_signal s_staa($val2);\n";
    }
    print FH "  sga() {\n";
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_signal_group sgb {\n";
    print FH "  sga sga0;\n";
    print FH "  sga sga1;\n";
    if($i <= 5){
        print FH "  csl_signal s_sgb($val1);\n";
        print FH "  csl_signal s_sb($val2);\n";
    }
    elsif($i > 5 && $i <= 10){
        print FH "  csl_signal s_sggb($val1);\n";
        print FH "  csl_signal s_sigb($val1);\n";
        print FH "  csl_signal s_siggb($val2);\n";
    }
    elsif($i > 10){
        print FH "  csl_signal s_stb($val2);\n";
        print FH "  csl_signal s_sitgb($val1);\n";
        print FH "  csl_signal s_stab($val2);\n";
    }
    print FH "  sgb() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_signal_group sgc {\n";
    print FH "  sga sga0;\n";
    print FH "  sga sga1;\n";
    print FH "  sgb sgb1;\n";
    print FH "  sgb sgb0;\n";
    if($i <= 5){
        print FH "  csl_signal s_sgc($val1);\n";
        print FH "  csl_signal s_sc($val2);\n";
    }
    elsif($i > 5 && $i <= 10){
        print FH "  csl_signal s_sggc($val1);\n";
        print FH "  csl_signal s_sigc($val1);\n";
        print FH "  csl_signal s_siggc($val2);\n";
        print FH "  csl_signal s_stc($val2);\n";
    }
    elsif($i > 10){   
        print FH "  csl_signal s_sitgc($val1);\n";
        print FH "  csl_signal s_stac($val2);\n";
    }
    print FH "  sgc() {\n";
    print FH "  }\n";
    print FH "};\n\n";
    print FH "csl_$unit ua {\n";
    if($unit eq "unit"){
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    print FH "  ua(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }   
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit ub {\n";
    if($unit eq "unit"){
        print FH "  ua ua0;\n";
        print FH "  ua ua1;\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    
    print FH "  ub(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }  
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit uc {\n";
    if($unit eq "unit"){
        print FH "  ub ub0;\n";
        print FH "  ub ub1;\n";
        print FH "  ua ua0;\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    
    print FH "  uc(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }  
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_$unit ud {\n";
    if($unit eq "unit"){
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
        print FH "  uc uc2;\n";
        print FH "  ub ub0;\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port pb(output,$val);\n";
    }
    
    print FH "  ud(){\n";
    if($unit ne "unit"){
        print FH "    set_width($val2);\n";
        if($unit ne "register"){
            print FH "    set_depth($val1);\n";
        }
        else{
            print FH "    set_type(register);\n";
        }
    }  
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_unit top {\n";
    if($i <= 5) {
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n"; 
        print FH "  ub ub0;\n";
        print FH "  ua ua0;\n";
        print FH "  ifca ifca0;\n";
        print FH "  ifcb ifcb0;\n";
        print FH "  ifcb ifcb1;\n";
        print FH "  ifcd ifcd0;\n";
        print FH "  sga sga0;\n";
        print FH "  sga sga1;\n";
        print FH "  sgb sgb0;\n";
        print FH "  sgc sgc0;\n";
        print FH "  csl_port ptop(input,$val1);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_signal s_top$i($val1);\n";
        print FH "  csl_signal stop($val1);\n";
    }
    elsif($i > 5 && $i <= 10) {
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  ud ud2;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
        print FH "  ub ub0;\n";
        print FH "  ua ua0;\n";
        print FH "  ifca ifca0;\n";
        print FH "  ifcb ifcb0;\n";
        print FH "  ifcb ifcd1;\n";
        print FH "  ifcd ifcd0;\n";
        print FH "  sga sga0;\n";
        print FH "  sga sgb1;\n";
        print FH "  sgb sgb0;\n";
        print FH "  sgc sgc0;\n";
        print FH "  csl_port p_top$i(output,$val2);\n";      
        print FH "  csl_port p(output,$val2);\n";
        print FH "  csl_port ptop(output,$val2);\n";        
        print FH "  csl_signal st($val2);\n";
        print FH "  csl_signal s_top_br$i($val1);\n";
    }
    elsif($i > 10 && $i <= 15) {
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
        print FH "  uc uc2;\n";
        print FH "  ub ub0;\n";
        print FH "  ua ua0;\n";
        print FH "  ifca ifca0;\n";
        print FH "  ifcb ifcb0;\n";
        print FH "  ifcb ifca1;\n";
        print FH "  ifcd ifcd0;\n";
        print FH "  sga sga0;\n";
        print FH "  sga sgc1;\n";
        print FH "  sgb sgb0;\n";
        print FH "  sgc sgc0;\n";
        print FH "  csl_port p_top$i(input,$val1);\n";      
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port p_top_br$i(input,$val2);\n";
        print FH "  csl_signal s_top$i($val1);\n";
        print FH "  csl_signal stop($val1);\n";
    }
    print FH "  top(){\n";
    if($i <= 5) {
        if($unit eq "unit"){
            print FH "    ifca0.connect_units(ud0.uc2.ub1);\n";
            print FH "    uc1.ub0.connect_units(sgb0);\n";
            print FH "    uc0.ua0.connect_units(ifcd0);\n";
            print FH "    sgb0.connect_units(ud0.ub0);\n";
        }
        else {
            print FH "    ifca0.connect_units(ud0);\n";
            print FH "    uc1.connect_units(sgb0);\n";
            print FH "    uc0.connect_units(ifc0);\n";
            print FH "    sgb0.connect_units(ud1);\n";
        }
    }
    elsif($i > 5 && $i <= 10) {
        if($unit eq "unit"){
            print FH "    ifcd1.connect_units(ud0.uc2.ub1.ua0);\n";
            print FH "    uc1.ub0.ua1.connect_units(sgb1);\n";
            print FH "    uc0.connect_units(ifcb0);\n";
            print FH "    sgc0.connect_units(ud2.ub1);\n";
        }
        else{
            print FH "    ifcd1.connect_units(ub0);\n";
            print FH "    ua0.connect_units(sgb1);\n";
            print FH "    uc0.connect_units(ifcb0);\n";
            print FH "    sgc0.connect_units(ud2);\n";
        }
    }
    elsif($i > 10 && $i <= 15) {
        if($unit eq "unit"){
            print FH "    ifca1.connect_units(uc2.ub1);\n";
            print FH "    ud0.uc1.ub0.connect_units(sgc1);\n";
            print FH "    ud1.uc2.ua0.connect_units(ifcd0);\n";
            print FH "    sgb0.connect_units(ud0.ub0.ua1);\n";
        }
        else {
            print FH "    ifca1.connect_units(uc2);\n";
            print FH "    ub0.connect_units(sgc1);\n";
            print FH "    ud1.connect_units(ifcd0);\n";
            print FH "    sgb0.connect_units(ua0);\n";
        }
        
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);
}

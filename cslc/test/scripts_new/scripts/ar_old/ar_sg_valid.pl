#!/usr/bin/perl

#oanab
#connecting sg with ifc,ifc.ifc; sg.sg with ifc,ifc.ifc;

use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 200; $i++) {
	&main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; # for ifc1
    $m = int(rand(20))+2; # for ifc2
    $n = int(rand(20))+3; # for ifc3
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "ar_sg".$i."_legal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    else {
	&createCslFile($test_name, $i, $j+1, $m+2, $n+3, %dir);
    }
}
sub createCslFile {
    my($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_ar_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+1;
    my $val2 = int(rand(100))+1;
    my $val3 = int(rand(100))+1;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_sg_valid");
        open(FH,">$path/ar_sg_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_sg_invalid1"); 
        open(FH,">$path/ar_sg_invalid1/$test_name");
    }
    print FH "//Generated by oanab\n\n";

    print FH "csl_bitrange br1($val1);\n\n";

    print FH "csl_bitrange br2($val2);\n\n";

#ifcj
    print FH "csl_interface ifc$j {\n";
    print FH "  csl_port p_a$i($dir{$l},br1);\n";
    if($l < 3) {
	print FH "  csl_port p_b$i($dir{$l+1},$val3);\n";
    }
    else {
	print FH "  csl_port p_b$i($dir{$l-1},$val3);\n";
    }
    if($l == 1) {
	print FH "  csl_port p_c$i($dir{$l+2},br2);\n";
    }
    else {
	print FH "  csl_port p_c$i($dir{$l-1},br2);\n";
    }	
    print FH "  ifc$j () {}\n";
    print FH "};\n\n";


#ifcm
    if($i > 50 && $i <= 100 || $i > 125 && $i <= 200) {
	print FH "csl_interface ifc$m {\n";
#25 tests have 2 ports in ifcm
	if($i > 125 && $i <= 200) {
	    print FH "  csl_port p_a$i($dir{$l},br1);\n";
	    if($l < 3) {
		print FH "  csl_port p_b$i($dir{$l+1},$val3);\n";
	    }
	    else {
		print FH "  csl_port p_b$i($dir{$l-1},$val3);\n";
	    }
	}
	print FH "  ifc$j ifc$j\_$one;\n";
	print FH "  ifc$j ifc$j\_$two;\n";
	print FH "  ifc$m () {\n";
	if($i > 50 && $i <= 100) {
	    print FH "    ifc$j\_$two.reverse();\n";
	}
	elsif($i > 150 && $i <= 175) {
	    print FH "    ifc$j\_$one.reverse();\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#sgj
    print FH "csl_signal_group sg$j {\n";
    print FH "  csl_signal p_a$i(br1);\n";
    print FH "  csl_signal p_b$i($val3);\n";
    print FH "  csl_signal p_c$i($val2);\n";
    print FH "  sg$j () {}\n";
    print FH "};\n\n";

#sgm
    if($i > 100 && $i <= 200) {
	print FH "csl_signal_group sg$m {\n";
	print FH "  sg$j sg$j\_$zero;\n";
#25 tests have another sgj instance in sgm
	if($i > 125 && $i <= 150) {
	    print FH "  sg$j sg$j\_$one;\n";
	}
	print FH "  csl_signal s_s$i($val1);\n";
	print FH "  sg$m () {}\n";
	print FH "};\n";
    }

#unit a
    print FH "csl_unit a$k {\n";
    print FH "  sg$j sg$j\_$zero;\n";
#
    if($i > 100 && $i <= 150 || $i > 175 && $i <= 200) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  ifc$j ifc$j\_$one;\n";
    }
#25 tests have ifcm instantiated in unit a
    elsif($i > 150 && $i <= 175) {
	print FH "  ifc$m ifc$m\_$two;\n";
    }
    print FH "  a$k () {}\n";
    print FH "};\n\n";

#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
#50 tests have sgj instantiated in unit b
    if($i <= 100) {
	print FH "  sg$j sg$j\_$one;\n";
    }
#50 tests have ifcm instantiated in unit b
    if($i > 50 && $i <= 100 || $i > 125 && $i <= 150 || $i > 175 && $i <= 200) {
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    print FH "  b$k () {}\n";
    print FH "};\n\n";

#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    print FH "  ifc$j ifc$j\_$zero;\n";
#50 tests have sgj instantiated in unit c
    if($i > 50 && $i <= 100) {
	print FH "  sg$j sg$j\_$two;\n";
    }
#25 tests have sgm instantiated in unit c
    elsif($i > 150 && $i <= 175) {
	print FH "  sg$m sg$m\_$two;\n";
    }
    print FH "  c$k () {\n";
#50 tests connect a signal group with an interface (ifc.ifc)
    if($i > 50 && $i <= 100) {
	print FH "//connect a signal group with an interface (ifc.ifc)\n";
	print FH "    sg$j\_$two.connect(b$k\_$zero.ifc$m\_$zero.ifc$j\_$one);\n";
    }
#50 tests connect a signal group with an interface (sg.sg)
    elsif($i > 100 && $i <= 150) {
	print FH "//connect a signal group with an interface (sg.sg)\n";
	print FH "    b$k\_$zero.a$k\_$zero.sg$m\_$zero.sg$j\_$zero.connect(ifc$j\_$zero);\n";
    }
#25 tests connect a signal group with an interface (sg.sg,ifc.ifc)
    elsif($i > 150 && $i <= 175) {
	print FH "//connect a signal group with an interface (sg.sg,ifc.ifc)\n";
	print FH "    sg$m\_$two.sg$j\_$zero.connect(b$k\_$zero.a$k\_$zero.ifc$m\_$two.ifc$j\_$one);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit d 
    print FH "csl_unit d$k {\n";
    print FH "  c$k c$k\_$zero;\n";
#50 tests have ifcm instantiated in unit d
    if($i > 50 && $i <= 100) {
	print FH "  ifc$m ifc$m\_$one;\n";
    }
#25 tests have sgm instantiated in unit d
    elsif($i > 100 && $i <= 150) {
	print FH "  sg$m sg$m\_$one;\n";
    }
    print FH "  d$k () {\n";
#50 tests connect a signal group with an interface
    if($i <= 50) {
	print FH "//connect a signal group with an interface\n";
	print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$j\_$zero.connect(c$k\_$zero.ifc$j\_$zero);\n";
	print FH "    c$k\_$zero.b$k\_$zero.sg$j\_$one.connect(c$k\_$zero.ifc$j\_$zero);\n";
    }
#50 tests connect a signal group with an interface (ifc.ifc) 
    elsif($i > 50 && $i <= 100) {
	print FH "//connect a signal group with an interface (ifc.ifc)\n";
	print FH "    c$k\_$zero.b$k\_$zero.sg$j\_$one.connect(ifc$m\_$one.ifc$j\_$two);\n";}
#25 tests connect a signal group with an interface (sg.sg)
    elsif($i > 100 && $i <= 125) {
	print FH "//connect a signal group with an interface (sg.sg)\n";
	print FH "    sg$m\_$one.sg$j\_$zero.connect(c$k\_$zero.b$k\_$zero.a$k\_$zero.ifc$j\_$one);\n";
    }    
    print FH "  }\n";
    print FH "};\n\n";

#unit e
    if($i > 125 && $i <= 150 || $i > 175 && $i <= 200) {
	print FH "csl_unit e$k {\n";
	print FH "  d$k d$k\_$zero;\n";
#25 tests have unit b instantiated in unit e
	if($i > 175 && $i <= 200) {
	    print FH "  b$k b$k\_$one;\n";
	}
	print FH "  e$k () {\n";
#25 tests connect a signal group with an interface (sg.sg)
	if($i > 125 && $i <= 150) {
	    print FH "//connect a signal group with an interface (sg.sg)\n";
	    print FH "    d$k\_$zero.sg$m\_$one.sg$j\_$one.connect(d$k\_$zero.c$k\_$zero.b$k\_$zero.ifc$m\_$zero);\n";
	}
#25 tests connect a signal group with an interface (sg.sg,ifc.ifc)
	elsif($i > 175 && $i <= 200) {
	    print FH "// connect a signal group with an interface (sg.sg,ifc.ifc)\n";
	    print FH "    d$k\_$zero.c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$m\_$zero.sg$j\_$zero.connect(b$k\_$one.ifc$m\_$zero.ifc$j\_$two);\n";
	print FH "  }\n";
	print FH "};\n\n";
	
	}
    }
}

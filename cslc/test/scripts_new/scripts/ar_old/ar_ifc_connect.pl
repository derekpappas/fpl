#!/usr/bin/perl

#oanab
#connecting ifc with ifc,ifc.ifc,sg,sg.sg; ifc.ifc with ifc,ifc.ifc,sg,sg.sg;

use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 200; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; # for ifc1
    $m = int(rand(20))+2; # for ifc2
    $n = int(rand(20))+3; # for ifc3
    my $test_name = "ar_ifc".$i."_legal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n);
    }
    else {
	&createCslFile($test_name, $i, $j+1, $m+2, $n+3);
    }
}
sub createCslFile {
    my($test_name, $i, $j, $m, $n) = @_;
    my $path = "$ENV{WORK}/test/csl_ar_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+1;
    my $val2 = int(rand(100))+1;
    my $val3 = int(rand(100))+1;
    my $val4 = int(rand(100))+2;
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_ifc_valid");
        open(FH,">$path/ar_ifc_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_ifc_invalid1"); 
        open(FH,">$path/ar_ifc_invalid1/$test_name");
    }
    print FH "//Generated by oanab\n\n";

    print FH "csl_bitrange br1($val1);\n\n";

    print FH "csl_bitrange br2($val2);\n\n";
    
    print FH "csl_bitrange br3($val4);\n\n";


 #interface ifcj
    print FH "csl_interface ifc$j {\n";
    if($i <= 100) {
        print FH "  csl_port p_a$i(input,br1);\n"; 
	print FH "  csl_port p_b$i(input,br2);\n";
    }    
    elsif($i > 100) {
	print FH "  csl_port p_x$i(output,br3);\n";
	print FH "  csl_port p_y$i(input,$val2);\n";
	print FH "  csl_port p_z$i(input,br1);\n";
    }                                                                                  
    print FH "  ifc$j () {}\n";
    print FH "};\n\n";

#interface ifcm
    if($i > 25 && $i <= 75 || $i > 100 && $i <= 175) {
	print FH "csl_interface ifc$m {\n";
	print FH "  ifc$j ifc$j\_$two;\n";
	print FH "  csl_port p_a$i(output,br1);\n";
	print FH "  csl_port p_b$i(input,br2);\n";
	if($i > 100 && $i <= 125) {
	    print FH "  ifc$j ifc$j\_$one;\n";
	}
	print FH "  ifc$m () {\n";
	if($i > 100 && $i <= 125) {
	    print FH "    ifc$j\_$one.reverse();\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#interface ifcn
    if($i > 125 && $i <= 150 || $i > 175 && $i <= 200) {
	print FH "csl_interface ifc$n {\n";
	print FH "  csl_port p_a$i(output,br3);\n";
	print FH "  csl_port p_b$i(input,$val2);\n";
	print FH "  ifc$j ifc$j\_$tre;\n";
	print FH "  ifc$n () {}\n";
	print FH "};\n\n";
    }

#signal group sgj
    if($i > 50 && $i <= 100 || $i > 150 && $i <= 200) {
	print FH "csl_signal_group sg$j {\n";
	if($i > 175 && $i <= 200) {
	    print FH "  csl_signal p_x$i(br3);\n";
	    print FH "  csl_signal p_y$i($val2);\n";
	}
	print FH "  csl_signal p_a$i(br1),p_b$i(br2);\n";
	print FH "  sg$j () {}\n";
	print FH "};\n\n";
    }

#signal group sgm
    if($i > 75 && $i <= 100 || $i > 150 && $i <= 200) {
	print FH "csl_signal_group sg$m {\n";
	if($i > 150 && $i <= 175) {
	    print FH "  csl_signal p_x$i(br3);\n";
	    print FH "  csl_signal p_y$i($val2);\n";
	    print FH "  csl_signal p_z$i(br1);\n";
	}
	print FH "  sg$j sg$j\_$one;\n";
	if($i < 150) {
	print FH "  csl_signal s_a$i(br3);\n";
	print FH "  csl_signal s_b$i(br1);\n";
    }
	elsif($i > 175 && $i <= 200) {
	    print FH "  csl_signal s_a$i(br2);\n";
	}
	print FH "  sg$m () {}\n";
	print FH "};\n\n";
    }

#unit a
    print FH "csl_unit a$k {\n";
    print FH "  ifc$j ifc$j\_$zero;\n";
#25 tests have sgj intantiated in unit a
    if($i > 50 && $i <= 75) {
	print FH "  sg$j sg$j\_$zero;\n";
    }
#25 tests have ifcm intantiated in unit a
    elsif($i > 100 && $i <= 125 || $i > 150 && $i <= 175) {
	print FH "  ifc$m ifc$m\_$one;\n";
    }
#25 tests have sgm instantiated in unit a
    elsif($i > 175 && $i <= 200) {
	print FH "  sg$m sg$m\_$one;\n";
    }
    print FH "  a$k () {\n";  
    print FH "  }\n"; 
    print FH "};\n\n"; 
  
#unit b     
    print FH "csl_unit b$k {\n";  
    print FH "  a$k a$k\_$zero;\n";
#15 tests have ifcj instantiated in unit b
    if($i > 10 && $i <= 25) {
	print FH "  ifc$j ifc$j\_$two;\n";
    }
#25 tests have ifcm instantiated in unit b
    if($i > 125 && $i <= 150) {
	print FH "  ifc$m ifc$m\_$two;\n";
    }
    print FH "  b$k () {\n";
#15 tests have ifcj reversed in unit b
    if($i > 10 && $i <= 25) {
	print FH "    ifc$j\_$two.reverse();\n";
    }
    print FH "  }\n";
    print FH "};\n\n";        

#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    print FH "  ifc$j ifc$j\_$one;\n";
#25 tests have ifcm instantiated in unit c
    if($i > 25 && $i <= 75) {
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    print FH "  c$k (){\n";
#10 tests connect an interface with an interface
    if($i <= 10) {
	print FH "//connect an interface with an interface\n";
	print FH "    ifc$j\_$one.connect(b$k\_$zero.a$k\_$zero.ifc$j\_$zero);\n";
    } 
#10 tests connect an interface with an interface (ifc.ifc)   
    elsif($i > 25 && $i <= 50) {
	print FH "//connect an interface with an interface (ifc.ifc)\n";
	print FH "    b$k\_$zero.a$k\_$zero.ifc$j\_$zero.connect(ifc$m\_$zero.ifc$j\_$two);\n";
    }
#25 tests connect an interface with a signal group   
    elsif($i > 50 && $i <= 75) {
	print FH "//connect an interface with a signal group\n";
	print FH "    ifc$m\_$zero.connect(b$k\_$zero.a$k\_$zero.sg$j\_$zero);\n";
    }
    print FH "  }\n";        
    print FH "};\n\n";    

#15 tests have unit d
    if($i > 10 && $i <= 25 || $i > 75 && $i <= 200) {
	print FH "csl_unit d$k {\n";
	print FH "  c$k c$k\_$zero;\n";
#15 tests have another unit c instance in unit d
	if($i > 10 && $i <= 25) {
	    print FH "  c$k c$k\_$one;\n";
	}
#25 tests have sgm instantiated in unit d
	elsif($i > 75 && $i <= 100 || $i > 150 && $i <= 175) {
	    print FH "  sg$m sg$m\_$one;\n";
	}
#25 tests have unit a instantiated in unit d
	elsif($i > 100 && $i <= 125) {
	    print FH "  a$k a$k\_$one;\n";
	}
#25 tests have ifcn instantiated in unit d
	elsif($i > 125 && $i <= 150 || $i > 175 && $i <= 200) {
	    print FH "  ifc$n ifc$n\_$zero;\n";
	}
	print FH "  d$k () {\n";
#15 tests connect an interface with an interface
	if($i > 10 && $i <= 25) {
	    print FH "// connect an interface with an interface\n";
	    print FH "    c$k\_$zero.b$k\_$zero.ifc$j\_$two.connect(c$k\_$one.b$k\_$zero.a$k\_$zero.ifc$j\_$zero);\n";
	}
#25 tests connect an interface with an interface (ifc.ifc)
	elsif($i > 100 && $i <= 125) {    
	    print FH "//connect an interface with an interface (ifc.ifc)\n";
	    print FH "    a$k\_$one.ifc$m\_$one.ifc$j\_$one.connect(c$k\_$zero.b$k\_$zero.a$k\_$zero.ifc$j\_$zero);\n";
	}
#25 tests connect an interface with an interface (ifc.ifc,ifc.ifc)
	elsif($i > 125 && $i <= 150) {
	    print FH "//connect an interface with an interface (ifc.ifc,ifc.ifc)\n";
	    print FH "    ifc$n\_$zero.ifc$j\_$tre.connect(c$k\_$zero.b$k\_$zero.ifc$m\_$two.ifc$j\_$two);\n";
	}
#25 tests connect an interface with a signal group (ifc.ifc,sg)
	elsif($i > 150 && $i <= 175) {
	    print FH "//connect an interface with a signal group (ifc.ifc,sg)\n";
	    print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.ifc$m\_$one.ifc$j\_$two.connect(sg$m\_$one);\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#unit e
    if($i > 75 && $i <= 100 || $i > 175 && $i <= 200) {
	print FH "csl_unit e$k {\n";
#25 tests have unit c instantiated in unit e
	if($i > 75 && $i <= 100) {
	    print FH "  c$k c$k\_$two;\n";
	}
	print FH "  d$k d$k\_$zero;\n";
#25 tests have unit b instantiated in unit e
	if($i > 175 && $i <= 200) {
	    print FH "  b$k b$k\_$one;\n";
	}
	print FH "  e$k () {\n";
#25 tests connect an interface with a signal group (sg.sg)
	if($i > 75 && $i <= 100) {
	    print FH "//connect an interface with a signal group (sg.sg)\n";
	    print FH "    c$k\_$two.b$k\_$zero.a$k\_$zero.ifc$j\_$zero.connect(d$k\_$zero.sg$m\_$one.sg$j\_$one);\n";
	}
#25 tests connect an interface with a signal group (ifc.ifc,sg.sg)
	elsif($i > 175 && $i <= 200) {
	    print FH "//connect an interface with a signal group (ifc.ifc,sg.sg)\n";
	    print FH "    d$k\_$zero.ifc$n\_$zero.ifc$j\_$tre.connect(b$k\_$one.a$k\_$zero.sg$m\_$one.sg$j\_$one);\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }
    
   
    close(FH);

}

my $cmd="./ar_ifc_invalid1.pl";
`$cmd`;


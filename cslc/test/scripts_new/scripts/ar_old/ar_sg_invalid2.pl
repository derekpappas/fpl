#!/usr/bin/perl

#oanab
#connecting a sg and sg.sg with ifc.port,ifc.port.ps,ifc.ifc.port,ifc.ifc.port.ps,sg.sig,sg.sig.ps,sg.sg.sig,sg.sg.sig.ps
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 400; $i++) {
	&main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; # for ifc1
    $m = int(rand(20))+2; # for ifc2
    $n = int(rand(20))+3; # for ifc3
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "ar_sg".$i."_illegal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    else {
	&createCslFile($test_name, $i, $j+1, $m+2, $n+3, %dir);
    }
}
sub createCslFile {
    my ($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_ar_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+1;
    my $val2 = int(rand(100))+1;
    my $val3 = int(rand(100))+8;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_sg_valid");
        open(FH,">$path/ar_sg_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_sg_invalid2"); 
        open(FH,">$path/ar_sg_invalid2/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#declaring bitrange br1    
    if($val1 >= 8) {
	print FH "csl_bitrange br1($val1);\n\n";
    }
    else {
	$val1 = $val1 + 8;
	print FH "csl_bitrange br1($val1);\n\n";
    }
    
#declaring bitrange br2
    if($val2 >= 8) {
	print FH "csl_bitrange br2($val2);\n\n";
    }
    else {
	$val2 = $val2 + 8;
	print FH "csl_bitrange br2($val2);\n\n";
    }

#interface ifcj
    print FH "csl_interface ifc$j {\n";
    print FH "  csl_port p_a$i($dir{$l},br1);\n";
    if($l < 3) {
	print FH "  csl_port p_b$i($dir{$l+1},$val2);\n";
    }
    else {
	print FH "  csl_port p_b$i($dir{$l-1},$val2);\n";
    }
    if($l == 1) {
	print FH "  csl_port p_c$i($dir{$l+2},$val3);\n";
    }
    else {
	print FH "  csl_port p_c$i($dir{$l-1},$val3);\n";
    }
    if($i > 200) {
	print FH "  csl_port p_d$i($dir{$l},br2);\n";
    }
    print FH "  ifc$j () {}\n";
    print FH "};\n\n";

#interface ifcm
    if($i > 50 && $i <= 100 || $i > 225 && $i <= 300) {
	print FH "csl_interface ifc$m {\n";
	print FH "  csl_port p_x$i($dir{$l},br1);\n";
	if($l < 3) {
	    print FH "  csl_port p_y$i($dir{$l+1},br2);\n";
	}
	else {
	    print FH "  csl_port p_y$i($dir{$l-1},$val2);\n";
	}
	print FH "  ifc$j ifc$j\_$one;\n";
	if($i > 250 && $i <= 300) {
	    print FH "  ifc$j ifc$j\_$two;\n";
	}
	print FH "  ifc$m () {\n";
	if($i > 75 && $i <= 100) {
	    print FH "    ifc$j\_$one.reverse();\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#signal group sgj
    print FH "csl_signal_group sg$j {\n";
    print FH "  csl_signal s_a$i(br1);\n";
    print FH "  csl_signal s_b$i(br2);\n";
    print FH "  csl_signal s_c$i($val3);\n";
    if($i > 150) {
	print FH "  csl_signal s_d$i($val1);\n";
    }
    if($i > 275) {
	print FH "  csl_signal s_e$i($val2);\n";
    }
    print FH "  sg$j () {}\n";
    print FH "};\n\n";

#signal group sgm
    if($i > 100 && $i <= 400) {
	print FH "csl_signal_group sg$m {\n";
	print FH "  csl_signal sg$j\_$zero(3);\n";
	print FH "  csl_signal s_a(br1);\n";
	print FH "  csl_signal s_b($val3);\n";
	if($i > 150 && $i <= 175) {
	    print FH "  sg$j sg$j\_$one;\n";
	}
	elsif($i > 175 && $i <= 225) {
	    print FH "  sg$j sg$j\_$one;\n";
	    print FH "  sg$j sg$j\_$two;\n";
	}
	elsif($i > 225 && $i <= 250) {
	    print FH "  sg$j sg$j\_$one;\n";
	}
	elsif($i > 275 && $i <= 375) {
	    print FH "  sg$j sg$j\_$one;\n";
	}
	elsif($i > 375 && $i <= 400) {
	    print FH "  sg$j sg$j\_$one;\n";
	    print FH "  sg$j sg$j\_$two;\n";
	}
	print FH "  sg$m () {}\n";
	print FH  "};\n\n";
    }

#signal group sgn
    if($i > 225 && $i <= 275 || $i > 300 && $i <= 325 || $i > 350 && $i <= 400) {
	print FH "csl_signal_group sg$n {\n";
	print FH "  sg$j sg$j\_$two;\n";
	print FH "  sg$m sg$m\_$two;\n";
	print FH "  sg$n () {}\n";
	print FH "};\n\n";
    }


#unit a
    print FH "csl_unit a$k {\n";
    print FH "  ifc$j ifc$j\_$zero;\n";
#25 tests have sgj in unit a
    if($i > 50 && $i <= 100 || $i > 175 && $i <= 200 || $i > 300 && $i <= 325) {
	print FH "  sg$j sg$j\_$one;\n";
    }
#25 tests have sgm in unit a
    elsif($i > 100 && $i <= 175 || $i > 325 && $i <= 400) {
	print FH "  sg$m sg$m\_$zero;\n";
    }
#25 tests have sgn and ifcm in unit a
    elsif($i > 225 && $i <= 275) {
	print FH "  sg$n sg$n\_$zero;\n";
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
#25 tests have ifcm in unit a
    elsif($i > 275 && $i <= 300) {
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    print FH "  a$k () {\n";
    print FH "  }\n";
    print FH "};\n\n";
    

#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
#50 tests have ifcm in unit b
    if($i > 50 && $i <= 75 || $i > 250 && $i <= 275) {
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
#25 tests have sgm in unit b
    elsif($i > 150 && $i <= 200) {
	print FH "  sg$m sg$m\_$two;\n";
    }
#25 tests have ifcm and sgm in unit b
    elsif($i > 275 && $i <= 300) {
	print FH "  ifc$m ifc$m\_$zero;\n";
	print FH "  sg$m sg$m\_$two;\n";
    }
#25 tests have sgn in unit b
    elsif($i > 300 && $i <= 325 || $i > 350 && $i <= 375) {
	print FH "  sg$n sg$n\_$two;\n";
    }
#25 tests have sgj in unit b
    elsif($i > 325 && $i <= 350) {
	print FH "  sg$j sg$j\_$tre;\n";
    }
    print FH "  b$k () {}\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
#25 tests have sgj instantiated in unit c
    if($i <= 50 || $i > 100 && $i <= 125) {
	print FH "  sg$j sg$j\_$zero;\n";
    }
#25 tests have ifcm in unit c
    elsif($i > 75 && $i <= 100) {
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
#25 tests have sgj in unit c
    elsif($i > 150 && $i <= 175) {
	print FH "  sg$j sg$j\_$tre;\n";
    }
#25 tests have sgm in unit c
    elsif($i > 200 && $i <= 225) {
	print FH "  sg$m sg$m\_$one;\n";
    }
#25 tests have sgn in unit c
    elsif($i > 225 && $i <= 250 || $i > 375 && $i <= 400) {
	print FH "  sg$n sg$n\_$one;\n";
    }
#25 tests have another unit b instance in unit c
    elsif($i > 325 && $i <= 350) {
	print FH "  b$k b$k\_$one;\n";
    }
#25 tests have unit b and sgn in unit c
    elsif($i > 350 && $i <= 375) {
	print FH "  b$k b$k\_$one;\n";
	print FH "  sg$n sg$n\_$one;\n";
    }
    print FH "  c$k () {\n";
#25 tests connect a signal group with a port from an interface
    if($i <= 25) {
	print FH "//connect a signal group with a port from an interface\n";
	print FH "    sg$j\_$zero.connect(b$k\_$zero.a$k\_$zero.ifc$j\_$zero.p_b$i);\n";
    }
#25 tests connect a signal group with a port part from an interface (ifc.ifc)
    elsif($i > 75 && $i <= 100) {
	print FH "//connect a signal group with a port part from an interface (ifc.ifc)\n";
	print FH "    b$k\_$zero.a$k\_$zero.sg$j\_$one.connect(ifc$m\_$zero.ifc$j\_$one.p_b$i\[".($val2)."\:".($val2-3)."\]);\n";
    }
#25 tests connect a signal group with a signal from a signal group
    elsif($i > 100 && $i <= 125) {
	print FH "//connect a signal group with a signal from a signal group\n";
	print FH "    sg$j\_$zero.connect(b$k\_$zero.a$k\_$zero.sg$m\_$zero.sg$j\_$zero);\n";
    }
#25 tests connect a signal group with a signal from a signal group (sg.sg)
    elsif($i > 150 && $i <= 175) {
	print FH "//connect a signal group with a signal from a signal group (sg.sg)\n";
	print FH "  sg$j\_$tre.connect(b$k\_$zero.a$k\_$zero.sg$m\_$zero.sg$j\_$one.s_d$i);\n";
    }
#25 tests connect a signal group with a port from an interface (sg.sg)
    elsif($i > 200 && $i <= 225) {
	print FH "//connect a signal group with a port from an interface (sg.sg)\n";
	print FH "    sg$m\_$one.sg$j\_$one.connect(b$k\_$zero.a$k\_$zero.ifc$j\_$zero.p_d$i);\n";
	print FH "    sg$m\_$one.sg$j\_$two.connect(b$k\_$zero.a$k\_$zero.ifc$j\_$zero.p_d$i);\n";
    }
#25 tests connect a signal group with a port part from an interface (sg.sg)
    elsif($i > 225 && $i <= 250) {
	print FH "//connect a signal group with a port part from an interface (sg.sg)\n";
	print FH "    sg$n\_$one.sg$j\_$two.connect(b$k\_$zero.a$k\_$zero.ifc$m\_$zero.p_x$i\[".($val1)."\:".($val1-4)."\]);\n";
    }
#25 tests connect a signal group with a signal from a signal group (sg.sg,sg.sg)
    elsif($i > 350 && $i <= 375) {
	print FH "//connect a signal group with a signal from a signal group (sg.sg,sg.sg)\n";
	print FH "    b$k\_$one.a$k\_$zero.sg$m\_$zero.sg$j\_$one.connect(sg$n\_$one.sg$j\_$two.s_b$i);\n";
    }
#25 tests connect a signal group with a signal part from a signal group (sg.sg,sg.sg)
    elsif($i > 375 && $i <= 400) {
	print FH "//connect a signal group with a signal part from a signal group (sg.sg,sg.sg)\n";
	print FH "    sg$n\_$one.sg$j\_$two.connect(b$k\_$zero.a$k\_$zero.sg$m\_$zero.sg$j\_$one.s_d$i\]".($val1)."\:".($val1-5)."\]);\n";
print FH "    sg$n\_$one.sg$j\_$two.connect(b$k\_$zero.a$k\_$zero.sg$m\_$zero.sg$j\_$two.s_c$i\]".($val3)."\:".($val3-5)."\]);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit d
    if($i > 25 && $i <= 75 || $i > 125 && $i <= 175 || $i > 225 && $i <= 375) {
	print FH "csl_unit d$k {\n";
	print FH "  c$k c$k\_$zero;\n";
#25 tests have unit b instantiated in unit d
	if($i > 25 && $i <= 50 || $i > 250 && $i <= 300) {
	    print FH "  b$k b$k\_$one;\n";
	}
#25 tests have unit a instantiated in unit d
	elsif($i > 50 && $i <= 75) {
	    print FH "  a$k a$k\_$one;\n";
	}
#25 tests have sgj in unit d
	elsif($i > 125 && $i <= 150) {
	    print FH "  sg$j sg$j\_$two;\n";
	}
#25 tests have sgm in unit d
	elsif($i > 150 && $i <= 175) {
	    print FH "  sg$m sg$m\_$one;\n";
	}
#25 tests have ifcj in unit d
	elsif($i > 225 && $i <= 250) {
	    print FH "  ifc$j ifc$j\_$one;\n";
	}
#25 tests have units a and b and sgn instantiated in unit d
	elsif($i > 250 && $i <= 275) {
	    print FH "  a$k a$k\_$one;\n";
	    print FH "  b$k b$k\_$one;\n";
	    print FH "  sg$n sg$n\_$two;\n";
	}
#25 tests have sgn and unit b in unit d
	elsif($i > 300 && $i <= 325) {
	    print FH "  b$k b$k\_$one;\n";
	    print FH "  sg$n sg$n\_$two;\n";
	}
#25 tests have sgm in unit d
	elsif($i > 325 && $i <= 350) {
	    print FH "  sg$m sg$m\_$two;\n";
	    print FH "  c$k c$k\_$one;\n";
	}
#25 tests have sgn in unit d
	elsif($i > 350 && $i <= 375) {
	    print FH "  sg$n sg$n\_$tre;\n";
	}
	print FH "  d$k () {\n";
#25 tests connect a signal group with a port part from an interface
	if($i > 25 && $i <= 50) {
	    print FH "//connect a signal group with a port part from an interface\n";
	    print FH "    c$k\_$zero.sg$j\_$zero.connect(b$k\_$one.a$k\_$zero.ifc$j\_$zero.p_c$i\[".($val3)."\:".($val3-3)."\]);\n";
	}
#25 tests connect a signal group with a port from an interface (ifc.ifc)
	elsif($i > 50 && $i <= 75) {
	    print FH "//connect a signal group with a port from an interface (ifc.ifc)\n";
	    print FH "    a$k\_$one.sg$j\_$one.connect(c$k\_$zero.b$k\_$zero.ifc$m\_$zero.ifc$j\_$one.p_a$i);\n";
	}
#25 tests connect a signal group with a signal part from a signal group
	elsif($i > 125 && $i <= 150) {
	    print FH "//connect a signal group with a signal part from a signal group\n";
	    print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$m\_$zero.connect(sg$j\_$two.s_a$i\[".($val1)."\:".($val1-3)."\]);\n";
	}
#25 tests connect a signal group with a signal from a signal group (sg.sg)
	elsif($i > 150 && $i <= 175) {
	    print FH "//connect a signal group with a signal from a signal group (sg.sg)\n";
	    print FH "    sg$m\_$one.connect(c$k\_$zero.b$k\_$zero.sg$m\_$two.sg$j\_$one.s_b$i);\n";
	}
#25 tests connect a signal group with a port part from an interface (sg.sg)
	elsif($i > 225 && $i <= 250) {
	    print FH "//connect a signal group with a port part from an interface (sg.sg)\n";
	    print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$n\_$zero.sg$m\_$two.connect(ifc$j\_$one.p_b$i\[".($val2)."\:".($val2-7)."\]);\n";
	}
#25 tests connect a signal group with a port from an interface (sg.sg,ifc.ifc)
	elsif($i > 250 && $i <= 275) {
	    print FH "//connect a signal group with a port from an interface (sg.sg,ifc.ifc)\n";
	    print FH "    b$k\_$one.a$k\_$zero.sg$n\_$zero.sg$j\_$two.connect(a$k\_$one.ifc$m\_$zero.ifc$j\_$one.p_c$i);\n";
	    print FH "    sg$n\_$two.sg$m\_$two.connect(c$k\_$zero.b$k\_$zero.ifc$m\_$zero.ifc$j\_$two.p_c$i);\n";
	}
#25 tests connect a signal group with a port part from an interface (sg.sg,ifc.ifc)
	elsif($i > 275 && $i <= 300) {
	    print FH "//connect a signal group with a port part from an interface (sg.sg,ifc.ifc)\n";
	    print FH "    c$k\_$zero.b$k\_$zero.sg$m\_$two.sg$j\_$one.connect(b$k\_$one.ifc$m\_$zero.ifc$j\_$two.p_d$i\[".($val2)."\:".($val2-5)."\]);\n";
	}  
#25 tests connect a signal group with a signal part from a signal group (sg.sg)
	elsif($i > 325 && $i <= 350) {
	    print FH "//connect a signal group with a signal part from a signal group (sg.sg)\n";
	    print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$m\_$zero.sg$j\_$one.connect(sg$m\_$two.s_b\[".($val3)."\:".($val3-8)."\]);\n";
	    print FH "    sg$m\_$two.sg$j\_$one.connect(c$k\_$one.b$k\_$one.sg$j\_$tre.s_e\[".($val2)."\:".($val2-5)."\]);\n";
	}
#25 tests connect a signal group with a signal from a signal group (sg.sg,sg.sg)
	elsif($i > 350 && $i <= 375) {
	    print FH "//connect a signal group with a signal from a signal group (sg.sg,sg.sg)\n";
	    print FH "    c$k\_$zero.b$k\_$zero.sg$n\_$two.sg$m\_$two.connect(sg$n\_$tre.sg$j\_$two.s_c$i);\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#unit e
    if($i > 175 && $i <= 200 || $i > 275 && $i <= 325) {
	print FH "csl_unit e$k {\n";
#25 tests have unit c, unit a and sgm instantiated in unit e
	if($i > 175 && $i <= 200) {
	    print FH "  c$k c$k\_$zero;\n";
	    print FH "  a$k a$k\_$one;\n";
	    print FH  "  sg$m sg$m\_$tre;\n";
	}
#25 tests have sgm, unit d and unit c in unit e
	elsif($i > 275 && $i <= 300) {
	    print FH "  c$k c$k\_$one;\n";
	    print FH "  d$k d$k\_$zero;\n";
	    print FH  "  sg$m sg$m\_$tre;\n";
	}
#25 tests have unit d and sgm instantiated in unit e
	elsif($i > 300 && $i <= 325) {
	    print FH "  d$k d$k\_$zero;\n";
	    print FH "  sg$m sg$m\_$tre;\n";
	    print FH "  d$k d$k\_$one;\n";
	}
	print FH "  e$k () {\n";
#25 tests connect a signal group with a signal part from a signal group (sg.sg)
	if($i > 175 && $i <= 200) {
	    print FH "//connect a signal group with a signal part from a signal group (sg.sg)\n";
	    print FH "    a$k\_$one.sg$j\_$one.connect(c$k\_$one.b$k\_$zero.sg$m\_$two.sg$j\_$one.s_c$i\[".($val3)."\:".($val3-4)."\]);\n";
	    print FH "    c$k\_$one.b$k\_$zero.a$k\_$zero.sg$j\_$one.connect(sg$m\_$tre.sg$j\_$two.s_a$i\[".($val1)."\:".($val1-4)."\]);\n";
	}
#25 tests connect a signal group with a port part from an interface (sg.sg,ifc.ifc)
	elsif($i > 275 && $i <= 300) {
	    print FH "//connect a signal group with a port part from an interface (sg.sg,ifc.ifc)\n";
	    print FH "    sg$m\_$tre.sg$j\_$one.connect(c$k\_$one.b$k\_$zero.a$k\_$zero.ifc$m\_$zero.ifc$j\_$one.p_a$i\[".($val1)."\:".($val1-5)."\]);\n";
	}
#25 tests connect a signal group with a signal from a signal group (sg.sg)
    elsif($i > 300 && $i <= 325) {
	print FH "//connect a signal group with a signal from a signal group (sg.sg)\n";
	print FH "    d$k\_$zero.b$k\_$one.sg$n\_$two.sg$j\_$two.connect(sg$m\_$tre.s_a);\n";
	print FH "    d$k\_$one.sg$n\_$two.sg$m\_$two.connect(d$k\_$zero.c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$j\_$one.s_b$i);\n";
    }
	print FH "  }\n";
	print FH "};\n\n";
    }
    
}


#!/usr/bin/perl

use strict;

use Switch;               # the switch/case command
use File::Find;           # traversing the directory tree
use File::Basename;       # retrieving the basename of a directory
use File::Path;           # mkpath command

my $ENUM         = "enum_";
my $cslEnum      = "csl_enum";
my $enumName     = "e";
my $enumItemName = "ei_";

my $ITEMS_NO     = 5;
my $BASE_BIN     = 2;
my $BASE_OCT     = 8;
my $BASE_DEC     = 10;
my $BASE_HEX     = 16;
my $BASE_ANY     = 20;

my $ONE          = 1;
my $TWO          = 2;
my $THREE        = 3;
my $TEN          = 10;
my $ELEVEN       = 11;
my $TWELVE       = 12;
my $THIRTEEN     = 13;
my $FOURTEEN     = 14;
my $FIFTEEN      = 15;

my $V_BBN         = "v_bbn";
my $V_BN          = "v_bn";
my $V_N           = "v_n";
my @base         = ( "b", "o", "d", "h");
my @verilog      = ( $V_BBN, $V_BN, $V_N);

my $testDate     = `date "+%d/%m/%G, %T"`;
my $start_time   = time();
my $testName     = "";
my $enumItemsNo;
my $bitsVerNo;
my $baseVeriNo;
my $noVerNo;
my $eiValue;

&gen_enum();

print "Generated tests path: csl_test_gen/enum_verilog_no_valid\n";

sub printHeader{
    my $testName = $_[0];

    print FH "//Test generated by AncaO\n";
    print FH "//Test name: $testName\n";
    print FH "//Date: $testDate\n";
    print FH "//csl_enum with verilog numbers is created";
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
    #print "[INFO] Created directory $dirName\n";
}

sub createCSLfile{
    $testName = $_[0];

    &mkDir("$ENV{WORK}/test/csl_test_gen/enum_verilog_no_valid");
    open( FH, ">$ENV{WORK}/test/csl_test_gen/enum_verilog_no_valid/$testName");

    &printHeader($testName);
    print FH "\n";
    print FH "$cslEnum e {\n";
#    print FH "  $enumName() {\n";
}

sub closeCSLfile{
#    print FH "   }\n";
    print FH "};\n";       
}

sub generateRandomNumber{
    my ($_digits, $_base) = @_;
    $noVerNo = "";

    for( my $_noDigits = 0; $_noDigits < $_digits; $_noDigits++) {
        my $number = int( rand( $_base));
        if( $number >= $TEN && $_base == $BASE_HEX) {
            switch($number) {
                case ($TEN      ) { $noVerNo .= "a";}
                case ($ELEVEN   ) { $noVerNo .= "b";}
                case ($TWELVE   ) { $noVerNo .= "c";}
                case ($THIRTEEN ) { $noVerNo .= "d";}
                case ($FOURTEEN ) { $noVerNo .= "e";}
                case ($FIFTEEN  ) { $noVerNo .= "f";}
            }
        }   
        else {
            $noVerNo .= $number; 
        }
    }
#    print "\n";
}

sub genValidVerilogNumbers{
    my ($_bits, $_base, $_digits, $_verilog) = @_;

    $eiValue = "";
    if( $_verilog eq $V_BBN ) {
        $eiValue = $_bits ;        
    }
    if( $_verilog eq $V_BBN || $_verilog eq $V_BN ) {
        switch( $_base) {
            case ("b") { generateRandomNumber($_digits, $BASE_BIN); }
            case ("o") { generateRandomNumber($_digits, $BASE_OCT); }
            case ("d") { generateRandomNumber($_digits, $BASE_DEC); }
            case ("h") { generateRandomNumber($_digits, $BASE_HEX); }
        }
        $eiValue .= "'" . $_base . $noVerNo;
    }
    else  {# if( $_verilog == $V_N )
               generateRandomNumber($_digits, $BASE_ANY );    
               $eiValue .= $noVerNo; 
           }
}

sub gen_enum{
#valid
    my $_enumItemsNo;
    for( my $enumItemsNo = 1; $enumItemsNo < $ITEMS_NO; $enumItemsNo++) {
        for( my $_bits = 1; $_bits < 10; $_bits++ ) {
            foreach my $_base( @base) {
                for( my $_digits = 1; $_digits < 5; $_digits++){
                    foreach my $_verilog( @verilog) {

                        $testName = $ENUM . $_verilog . "_" . $enumItemsNo . "_" . $_bits . "_" . $_base . "_" . $_digits . "_legal.csl";
                        &createCSLfile($testName);
                        for( $_enumItemsNo = 0; $_enumItemsNo < $enumItemsNo-1; $_enumItemsNo++) {
                            &genValidVerilogNumbers($_bits, $_base, $_digits, $_verilog ); 
                            print FH "     $enumItemName" . $_enumItemsNo . " = " . $eiValue . ",\n";
                        }
                        &genValidVerilogNumbers($_bits, $_base, $_digits, $_verilog ); 
                        print FH "     $enumItemName" . $_enumItemsNo . " = " . $eiValue . "\n";
                        closeCSLfile($testName);

                    }
                }
            }
        }
    }
    my $finish_time  = time(); #statistics on the time elapsed from the start of the regression until it's end
    my $elapsed_time = $finish_time - $start_time;
    my $day          = int $elapsed_time/86400;
    my $hour         = int $elapsed_time%86400/3600;
    my $min          = int $elapsed_time%3600/60;
    my $sec          = $elapsed_time-$day*86400-$hour*3600-$min*60;
#    print "day = $day\n";
#    print "hour = $hour\n";
#    print "min = $min\n";
#    print "sec = $sec\n";
}

#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."assign_part_select_sig_sg_valid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @lower = (0,3,10,23);
my @upper = (32,51,64,80);

foreach(my $i = 1; $i <= 6; $i++) {
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            &main($i,$l,$u);
        }
    }
}


sub main {
    my ($i,$l,$u) = @_;
    my $test_name;
    $test_name = "assign_part_select_sig_sg".$i."_".$l."_".$u."_legal.csl";
    &createCslFile($test_name,$i,$l,$u);
    
}

sub createCslFile {
    my($test_name,$i,$l,$u) = @_;
    
    my $val1 = $u + int(rand(100)) + 1;
    my $w = $u - $l + 1;
    my $val2 = $val1 + int(rand(100)) + 1;
    my $val3 = $val1 + int(rand(30)) + 1;
    my $val4 = $val1 + int(rand(30)) + 1;
    my $val5 = $val1 + int(rand(30)) + 1;
    &mkDir("$path/assign_part_select_sig_sg_valid");
    open(FH,">$path/assign_part_select_sig_sg_valid/$test_name");
    
    print FH "//Generated by Petronela\n";
    print FH "//part select used in assign signal with sig[ps],sig[ps] with signal,sig[ps] with sig[ps], sg[.+sg].sig[ps] with [+sg.]sig,[+sg.]sig with sg[+.sg].sig[ps] \n\n";
    #print FH "csl_filed f1($val3),f2($val4);\n";
    #print FH "csl_bitrange br($val1);\n";
    #print FH "csl_bitrange brt($val2);\n";
    print FH "csl_signal_group sga {\n";
    print FH "  csl_signal s_sga$i($val1);\n";
    print FH "  csl_signal s_sgga($val1);\n";
    print FH "  csl_signal s_sa($w);\n";
    print FH "  csl_signal s_sgaa$i($w);\n";
    print FH "  sga() {\n";
    print FH "    s_sga$i = s_sgga;\n";
    print FH "    s_sgaa$i = s_sa;\n";
    print FH "  }\n";
    print FH "};\n\n";
    print FH "csl_signal_group sgb {\n";
    print FH "  sga sga0;\n";
    #print FH "  sga sga1;\n";
    print FH "  csl_signal s_sgb$i($val1);\n";
    print FH "  csl_signal s_sggb($val1);\n";
    print FH "  csl_signal s_sb($w);\n";
    print FH "  csl_signal s_sgbb$i($w);\n";
    print FH "  sgb() {\n";
    print FH "    s_sgb$i = s_sggb;\n";
    print FH "    s_sgbb$i = s_sb;\n";
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_signal_group sgd {\n";
    print FH "  sgb sgb0;\n";
    #print FH "  sgb sgb1;\n";
    print FH "  csl_signal s_sgd$i($val1);\n";
    print FH "  csl_signal s_sggd($val1);\n";
    print FH "  csl_signal s_sd($w);\n";
    print FH "  csl_signal s_sgdd$i($w);\n";
    print FH "  sgd() {\n";
    print FH "    s_sgd$i = s_sggd;\n";
    print FH "    s_sgdd$i = s_sd;\n";
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_signal_group sge {\n";
    print FH "  sgd sgd0;\n";
    #print FH "  sgd sgd1;\n";
    print FH "  csl_signal s_sge$i($val1);\n";
    print FH "  csl_signal s_sgge($val1);\n";
    print FH "  csl_signal s_se($w);\n";
    print FH "  csl_signal s_sgee$i($w);\n";
    print FH "  sge() {\n";
    print FH "    s_sge$i = s_sgge;\n";
    print FH "    s_sgee$i = s_se;\n";
    print FH "  }\n";
    print FH "};\n\n";
    print FH "csl_unit a {\n";
    #print FH "  sgd sgd6;\n";
    print FH "  csl_signal s_data($val1);\n"; 
    print FH "  csl_signal s_addr($val1);\n";
    print FH "  csl_signal s_data1($val1);\n";
    print FH "  csl_signal s_addr1($val1);\n"; 
    print FH "  csl_signal s_addr2($w);\n";
    print FH "  csl_signal s_data2($w);\n"; 
    print FH "  csl_signal s_addr3($w);\n";
    #print FH "  csl_signal s_data3($w);\n";
    
    print FH "  a() {\n";
    print FH "    s_data[$u:$l] = s_data2;\n";
    print FH "    s_addr2 = s_data1[$u:$l];\n";
    print FH "    s_addr1[$u:$l] = s_addr[$u:$l];\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    if($i > 3 ){
        print FH "csl_unit f {\n";
        print FH "  csl_signal s_data($val1);\n"; 
        print FH "  csl_signal s_addr($val1);\n";
        #print FH "  csl_signal s_data1($val1);\n";
        print FH "  f() {\n";  
        print FH "    s_data[$u:$l] = s_addr[$u:$l];\n";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    print FH "csl_unit b {\n"; 
    if($i < 4){
        print FH "  a a0;\n";
        #print FH "  a a1;\n";
        #print FH "  sge sge0;\n";
        #print FH "  sga sga2;\n";
    }
    else {
        print FH "  f f0;\n";
        #print FH "  f f1;\n";
        print FH "  a a0;\n";
        #print FH "  a a1;\n";
        #print FH "  a a2;\n";
        #print FH "  sge sge0;\n";
        print FH "  sga sga2;\n";
    }
   
    print FH "  csl_signal s_data4($val1);\n";
    #print FH "  csl_signal s_addr4($val1);\n";
    print FH "  csl_signal s_data11($val1);\n";
    print FH "  csl_signal s_addr11($val1);\n";
    #print FH "  csl_signal s_data21($w);\n";
    #print FH "  csl_signal s_addr21($w);\n";
    #print FH "  csl_signal s_data31($w);\n";
    #print FH "  csl_signal s_addr31($w);\n";
    
    print FH "  b() {\n";
    if($i < 4 ) {
        print FH "    s_data4[$u] = s_addr11[$l];\n";
        print FH "    s_data11[$u:$l] = s_data4[$u:$l];\n";
    }
    else{
        print FH "    s_addr11[$u:$l] = sga2.s_sgga[$u:$l];\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i < 4){
        print FH "  b b0;\n";
        #print FH "  b b1;\n";
        print FH "  sgd sgd2;\n";
        print FH "  sge sge1;\n";
    }
    else {
        print FH "  b b0;\n";
        #print FH "  b b1;\n";
        #print FH "  b b2;\n";
        #print FH "  a a0;\n";
        print FH "  sgd sgd2;\n";
        print FH "  sge sge1;\n";
    }
 
    #print FH "  csl_signal s_data5($val1);\n";
    #print FH "  csl_signal s_addr5($val1);\n";
    #print FH "  csl_signal s_data12($val1);\n";
    #print FH "  csl_signal s_addr12($val1);\n";
    print FH "  csl_signal s_data22($w);\n";
    #print FH "  csl_signal s_addr22($w);\n";
    #print FH "  csl_signal s_data32($w);\n";
    #print FH "  csl_signal s_addr32($w);\n";

    print FH "  c() {\n";
    print FH "    sgd2.sgb0.s_sgb$i"."[$u:$l] = sgd2.s_sd;\n";
    print FH "    sge1.sgd0.sgb0.s_sggb[$u:$l] = s_data22;\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i < 4){
        #print FH "  b b0;\n";
        #print FH "  b b1;\n";
        print FH "  c c0;\n";
        #print FH "  c c1;\n";
        print FH "  sgb sgb3;\n";
        print FH "  sge sge2;\n";
    }
    else {
        #print FH "  f f0;\n";
        #print FH "  f f1;\n";
        #print FH "  b b0;\n";
        #print FH "  b b1;\n";
        print FH "  c c0;\n";
        #print FH "  c c1;\n";
        print FH "  sgb sgb3;\n";
        print FH "  sge sge2;\n";
    }
    print FH "  csl_signal s_data6($val1);\n"; 
    #print FH "  csl_signal s_addr6($val1);\n";
    #print FH "  csl_signal s_data13($val1);\n";
    #print FH "  csl_signal s_addr13($val1);\n";
    #print FH "  csl_signal s_data23($w);\n";
    #print FH "  csl_signal s_addr23($w);\n";
    #print FH "  csl_signal s_data33($w);\n";
    print FH "  csl_signal s_addr33($w);\n";
    
    print FH "  d() {\n";
    if($i < 4) {
        print FH "    s_data6[$u:$l] = sge2.s_se;\n";
        print FH "    s_addr33 = s_data6[$u:$l];\n";
       
    }
    else {
        print FH "    s_addr6[$u:$l] = sgb3.sga0.s_sa;\n";
        print FH "    s_data6[$u:$l] = sge2.sgd0.sgb0.s_sgb$i"."[$u:$l];\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_unit e {\n";  
    if($i < 4){
        print FH "  d d0;\n";
        #print FH "  d d1;\n";
        #print FH "  b b0;\n";
        #print FH "  b b1;\n";
        #print FH "  c c0;\n";
        print FH "  sge sge3;\n";
        print FH "  sgb sgb4;\n";
    }
    elsif($i >= 2) {
        print FH "  d d0;\n";
        #print FH "  d d1;\n";
        #print FH "  c c0;\n";
        #print FH "  c c1;\n";
        #print FH "  c c2;\n";
        print FH "  sge sge3;\n";
        print FH "  sgb sgb4;\n";
        print FH "  sga sga3;\n";
    }
    if($i < 4) {
        print FH "  csl_signal s_data7($val1);\n"; 
    #print FH "  csl_signal s_addr7($val1);\n";   
    #print FH "  csl_signal s_data14($val1);\n";  
    #print FH "  csl_signal s_addr14($val1);\n";  
    #print FH "  csl_signal s_data24($w);\n"; 
        print FH "  csl_signal s_addr24($w);\n";   
    #print FH "  csl_signal s_data34($w);\n";
    #print FH "  csl_signal s_addr34($w);\n";
    }
    else{
        print FH "  csl_signal s_addr7($val1);\n";  
        print FH "  csl_signal s_data14($val1);\n";
        print FH "  csl_signal s_data34($w);\n";
        print FH "  csl_signal s_data24($w);\n"; 
    }
    print FH "  e() {\n";
    
    if($i < 4) {
        print FH "    s_addr24 = sge3.s_sgge[$u:$l];\n";
        print FH "    s_data7[$u:$l] = sgb4.sga0.s_sgaa$i;\n";
    }
    else {
        print FH "    s_data24 = s_data14[$u:$l];\n";
        print FH "    s_data34 = s_addr7[$u:$l];\n";
    }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i < 4){
        #print FH "  d d0;\n";
        #print FH "  d d1;\n";
        #print FH "  d d2;\n";
        print FH "  e e0;\n"; 
        #print FH "  e e1;\n"; 
        print FH "  sge sge4;\n";
        #print FH "  sgd sgd5;\n";
    }
    else {
        #print FH "  d d0;\n";
        #print FH "  d d1;\n";
        print FH "  e e0;\n"; 
        #print FH "  e e1;\n"; 
        #print FH "  e e2;\n";
        #print FH "  a a0;\n";
        print FH "  sge sge4;\n";
        print FH "  sgd sgd5;\n";
    }
    if($i < 4) {
    #print FH "  csl_signal s_data8($val1);\n"; 
        print FH "  csl_signal s_addr8($val1);\n";   
    #print FH "  csl_signal s_data15($val1);\n";  
        print FH "  csl_signal s_addr15($val1);\n";  
        print FH "  csl_signal s_data25($w);\n"; 
    #print FH "  csl_signal s_addr25($w);\n";   
    #print FH "  csl_signal s_data35($w);\n";
        print FH "  csl_signal s_addr35($w);\n";
    }
    else{
        print FH "  csl_signal s_addr8($val1);\n"; 
        print FH "  csl_signal s_addr15($val1);\n";
    }
    
    print FH "  top(){\n";
    if($i < 4) {
        print FH "    s_data25 = s_addr8[$u:$l];\n";
        print FH "    s_data15[$u:$l] = sge4.s_se;\n";
        print FH "    s_addr8[$u:$l] = s_addr35;\n"; 
    }
    else {
        print FH "    sge4.sgd0.s_sgdd$i = s_data15[$u:$l];\n";
        print FH "    s_addr8[$u:$l] = s_data15[$u:$l];\n";
        print FH "    sgd5.sgb0.sga1.s_sgga[$u:$l] = sge4.sgd0.sgb1.s_sggb[$u:$l];\n";
        
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

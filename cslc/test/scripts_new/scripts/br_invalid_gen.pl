#!/usr/bin/perl

use strict;

use Switch;               # the switch/case command
use File::Find;           # traversing the directory tree
use File::Basename;       # retrieving the basename of a directory
use File::Path;           # mkpath command

my $cslBitrange  = "csl_bitrange";
my $BR           = "br_";
my $testDate     = `date "+%d/%m/%G, %T"`;
my $possible     = 'abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
my $POS          = "pos";
my $NEG          = "neg";
my $FLOAT        = "float";
my $CHAR         = "char";
my @cases        = ( $POS, $NEG, $FLOAT, $CHAR);
my $SIG          = "signal";
my $PORT         = "port";
my $FIELD        = "field";
my @obj          = ( $SIG, $PORT, $FIELD);

my $BASE_DEC     = 10;

my $testName;
my $brWidth;
my $lowerIndex;
my $upperIndex;
my $float;
my $dirName;
my $sigTestName;

#&gen_br_width();
&gen_br_upper_lower();

sub printHeader{
    my $testName = $_[0];

    print FH "//Test generated by AncaO\n";
    print FH "//Test name: $testName\n";
    print FH "//Date: $testDate\n";
    print FH "//csl_enum with verilog numbers is created";
}

sub mkDir {
    my($dirName) = @_;

    unless(-e "$dirName")  { `mkdir $dirName`; }
    #print "[INFO] Created directory $dirName\n";
}

sub createCSLfile{
    &mkDir("$ENV{WORK}/test/csl_test_gen/$dirName");
    open( FH, ">$ENV{WORK}/test/csl_test_gen/$dirName/$testName");

    &printHeader($testName);
    print FH "\n";
}

sub displayWidth{
    my ($brWidth) = @_;

    &createCSLfile();
    print FH "$cslBitrange br ( $brWidth );\n";
}

sub displayWidthCC{
    my ($brWidth, $testName) = @_;

    displayWidth($brWidth);
    print FH "$cslBitrange br1 ( br );\n";
}

sub displayObj{
    my ($_obj, $br) = @_;

    print FH "csl_unit u{\n";
    print FH "   csl_$_obj object_name;\n";
    print FH "   u(){\n";
    print FH "     $_obj" . ".set_bitrange( $br );\n";
    print FH "    }\n";;
    print FH "};";
}

sub displayWidthObj{
    my ($brWidth, $_obj, $testName) = @_;

    displayWidth($brWidth, $testName);
    displayObj($_obj, "br");
}

sub displayWidthObjCC{
    my ($brWidth, $_obj, $testName) = @_;

    displayWidthCC($brWidth, $testName);
    displayObj( $_obj, "br1");
}


sub generateRandomNumber{
    my ($_digits, $_base) = @_;
    $brWidth = "";

    for( my $_noDigits = 0; $_noDigits < $_digits; $_noDigits++) {
        my $number = int( rand( $_base));
        $brWidth .= $number; 
    }
}

sub generateNoWithChar{
    my $_digits = $_[0];
    $brWidth = "";

    while (length($brWidth) < $_digits) {
        $brWidth .= substr($possible, (int(rand(length($possible)))), 1);
    }
}

sub gen_br_width{
    $dirName = "br_w_invalid";

    for( my $_case = 1; $_case < @cases; $_case++){
        for( my $_digits = 1; $_digits < 5; $_digits++) {    
            genCase($cases[$_case], $_digits);

            $testName = $BR . "$cases[$_case]" . "_$_digits" . "_illegal.csl";
            &displayWidth($brWidth, $testName);

            $testName = $BR . "cc_$cases[$_case]" . "_$_digits" . "_illegal.csl";
            &displayWidthCC($brWidth, $testName);

            foreach my $_obj(@obj) {
                genCase($cases[$_case], $_digits);

                $testName = $BR . $_obj . "_$cases[$_case]" . "_$_digits" . "_illegal.csl";
                &displayWidthObj($brWidth, $_obj, $testName);

                $testName = $BR . $_obj . "_cc_$cases[$_case]" . "_$_digits" . "_illegal.csl";
                &displayWidthObjCC($brWidth, $_obj, $testName);
            }
        }
    }
}

sub genCase{
    my ($_case, $_digits) = @_;

    switch($_case) {
        case ($POS  ) {generateRandomNumber($_digits, $BASE_DEC);}
        case ($NEG  ) {generateRandomNumber($_digits, $BASE_DEC); $brWidth = "-" . $brWidth;}
        case ($FLOAT) {generateRandomNumber($_digits, $BASE_DEC); my $float;
                       $float = $brWidth;
                       generateRandomNumber($_digits, $BASE_DEC); $float .= ".$brWidth";
                       $brWidth = $float;
                   }
        case ($CHAR ) {generateNoWithChar($_digits, $BASE_DEC);}
    }
}

sub gen_br_upper_lower{
    foreach my $_casel(@cases) {
        foreach my $_caseu(@cases) {
            for( my $_digitsl = 1; $_digitsl < 3; $_digitsl++){    
                for( my $_digitsu = 1; $_digitsu < 3; $_digitsu++){   
                    
                    &genCase($_casel, $_digitsl);
                    $lowerIndex = $brWidth;

                    &genCase($_caseu, $_digitsu);
                    $upperIndex = $brWidth;

                    $testName = $BR . $_casel . "_$_caseu" . "_$_digitsl" . "_$_digitsu" . "_illegal.csl";
                    &displayLowerUpper( $lowerIndex, $upperIndex, $testName);

                    $testName = $BR . "cc_" . $_casel . "_$_caseu" . "_$_digitsl" . "_$_digitsu" . "_illegal.csl";
                    &displayLowerUpperCC( $lowerIndex, $upperIndex, $testName);

                    foreach my $_obj(@obj) {
                        &genCase($_casel, $_digitsl);
                        $lowerIndex = $brWidth;

                        &genCase($_caseu, $_digitsu);
                        $upperIndex = $brWidth;

                        $testName = $BR . $_obj . "_$_casel" . "_$_caseu" . "_$_digitsl" . "_$_digitsu" . "_illegal.csl";
                        &displayLowerUpperObj( $lowerIndex, $upperIndex, $_obj, $testName);

                        $testName = $BR . $_obj . "_cc_" . $_casel . "_$_caseu" . "_$_digitsl" . "_$_digitsu" . "_illegal.csl";
                        &displayLowerUpperObjCC( $lowerIndex, $upperIndex, $_obj, $testName);                       
                    }
                }
            }
        }
    }
}

sub displayLowerUpper{
    my ($lowerIndex, $upperIndex, $testName) = @_;

    $dirName = "br_lower_upper_invalid";
    &createCSLfile();
    print FH "$cslBitrange br ( $lowerIndex , $upperIndex );\n";
}


sub displayLowerUpperCC{
    my ($lowerIndex, $upperIndex, $testName) = @_;

    displayLowerUpper($lowerIndex, $upperIndex, $testName);
    print FH "$cslBitrange br1( br );\n";
}

sub displayLowerUpperObj{
    my ($lowerIndex, $upperIndex, $_obj, $testName) = @_;

    &displayLowerUpper($lowerIndex, $upperIndex, $testName);
    &displayObj($_obj, "br");
}

sub displayLowerUpperObjCC{
    my ($lowerIndex, $upperIndex, $_obj, $testName) = @_;

    &displayLowerUpperCC($lowerIndex, $upperIndex, $testName);
    &displayObj($_obj, "br1");
}

#!/usr/bin/perl

#oanab
#assign with part select

use strict;

print "Generated tests path : test/csl_test_gen/assign_part_sel_invalid4/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 250; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "assign_part_sel".$i."_illegal.csl";
   	&createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(20)) + 2;
    my $val2 = int(rand(100)) + 3;
    my $val3 = int(rand(100)) + 4;
    my $l = int(rand(3))+1;
    my $m = $k + int(rand(10)) + 1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/assign_part_sel_valid");
        open(FH,">$path/assign_part_sel_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/assign_part_sel_invalid4"); 
        open(FH,">$path/assign_part_sel_invalid4/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#bitranges and fields
    print FH "csl_field f1($val1);\n";
    print FH "csl_bitrange br2($val2);\n";
    print FH "csl_bitrange br3($val3);\n";
    print FH "csl_bitrange br4(".($val2+$val3).");\n";
    print FH "csl_bitrange br5(".($val1+$val2+$val3).");\n\n";

   
#ifc k
    print FH "csl_interface ifc$k {\n";
    print FH "  csl_port p_a$i(input,br3);\n";
    print FH "  csl_port p_b$i(output,$val2);\n";
    print FH "  csl_port p_c$i(input,f1);\n";
    print FH "  csl_port p_d$i(output,br4);\n";
    print FH "  ifc$k () {}\n";
    print FH "};\n\n";
    

#ifc m
    print FH "csl_interface ifc$m {\n";
    print FH "  csl_port p_x$i(input,br3);\n";
    print FH "  ifc$k ifc$k\_$zero;\n";
    print FH "  ifc$k ifc$k\_$one;\n";
    print FH "  ifc$k ifc$k\_$two;\n";
    print FH "  ifc$m () {}\n";
    print FH "};\n\n";


#sg k
    print FH "csl_signal_group sg$k {\n";
    print FH "  csl_signal s_a$i(br2);\n";
    print FH "  csl_signal s_b$i(br3);\n";
    print FH "  csl_signal s_c$i(br2);\n";
    print FH "  csl_signal s_d$i(br4);\n";
    print FH "  sg$k () {}\n";
    print FH "};\n\n";
    

#sg m
    print FH "csl_signal_group sg$m {\n";
    print FH "  csl_signal s_x$i(br2);\n";
    print FH "  csl_signal s_y$i(br4\[".($val2+1)."\:".($val2+$val3)."\]);\n";
    print FH "  sg$k sg$k\_$zero;\n";
    print FH "  sg$k sg$k\_$one;\n";
    print FH "  sg$m () {}\n";
    print FH "};\n\n";


#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 50) {
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  csl_port p_a$i($dir{$l},br4);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_port p_$i($dir{$l},".(3*$val3).");\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  csl_signal s_x$i(br2);\n";
	print FH "  csl_signal s_y$i(br4);\n";
	print FH "  ifc$m ifc$m\_$two;\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  csl_signal s_a$i($val3);\n";
	print FH "  csl_signal s_b$i(f1);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  sg$k sg$k\_$two;\n";
	print FH "  csl_signal s_x$i(br2);\n";
	print FH "  csl_signal s_y$i($val1);\n";
    }
    print FH "  a$k () {\n";
#Invalid assign between ifc and p.ps - p
    if($i <= 50) {
	print FH "    ifc$k\_$zero = p_a$i\[".($val2+$val3)."\:".($val2)."\];    // Invalid assign between ifc and p.ps - p\n";
    }
#Invalid assign between sg and op expr, ifc.ifc and op expr
    elsif($i > 100 && $i <= 150) {
	print FH "    sg$k\_$zero = s_x$i & s_y$i\[".($val2+$val3)."\-\:".($val2)."\];      // Invalid assign between sg and op expr\n";
	print FH "    ifc$m\_$two.ifc$k\_$two = s_x$i\[".($val2)."\:".($val2)."\] + s_y$i\[3\];    // Invalid assign between ifc.ifc and op expr\n";
    }
#Invalid assign between sg.sg and concat expr
    elsif($i > 150 && $i <= 200) {
	print FH "    sg$m\_$zero.sg$k\_$one = {s_a$i,s_b$i\[".($val1)."\:".($val1)."\]};   // Invalid assign between sg.sg and concat expr\n";
    }
#Invalid assign between sg and repl expr
    elsif($i > 200 && $i <= 250) {
	print FH "    sg$k\_$two = {4{s_x$i\[2\],s_y$i}};    // Invalid assign between sg and repl expr\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit b
    print FH "csl_unit b$k {\n";
    print FH "  csl_signal s_a$i(br4);\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i <= 50) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  ifc$m ifc$m\_$zero;\n";
	print FH "  csl_port p_x$i($dir{$l},br4);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  sg$m sg$m\_$one;\n";
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  csl_port p_n$i($dir{$l},".($val2+2*$val1).");\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  csl_port p_x$i(input,f1);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  csl_signal s_x$i(br4);\n";
	print FH "  csl_signal s_y$i($val3);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  ifc$m ifc$m\_$zero;\n";
	print FH "  csl_signal s_m$i(br1);\n";
	print FH "  csl_signal s_n$i(br3);\n";
    }
    print FH "  b$k () {\n";
#Invalid assign between sg and p.ps - p, ifc.ifc and p.ps - p
    if($i <= 50) {
	print FH "    sg$k\_$zero = p_x$i\[".($val2+$val3)."\:".($val2)."\];    // Invalid assign between sg and p.ps - p\n";
print FH "    ifc$m\_$zero.ifc$k\_$zero =  p_x$i\[".($val2+$val3)."\:".($val3)."\];    // Invalid assign between ifc.ifc and p.ps - p\n";
    }
#Invalid assign between sg.sg and p.ps, ifc and p.ps - c
    elsif($i > 50 && $i <= 100) {
	print FH "    sg$m\_$one.sg$k\_$one = a$k\_$zero.p_$i\[".(3*$val3)."\:".($val1)."\];    // Invalid assign between sg.sg and p.ps - c\n";
print FH "    ifc$k\_$one = a$k\_$zero.p_$i\[".(6)."\];    // Invalid assign between ifc and p.ps - c\n";
    }
#Invalid assign between ifc and op expr
    elsif($i > 100 && $i <= 150) {
	print FH "    ifc$k\_$zero = !p_x$i\[$val1\];   // Invalid assign between ifc and op expr\n";
    }
#Invalid assign between sg and concat expr, ifc and concat expr
    elsif($i > 150 && $i <= 200) {
	print FH "    sg$k\_$one = {s_x$i\[".($val2+$val3-3)."\-\:".($val2)."\],s_y$i\[".($val3)."\:".($val3)."\]};    // Invalid assign between sg and concat expr\n";
	print FH "    ifc$k\_$one = {sg$k\_$one.s_b$i\[2\],sg$k\_$one.s_c$i};    // Invalid assign between ifc and concat expr\n";
    }
#Invalid assign between sg.sg and repl expr, ifc.ifc and repl expr
    elsif($i > 200 && $i <= 250) {
	print FH "    sg$m\_$zero.sg$k\_$zero = {2{s_m$i\[2\],s_n$i}};    // Invalid assign between sg.sg and repl expr\n";
	print FH "    ifc$m\_$zero.ifc$k\_$two = {3{s_n$i\[".($val3-1)."\-\:".($val3-3)."\]}};    // Invalid assign between ifc.ifc and repl expr\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    if($i <= 50) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  csl_port p_m$i($dir{$l},".($val1+$val2).");\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  b$k b$k\_$one;\n";
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  ifc$m ifc$m\_$one;\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  sg$m sg$m\_$one;\n";
	print FH "  sg$k sg$k\_$two;\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  ifc$m ifc$m\_$one;\n";
	print FH "  csl_signal s_a$i($val3);\n";
	print FH "  csl_signal s_b$i(".($val1+2).");\n";
	print FH "  csl_signal s_c$i(br2);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  sg$m sg$m\_$zero;\n";
    }
    print FH "  c$k () {\n";
#Invalid assign between sg.sg and p.ps - p
    if($i <= 50) {
	print FH "    sg$m\_$zero.sg$k\_$zero = p_m$i\[".($val1+$val2)."\:".($val2-1)."\];    // Invalid assign between sg.sg and p.ps - p\n";
    }
#Invalid assign between sg and p.ps - c, ifc.ifc and p.ps - c
    elsif($i > 50 && $i <= 100) {
	print FH "    sg$k\_$one = b$k\_$zero.p_n$i\[".($val2+2*$val1)."\:".($val1)."\];   // Invalid assign between sg and p.ps - c\n";
print FH "    ifc$m\_$one.ifc$k\_$one = b$k\_$one.p_n$i\[".($val2+2*$val1)."\:".(2*$val1)."\];   // Invalid assign between ifc.ifc and p.ps - c\n";
    }
#Invalid assign between sg.sg and op expr
    elsif($i > 100 && $i <= 150) {
	print FH "    sg$m\_$one.sg$k\_$one = sg$k\_$two.s_a$i\[".($val2)."\:".(2)."\] | sg$k\_$two.s_c$i;   // Invalid assign between sg.sg and op expr\n";
    }
#Invalid assign between ifc.ifc and concat expr
    elsif($i > 150 && $i <= 200) {
	print FH "    ifc$m\_$one.ifc$k\_$zero = {s_a$i\[".($val3)."\-\:".($val3-2)."\],s_b$i\[1\],s_c$i\[".($val2)."\:".(2)."\]};   // Invalid assign between ifc.ifc and concat expr\n";
    }
#Invalid assign between ifc and repl expr
    elsif($i > 200 && $i <= 250) {
	print FH "    ifc$k\_$one = {3{sg$m\_$zero.s_x$i\[2\],sg$m\_$zero.s_y$i\[".($val3)."\:".(3)."\]}};   // Invalid assign between ifc and repl expr\n";
    }
    print FH "  }\n";
    print FH "};\n\n";











}

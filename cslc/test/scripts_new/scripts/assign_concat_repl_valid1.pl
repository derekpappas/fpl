#!/usr/bin/perl

#Author Anamaria
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

print "Generated tests path : test/csl_test_gen/assign_concat_repl_valid1/\n";

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}


foreach (my $k = 1; $k <= 15; $k++) {
    my @a1 = ("p_a1_$k", "p_a2_$k", "p_a3_$k", "p_a4_$k", "p_a5_$k", "p_b1_$k", "p_b2_$k", "p_b3_$k", "p_b4_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_top_$k");
    my @a2 = ("p_a3_$k", "p_a4_4k", "p_b1_$k", "p_b3_$k", "p_top1_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_b3_$k", "s_top_$k");
    my @a3 = ("p_a1_$k", "p_a2_$k", "p_a3_$k", "p_a4_$k", "p_a5_$k", "p_b1_$k", "p_b2_$k", "p_b3_$k", "p_b4_$k", "p_top1_$k", "p_top2_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_top_$k");
    my $ctests;
    if($k <= 5) {   
        foreach my $u (@a1) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        }
    }
    elsif($k > 5 && $k <= 10) {
         foreach my $u(@a2) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        } 
     }
    elsif($k > 10 && $k <= 15) {
         foreach my $u(@a3) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        } 
     }
}
sub main {     
    my ($k, $ctests, $u) = @_; 
    my $test_name = "assign_concat_repl".$k."_".$u."_legal.csl";
    &createCslFile($test_name, $k, $ctests);
}
   
sub createCslFile {
    my($test_name, $k, $ctests) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen";
    my $val1 = 80;
    my $val2 = 50;
     
    my $val3 = $val1 + $val2;
    my $val4 = 2 * $val1 ;
    my $val5 = 2 * $val3 ;
    my $val6 = 2 * $val4 ;
    my $val7 = 2 * $val5 ;
    my $val8 = 3 * $val1;
    my $val9 = $val8 + $val6 + $val1;
    my $val10 = 2 * $val2 + $val1 + $val4; 
    if($test_name=~/(_legal)/){
        &mkDir("$path/assign_concat_repl_valid1");
        open(FH,">$path/assign_concat_repl_valid1/$test_name");
    }
  
    print FH "// Generated by  AnamariaH \n\n";
    
         
    print FH "csl_unit unit_a{ \n";
    
    
    if($k <= 5) {
	print FH "csl_signal s_a1_$k($val3);\n";
	print FH "csl_signal s_a2_$k($val1);\n";
	print FH "csl_port p_a1_$k(input, $val2);\n";
	print FH "csl_port p_a2_$k(input, $val2);\n";
	print FH "csl_port p_a3_$k(input, $val1);\n";
	print FH "csl_port p_a4_$k(output, $val1);\n";
	print FH "csl_port p_a5_$k(output, $val1);\n";
    }
    elsif($k > 5 && $k <= 10) {
	print FH "csl_signal s_a1_$k($val2);\n";
	print FH "csl_signal s_a2_$k($val2);\n";
	print FH "csl_port p_a3_$k(input, $val1);\n";
    }
    elsif($k > 10 && $k <= 15) {
	print FH "csl_signal s_a1_$k($val4);\n";
	print FH "csl_signal s_a2_$k($val1);\n";
	print FH "csl_signal s_a3_$k($val2); \n";
	print FH "csl_signal s_$k($val10);\n";
	print FH "csl_port p_$k(output, $val9); \n";
	print FH "csl_port p_a1_$k(input, $val1);\n";
	print FH "csl_port p_a2_$k(input, $val1);\n";
	print FH "csl_port p_a3_$k(input, $val1);\n";
	print FH "csl_port p_a4_$k(output, $val2);\n";
	print FH "csl_port p_a5_$k(output, $val2);\n";
    }
    elsif($k > 15 && $k <=20){
	print FH "csl_port p_a1_$k(input,$val4);\n";
	print FH "csl_port p_a2_$k(input,$val1) \n";
	print FH "csl_port p_a3_$k(input,$val1);\n";
	print FH "csl_port p_a4_$k(input,$val3);\n";
	print FH "csl_port p_a5_$k(output,$val3);\n";
	print FH "csl_port p_a6_$k(output,$val3);\n";
	print FH "csl_signal s_a1($val2);\n";
	print FH "csl_signal s_a2($val2);\n";
	print FH "csl_signal s_a3($val5);\n";
   
    }
    print FH "  unit_a() { \n"; 
    if($k <= 5) { 
	print FH "// Assign signal_and_concat_expression_of_ports in the same unit. \n \n";
	print FH "    s_a1_$k = {p_a1_$k && p_a2_$k , p_a3_$k} ; \n";
	print FH "    s_a2_$k = {p_a4_$k || p_a5_$k, p_a5_$k} ; \n";
	
    }
    elsif($k > 5 && $k <= 10) {
	print FH " //Assign port_and_concat_expression_of_signals in the same unit. \n \n"; 
	print FH "   p_a3_$k = {s_a1_$k ^ s_a2_$k , s_a2_$k && s_a1_$k} ;  \n";
	
    }
    elsif($k > 10 && $k <= 15) {
	print FH "// Assign port_or_signal_and_concat_in_concat_of_ports_and_signals in the same unit. \n \n";
	print FH " p_$k = {{p_a1_$k, p_a2_$k, p_a3_$k},{s_a1_$k, s_a2_$k, s_a3_$k}};\n"; 
	print FH " s_$k = {{s_a1_$k, s_a2_$k},{p_a4_$k, p_a5_$k}}; \n";
	print FH " {s_a1_$k, s_a2_$k} = {p_a1_$k, p_a2_$k, p_a3_$k};\n";
	print FH " {p_a1_$k, p_a3_$k} = s_a1_$k;\n";
	print FH " s_$k = {{p_a4_$k, p_a5_$k},{s_a1_$k, s_a2_$k}};\n";
	
    }
    elsif($k > 15 && $k <= 20){
	print FH " //Assign port_and_concat_in_concat_part_select in the same unit.\n";
	print FH " p_a1_$k = {{p_a2_$k\[25:0], p_a3_$k\[53:0]},{p_a3_$k\[79:54], p_a2_$k\[79:26]}};\n";
	print FH " p_a4_$k = {{p_a2_$k\[79:12], p_a3_$k\[13:0]},{s_a1_$k\[49:24], s_a2_$k\[49:26]}};\n";
	print FH " s_a5_$k = {{p_a5_$k\[99:0], p_a6_$k\[29:0]},{p_a6_$k\[129:30], p_a5_$k\[129:100]}};\n";
    }
    print FH " } \n";
    print FH "}; \n";

    
    print FH "csl_unit unit_b{ \n";
    
    if($k <= 5) {
	print FH "csl_signal s_b1_$k($val4);\n";
	print FH "csl_signal s_b2_$k($val4); \n";
	print FH "csl_port p_b1_$k(input, $val1);\n";
	print FH "csl_port p_b2_$k(input, $val1);\n";
	print FH "csl_port p_b3_$k(output, $val1);\n";
	print FH "csl_port p_b4_$k(output, $val1);\n";
    print FH "csl_signal s1_$k($val2);\n";
    print FH "csl_signal s2_$k($val2);\n";
    print FH "csl_signal s3_$k($val1);\n";
    print FH "csl_signal s4_$k($val1);\n";
    print FH "csl_signal s5_$k($val1);\n";
    print FH "  unit_a a_$k(.p_a1_$k(s1_$k),.p_a2_$k(s2_$k),.p_a3_$k(s3_$k),.p_a4_$k(s4_$k),.p_a5_$k(s5_$k));\n";
    }
    elsif($k > 5 && $k <= 10) {
	print FH "csl_signal s_b1_$k($val2);\n";
	print FH "csl_signal s_b2_$k($val2); \n";
	print FH "csl_signal s_b3_$k($val1); \n";
	print FH "csl_signal s_a1_$k($val2);\n";
	print FH "csl_signal s_a2_$k($val2);\n";
    print FH "csl_signal s3_$k($val1);\n";
	print FH "csl_port p_b1_$k(input, $val3);\n";
	print FH "csl_port p_b3_$k(output, $val1);\n";
    print FH "  unit_a a_$k(.p_a3_$k(s3_$k));\n";
    }
    elsif($k > 10 && $k <= 15) {
	print FH "csl_signal s_b1_$k($val4);\n";
	print FH "csl_signal s_b2_$k($val4); \n";
	print FH "csl_signal s_b3_$k($val1);\n";
	print FH "csl_signal s_b4_$k($val8); \n";
	print FH "csl_signal s_b5_$k($val1);\n";
	print FH "csl_port p_b1_$k(input, $val9);\n";
	print FH "csl_port p_b2_$k(input, $val3);\n";
	print FH "csl_port p_b3_$k(output, $val4);\n";
	print FH "csl_port p_b4_$k(output, $val4);\n";
	print FH "csl_port p_b5_$k(input, $val1);\n"; 
	print FH "csl_port p_b6_$k(input, $val2);\n";
    print FH "csl_signal s1_$k($val9);\n";
    print FH "csl_signal s2_$k($val1);\n";
    print FH "csl_signal s3_$k($val1);\n";
    print FH "csl_signal s4_$k($val1);\n";
    print FH "csl_signal s5_$k($val2);\n";
    print FH "csl_signal s6_$k($val2);\n";
    print FH "  unit_a a_$k(.p_$k(s1_$k),.p_a1_$k(s2_$k),.p_a2_$k(s3_$k),.p_a3_$k(s4_$k),.p_a4_$k(s5_$k),.p_a5_$k(s6_$k));\n";
    }
    elsif($k > 15 && $k <=20){
	print FH "csl_port p_b1_$k(input,$val10);\n";
	print FH "csl_port p_b2_$k(output,$val7) \n";
	print FH "csl_port p_b3_$k(output,$val3);\n";
	print FH "csl_port p_b4_$k(output,$val4);\n";
	print FH "csl_signal s_b1($val1);\n";
	print FH "csl_signal s_b2($val3);\n";
	print FH "csl_signal s_b3_$k($val1);\n";
    print FH "csl_signal s1_$k($val4);\n";
    print FH "csl_signal s2_$k($val1);\n";
    print FH "csl_signal s3_$k($val1);\n";
    print FH "csl_signal s4_$k($val3);\n";
    print FH "csl_signal s5_$k($val3);\n";
    print FH "csl_signal s6_$k($val3);\n";
 print FH "  unit_a a_$k(.p_a1_$k(s1_$k),.p_a2_$k(s2_$k),.p_a3_$k(s3_$k),.p_a4_$k(s4_$k),.p_a5_$k(s5_$k),.p_a6_$k(s6_$k));\n";

    }
#    print FH "   unit_a a0; \n";
    print FH "   unit_b() { \n"; 
    if($k <= 5) {    
	print FH "// Assign signal_and_concat_expression_of_ports in the same unit. \n \n";
	print FH "    s_b1_$k = {p_b3_$k ^ p_b4_$k , p_b3_$k && p_b4_$k } ; \n";
	print FH "    s_b2_$k = {p_b1_$k ^ p_b2_$k, p_b2_$k} ; \n";
	
    }
    elsif($k > 5 && $k <= 10) {
	print FH " //Assign port_and_concat_expression_of_signals in the same or different units.\n";
	print FH "   p_b1_$k = {s_b1_$k || s_b2_$k ,s_b3_$k} ; \n";
	print FH "   p_b3_$k = {s_b1_$k && s_a1_$k ,s_b2_$k && s_a2_$k} ; \n";
    }
    elsif($k > 10 && $k <= 15) {
	print FH "// Assign port_or_signal_and_concat_in_concat_of_ports_and_signals in the same unit. \n \n";
	print FH " p_b1_$k = {{s_b1_$k, s_b2_$k},{s_b3_$k, s_b4_$k}};\n"; 
	print FH " {s_b4_$k, s_b1_$k} = {{s_b3_$k, s_b5_$k},s_b4_$k}; \n";
	print FH " {s_b1_$k, s_b2_$k} = {p_b3_$k, p_b4_$k};\n";
	print FH " p_b2_$k = {p_b5_$k,p_b6_$k} ;\n";
    }
    elsif($k > 15 && $k <= 20){
	print FH " //Assign port_and_concat_in_concat_part_select in the same unit.\n";
	print FH " p_b1_$k = {{s_b1_$k\[59:0], s_b2_$k\[109:10]},{s_b1_$k\[29:10], s_b2_$k\[29:0]},{s_b2_$k\[49:30], s_b1_$k\[69:40]},{s_b2_$k\[129:100], s_b1_$k\[49:0]}};\n";
	print FH " p_b2_$k = {{p_b3_$k\[100:0], p_b4_$k\[28:0]},{p_b4_$k\[129:30], p_b3_$k\[130:101]},{p_b4_$k\[159:90], p_b3_$k\[59:0], p_b3_$k\[129:70], p_b4_$k\[69:0]}};\n";
    }
    
    print FH " } \n";
    print FH "}; \n";
    
    print FH "csl_unit unit_top{ \n";
    
    if($k <= 5) {
	print FH "csl_signal s_top_$k($val4); \n";
#	print FH "csl_signal s1_$k($val1); \n";
#	print FH "csl_signal s2_$k($val1); \n";
	print FH "csl_port p_a4_$k(output, $val1);\n";
	print FH "csl_port p_a5_$k(output, $val1);\n";
	print FH "csl_port p_b3_$k(output, $val1);\n";
	print FH "csl_port p_b4_$k(output, $val1);\n";
    print FH "csl_signal s1_$k($val1);\n";
    print FH "csl_signal s2_$k($val1);\n";
    print FH "csl_signal s3_$k($val1);\n";
    print FH "csl_signal s4_$k($val1);\n";

 print FH "  unit_b b_$k(.p_b1_$k(s1_$k),.p_b2_$k(s2_$k),.p_b3_$k(s3_$k),.p_b4_$k(s4_$k)); \n";
  
    }
    elsif($k > 5 && $k <= 10) {
	print FH "csl_port p_top1_$k(output, $val5); \n";
	print FH "csl_signal s_top_$k($val3); \n";
#	print FH "csl_signal s11_$k($val2); \n";
#	print FH "csl_signal s21_$k($val2); \n";
#	print FH "csl_signal s31_$k($val4); \n";
	print FH "csl_signal s_a1_$k($val2);\n";
	print FH "csl_signal s_a2_$k($val2);\n";
	print FH "csl_signal s_b2_$k($val2); \n";
    print FH "csl_signal s1_$k($val3);\n";
    print FH "csl_signal s2_$k($val1);\n";

 print FH "  unit_b b_$k(.p_b1_$k(s1_$k),.p_b3_$k(s2_$k)); \n";

    }
    elsif($k > 10 && $k <= 15) {
	print FH "csl_port p_top1_$k(input, $val5); \n"; 
#	print FH "csl_port p_top2_$k(output, $val4); \n"; 
	print FH "csl_signal s_top1_$k(710); \n";
	print FH "csl_signal s_a2_$k($val1);\n";
	print FH "csl_signal s_a3_$k($val2); \n";
	print FH "csl_port p_a1_$k(input, $val1);\n";
	print FH "csl_port p_a2_$k(input, $val1);\n";
	print FH "csl_port p_a3_$k(input, $val1);\n";
	print FH "csl_signal s_b3_$k($val1);\n";
	print FH "csl_port p_b2_$k(input, $val3);\n";
	print FH "csl_port p_b5_$k(input, $val1);\n"; 
	print FH "csl_port p_b6_$k(input, $val2);\n";
    print FH "csl_signal s1_$k($val9);\n";
    print FH "csl_signal s2_$k($val3);\n";
    print FH "csl_signal s3_$k($val4);\n";
    print FH "csl_signal s4_$k($val4);\n";
    print FH "csl_signal s5_$k($val1);\n";
    print FH "csl_signal s6_$k($val2);\n";

 print FH "  unit_b b_$k(.p_b1_$k(s1_$k),.p_b2_$k(s2_$k),.p_b3_$k(s3_$k),.p_b4_$k(s4_$k),.p_b5_$k(s5_$k),.p_b6_$k(s6_$k)); \n";
    }
    elsif($k > 15 && $k <= 20){
	print FH "csl_port p_top1_$k(input, $val5); \n"; 
	print FH "csl_port p_top2_$k(output, $val4); \n"; 
	print FH "csl_port p_a4_$k(input,$val3);\n";
	print FH "csl_port p_a5_$k(output,$val3);\n";
	print FH "csl_signal s_a1($val2);\n";
	print FH "csl_signal s_a2($val2);\n";
	print FH "csl_port p_b3_$k(output,$val3);\n";
	print FH "csl_port p_b4_$k(output,$val4);\n";
	print FH "csl_signal s_b1($val1);\n";
	print FH "csl_signal s_b3_$k($val1);\n";
    print FH "csl_signal s1_$k($val10);\n";
    print FH "csl_signal s2_$k($val7);\n";
    print FH "csl_signal s3_$k($val3);\n";
    print FH "csl_signal s4_$k($val4);\n";

 print FH "  unit_b b_$k(.p_b1_$k(s1_$k),.p_b2_$k(s2_$k),.p_b3_$k(s3_$k),.p_b4_$k(s4_$k)); \n";
    }
    
   
 #   print FH "  unit_a a1; \n";
    print FH "  unit_top() { \n";  
    if($k <= 5) { 
	print FH "// Assign signal_and_concat_expression_of_ports from different units. \n \n";
	print FH "    s_top_$k = {p_a4_$k || p_a5_$k, p_b3_$k && p_b4_$k } ; \n";
	
    }
    elsif($k > 5 && $k <= 10) {
	print FH " //Assign port_and_concat_expression_of_signals from different units. \n \n";
	print FH "   p_top1_$k = {s_a1_$k && s_a2_$k, s_a1_$k || s_a2_$k, s_b2_$k ^ s_top_$k} ; \n";
	
    }
    elsif($k > 10 && $k <= 15) {
	print FH "// Assign port_or_signal_and_concat_in_concat_of_ports_and_signals from different units. \n \n";
	print FH " p_top1_$k = {{s_a2_$k, p_b6_$k},{s_a3_$k, p_b5_$k}};\n"; 
	print FH " s_top1_$k = {{p_a1_$k, p_a2_$k, p_a3_$k, p_b5_$k},{s_a3_$k, p_b6_$k, p_b2_$k, p_b5_$k, s_b3_$k}}; \n";
	
    }
    elsif($k > 15 && $k <= 20){
	print FH " //Assign port_and_concat_in_concat_part_select from different units.\n";
	print FH " p_top1_$k = {{s_a1_$k\[109:0], s_b3_$k\[19:0]},{s_b1_$k\[159:80], s_a2_$k\[29:0], s_b3_$k\[29:10]}};\n";
	print FH " p_top2_$k = {{p_b4_$k\[129:0], p_a4_$k\[29:0]},{p_a5_$k\[49:0], p_b3_$k\[119:10]}};\n";
    }
    
    
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    close(FH);
    
}


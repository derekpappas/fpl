#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print " the path for generated tests is: $path"."conn_pattern_replication_units_invalid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}


sub word {
    my $val = $_[0];
    my @alpha = ('a'..'z','A'..'Z');
    my @alphanumeric = ('a'..'z','A'..'Z','0'..'9');
    my $ret = $alpha[rand @alpha]."zz";
    for(my $i=1;$i < $val; ++$i){
        $ret = $ret.$alphanumeric[rand @alphanumeric];
    }
    return $ret;
}

my @units = ("fifo","register","register_file","memory");
foreach my $unit(@units){
    for (my $i = 1; $i <= 45; ++$i ) {
        &main($i,$unit);   
    }
}

sub main {
    my ($i,$unit) = @_;
    my $test_name = "conn_pattern_replication_units$i"."_".$unit."_illegal.csl";
    &createCslFile($test_name,$i,$unit);
}

sub createCslFile {
    my($test_name,$i,$unit) = @_;
    my $val = int(rand(20)) + 1;
    my $val2 = 2 * $val;
    my $val3 = 3 * $val;
    my $val4 = 4 * $val;
    my $val5 = 5 * $val;
    my $val6 = 6 * $val; 
    my $word = &word($val);
    my $word1 = &word($val2);
    my $word2 = &word($val);
    my $word3 = &word($val2);
    my $word4 = &word($val3);
    my $word5 = &word($val4);
    my $word6 = &word($val5);
    my $word7 = &word($val3);
    my $word8 = &word($val5);
    my $word9 = &word($val3);
    my $word10 = &word($val4);
    my $word11 = &word($val5);
    my $word12 = &word($val3);
    my $word13 = &word($val5);
    &mkDir("$path/conn_pattern_replication_units_invalid");
    open(FH,">$path/conn_pattern_replication_units_invalid/$test_name");
    print FH "//Generated by Petronela\n";
    print FH "//testing the cmd connect_by_pattern for connections unit,fifo,register,register_file,memeory to replication exp.,sg[+.sg] to replication expr. \n\n";
    print FH "csl_bitrange br($val);\n";
    print FH "csl_bitrange brt($val2);\n";
    print FH "csl_$unit ua {\n";
    print FH "  ua(){\n";
    print FH "    set_width($val4);\n";
    if($unit ne "register"){
        print FH "    set_depth($val);\n";
    }
    else{
        print FH "    set_type(register);\n";
    }  
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit ub {\n";
    print FH "  ub(){\n";
    print FH "    set_width($val4);\n";
    if($unit ne "register"){
        print FH "    set_depth($val);\n";
    }
    else{
        print FH "    set_type(register);\n";
    }  
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_unit a {\n";
    print FH "  ua ua1;\n";
    print FH "  ub ub1;\n";
    print FH "  ua ua0;\n";
    print FH "  ub ub0;\n";
    if($i <= 15) {
        print FH "  csl_port p_a$i(input,$val);\n"; 
        print FH "  csl_port pa(input,$val3);\n";
        print FH "  csl_port p_a_br$i(input,brt);\n";
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_signal sa($val2);\n";
        print FH "  csl_signal s_a$i($val4);\n";
    }
    elsif($i > 15 && $i <= 30) {
        print FH "  csl_port p_a$i(output,$val6);\n"; 
        print FH "  csl_port pa(input,$val5);\n";
        print FH "  csl_port p(output,$val5);\n";
        print FH "  csl_signal s_a$i($val4);\n";
        print FH "  csl_signal s_a_br$i(brt);\n";
        print FH "  csl_signal sa($val2);\n";
    }
    elsif($i > 30) {
        print FH "  csl_port p_a$i(input,$val2);\n"; 
        print FH "  csl_port p_a_br$i(input,brt);\n";
        print FH "  csl_port pa(input,$val2);\n";
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_signal s_a$i($val3);\n";
        print FH "  csl_signal sa($val2);\n";
    }
    print FH "  a() {\n";                
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_unit b {\n";  
    print FH "  a a0;\n";
    print FH "  a a1;\n";
    print FH "  ua ua3;\n";
    print FH "  ub ub3;\n";
    print FH "  ua ua2;\n";
    print FH "  ub ub2;\n";
    if($i <= 15) {
        print FH "  csl_port p_b$i(input,$val3);\n";
        print FH "  csl_port p(input,$val3);\n";
        print FH "  csl_port pb(input,$val);\n";
        print FH "  csl_signal s_b_br$i($val5);\n";
        print FH "  csl_signal s_b$i($val6);\n";
        print FH "  csl_signal sb($val6);\n";
    }
    elsif($i > 15 && $i <= 30) {      
        print FH "  csl_port p_b$i(output,$val);\n";
        print FH "  csl_port pb(output,$val4);\n";
        print FH "  csl_port p_b_br$i(output,brt);\n";
        print FH "  csl_port p(output,$val2);\n";
        print FH "  csl_signal s_b$i($val);\n";
        
    }
    elsif($i > 30) {      
        print FH "  csl_port p_b$i(output,$val);\n";
        print FH "  csl_port p_b_br$i(input,brt);\n";
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_signal s_b$i($val2);\n";
        print FH "  csl_signal s_b_br$i(br);\n";
        print FH "  csl_signal sb($val3);\n";
    }
    print FH "  b() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";  
    print FH "  a a0;\n";
    print FH "  b b0;\n";
    print FH "  b b1;\n";
    print FH "  ua ua4;\n";
    print FH "  ub ub4;\n";
    print FH "  ua ua5;\n";
    print FH "  ub ub5;\n";
    if($i <= 15) {
        print FH "  csl_port p_c$i(input,$val5);\n";
        print FH "  csl_port pc(input,$val6);\n";
        print FH "  csl_port p_c_br$i(output,brt);\n";
        print FH "  csl_port p(input,$val);\n";
        print FH "  csl_signal s_c$i($val2);\n";
        print FH "  csl_signal sc($val4);\n";
    }
    elsif($i > 15 && $i <= 30 ) {      
        print FH "  csl_port p_c$i(output,$val2);\n";
        print FH "  csl_port p(output,$val3);\n";
        print FH "  csl_port pc(input,$val);\n";
        print FH "  csl_signal sc($val3);\n";
        print FH "  csl_signal s_c_br$i(brt);\n";
        print FH "  csl_signal s_c$i($val2);\n";
    }
    elsif($i > 30) {      
        print FH "  csl_port pc(input,$val);\n";
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_port p_c_br$i(input,brt);\n";
        print FH "  csl_signal s_c$i($val);\n";
        print FH "  csl_signal sc($val3);\n";
    }
    print FH "  c() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    print FH "  a a0;\n";
    print FH "  c c1;\n";
    print FH "  c c0;\n"; 
    print FH "  ua ua6;\n";
    print FH "  ub ub6;\n";
    print FH "  ua ua7;\n";
    print FH "  ub ub7;\n";
    if($i <= 15) {
        print FH "  csl_port p_d$i(input,$val3);\n"; 
        print FH "  csl_port p_d_br$i(input,br);\n";
        print FH "  csl_port p(input,$val);\n";
        print FH "  csl_signal s_d_br$i($val);\n";
        print FH "  csl_signal s_d$i($val);\n";
    }
    elsif($i > 15 && $i <= 30) {      
        print FH "  csl_port p_d$i(output,$val);\n";
        print FH "  csl_port p(output,$val3);\n";
        print FH "  csl_port pd(output,$val);\n";
        print FH "  csl_signal s_d$i($val);\n";
        
    }
    elsif($i > 30) {      
       print FH "  csl_port p_d$i(input,$val);\n";
       print FH "  csl_port p(input,$val3);\n";
       print FH "  csl_signal s($val2);\n";
       print FH "  csl_signal s_d$i($val);\n";
       print FH "  csl_signal s_d_br$i($val6);\n";
       print FH "  csl_signal sd($val5);\n";
    }
    print FH "  d() {\n";
    if($i <= 15) {
        print FH "    c0.ua5.connect_by_pattern({5{b0.a0.p_a$i}},$word);\n";
        print FH "    a0.ub0.connect_by_pattern({3{c0.c0.a1.p,c0.b0.a0.p_a_br$i}},$word1);\n";
        print FH "    c0.connect_by_pattern({5{b0.a0.p_a$i}},$word2);\n";
    }
    elsif($i > 15 && $i <= 30) {
        print FH "    c1.ub5.connect_by_pattern({6{p_d$i}},$word);\n";
        print FH "    c0.b0.ua3.connect_by_pattern({5{d.p}},$word1);\n";
        print FH "    c0.b1.connect_by_pattern({2{c1.b1.a0.s_a$i,c1.b1.a0.s_a_br$i}},$word2);\n";
    }
    elsif($i > 30) {
        print FH "    c0.b0.a0.ua1.connect_by_pattern(3{c0.pc},$word);\n";
        print FH "    c1.ub3.connect_by_pattern({2{s_d_br$i}},$word1);\n";
    }
    
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    

    print FH "csl_unit e {\n";  
    print FH "  b b0;\n";
    print FH "  d d0;\n";
    print FH "  d d1;\n";
    print FH "  ua ua8;\n";
    print FH "  ub ub8;\n";
    print FH "  ua ua9;\n";
    print FH "  ub ub9;\n";
    if($i <= 15 ) {
        print FH "  csl_port p_e$i(input,$val);\n"; 
        print FH "  csl_port p_e_br$i(input,brt);\n";   
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_signal s_e$i($val6);\n";
        print FH "  csl_signal se($val);\n";
        print FH "  csl_signal s_e_br$i(br);\n";
        print FH "  csl_signal s($val5);\n";
    }
    elsif($i > 15 && $i <= 30) {      
        print FH "  csl_port p_e$i(output,$val);\n";    
        print FH "  csl_port p(output,$val4);\n";
        print FH "  csl_port p_e_br$i(output,brt);\n";
        print FH "  csl_signal s_e$i($val);\n";
        print FH "  csl_signal s_e_br$i($val);\n";
    }
    elsif($i > 30) {      
        print FH "  csl_port p_e$i(input,$val);\n";
        print FH "  csl_port p(input,$val);\n";
        print FH "  csl_port pe(input,$val3);\n";
        print FH "  csl_signal se($val3);\n";
    }
    print FH "  e() {\n";
    if($i <= 15) {
        print FH "    d0.c0.a0.ua0.connect_by_pattern({2{c0.b0.p_b$i,c0.b0.p}},$word2);\n";
        print FH "    ub8.connect_by_pattern({3{c0.b1.sb}},$word3);\n";
        print FH "    b0.connect_by_pattern({3{c0.b0.p_b$i,c0.b0.p}},$word4);\n";
    }
    elsif($i > 15 && $i <= 30) {
        print FH "    b0.a1.ub1.connect_by_pattern({5{c0.b0.a1.s_a$i}},$word2);\n";
        print FH "    d1.c0.b1.ub3.connect_by_pattern({2{c0.b1.p_b$i}},$word3);\n";
    }
    elsif($i > 30) {
        print FH "    ua8.connect_by_pattern({6{c0.b0.pb}},$word2);\n";
        print FH "    d1.c0.ub4.connect_by_pattern({6{d0.c1.b1.p_b$i}},$word3);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    print FH "  d d0;\n";
    print FH "  e e0;\n"; 
    print FH "  d d1;\n";
    print FH "  e e1;\n";
    print FH "  ua ua10;\n";
    print FH "  ub ub10;\n";
    print FH "  ua ua11;\n";
    print FH "  ub ub11;\n";
    if($i <= 15) {
        print FH "  csl_port ptop(input,$val);\n";
        print FH "  csl_port p(input,$val2);\n";
        print FH "  csl_signal s_top$i($val);\n";
        print FH "  csl_signal stop($val2);\n";
    }
    elsif($i > 15 && $i <= 30) {
        print FH "  csl_port p_top$i(output,$val3);\n";      
        print FH "  csl_port p(output,$val);\n";
        print FH "  csl_port ptop(output,$val);\n"; 
        print FH "  csl_signal stop($val);\n";
        print FH "  csl_signal s_top$i($val);\n";
    }
    elsif($i > 30) {
        print FH "  csl_port p_top$i(input,$val5);\n";      
        print FH "  csl_port p(input,$val);\n";
        print FH "  csl_port ptop(input,$val6);\n";
        print FH "  csl_signal s_top$i($val);\n";
        print FH "  csl_signal s_top_br$i(br);\n";
        print FH "  csl_signal stop($val);\n";
    }
    
    print FH "  top(){\n";
    if($i <= 15) {
        print FH "    ua11.connect_by_pattern({2{c0.b0.p_b$i,c0.b0.p}},$word5);\n";
        print FH "    e1.d0.c0.b0.a1.ub1.connect_by_pattern({3{c0.b1.sb}},$word6);\n";
        print FH "    d0.connect_by_pattern({5{c0.b1.sb}},$word7);\n";
    }
    elsif($i > 15 && $i <= 30) {
        print FH "    e0.d0.c0.connect_by_pattern({5{c0.b0.a1.s_a$i}},$word5);\n";
        print FH "    d0.ub6.connect_by_pattern({2{c0.b1.p_b$i}},$word6);\n";
        print FH "    e1.b0.ua3.connect_by_pattern({4{c0.b1.p_b$i}},$word7);\n";
    }
    elsif($i > 30) {
        print FH "    d1.c0.a0.ua0.connect_by_pattern({6{c0.b0.pb},$word5);\n";
        print FH "    ub10.connect_by_pattern({6{d0.c1.b1.p_b$i}},$word6);\n";
        print FH "    d0.c0.connect_by_pattern({6{d0.c1.b1.p_b$i}},$word7);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

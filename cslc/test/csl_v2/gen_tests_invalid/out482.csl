csl_enum hl {
	vx,
	cb,
	st,
	eb,
	ru,
	vc,
	yk
};
csl_enum mr {
	df,
	bw,
	ku,
	tu,
	ms,
	ch,
	ak,
	uv,
	ix,
	xb,
	tc,
	eo,
	ya
};
csl_enum qy {
	nf,
	sq,
	kv,
	ox,
	qi,
	sg,
	dx,
	pd,
	kl,
	cu,
	jc,
	wf,
	gd,
	tf
};
csl_isa_instruction_format li{
    li( ){
     set_width( 1);
     generate_decoder( ibjg);
  }
}
;
csl_isa hf{
    hf( ){
     set_decoder_name( "xy");
     set_decoder_out_name_prefix( "ml");
     set_decoder_out_name_suffix( "lf");
     generate_decoder( ibjg);
     print( isa.txt);
  }
}
;
csl_fifo pc{
   pc( ){
     add_logic( depth_extend, 2);
     add_logic( width_extend, 5);
     add_logic( wr_words, 9);
  }
}
;
csl_memory_map_page sx{
    sx( ){
     get_aligment( );
  }
}
;
csl_memory_map_page ue{
    ue( ){
     set_next_address( 6);
     get_next_address( );
     add_reserved_address_range( 0, 1);
     set_data_word_width( 0);
     set_endianess( big_endian);
  }
}
;
csl_memory_map_page sc{
    sc( ){
     add_address_range( 0, 2);
     set_next_address( 2);
     set_access_rights( access_read_write, access_write);
     add_reserved_address_range( 3, 1);
     add( pc, "hp");
     get_lower_bound( );
     set_data_word_width( 5);
     set_aligment( 5);
     get_aligment( );
     set_endianess( little_endianbig_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map ut{
  sx fi;
  sx tt;
  sc os;
  sx um;
  ue pj;
    ut( ){
     set_top_unit( dsatib);
     set_prefix( ln);
  }
}
;
csl_register gk{
    gk( ){
     set_width( 6);
     constant( 5);
     add_logic( neg_output);
     add_logic( serial_input);
     add_logic( wr_en);
     init_value( 3);
     reset_value( 8);
     clear_value( 6);
     set_lock_enable_bit( 5);
     get_lock_enable_bit( );
     set_count_amount( 8);
     stop_at_end_value( );
  }
}
;
csl_register bu{
    bu( ){
     set_width( 0);
     get_width( );
     set_depth( 6);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 1);
  }
}
;

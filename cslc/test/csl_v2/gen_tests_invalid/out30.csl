csl_enum mc {
	rd,
	yg,
	ma,
	ac,
	uq,
	iy,
	gn,
	sp,
	kw,
	dr,
	pw,
	cr,
	ti
};
csl_enum bl {
	ip = 85,
	qc = 3,
	up = 5,
	ij = 80,
	ri = 77
};
csl_enum ln {
	cv,
	oi,
	li,
	bv,
	fg,
	nw,
	dr,
	oa,
	ar,
	li,
	he,
	kd,
	tv,
	mo,
	gb,
	ci
};
csl_isa_instruction_format kg{
    kg( ){
     generate_decoder( hftgxx);
  }
}
;
csl_isa ex{
    ex( ){
     set_decoder_name( "qw");
     set_decoder_out_name_prefix( "rk");
     set_decoder_out_name_suffix( "sw");
     generate_decoder( gdtg);
     print( isa.txt);
  }
}
;
csl_fifo rg{
   rg( ){
     add_logic( wr_hold, 5);
     add_logic( almost_empty, 3);
  }
}
;
csl_memory_map_page dj{
    dj( ){
     set_address_increment( 0);
     get_address_increment( );
     set_next_address( 0);
     set_access_rights( access_read, none);
     add_reserved_address_range( 2, 9);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 3);
     get_data_word_wodth( );
     set_aligment( 5);
     get_aligment( );
     set_endianess( big_endianbig_endian);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page dt{
  dj yv;
  dj me;
  dj ai;
    dt( ){
     get_address_increment( );
     get_data_word_wodth( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page gb{
    gb( ){
     add_address_range( 2, 6);
     get_address_increment( );
     set_access_rights( none, none);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 4);
     get_aligment( );
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map eb{
  dj io;
  dt xg;
  gb ws;
  dj fq;
  dt du;
    eb( ){
     auto_gen_memory_map( );
     set_top_unit( gdtg);
     set_type( hierach);
djdtgb.set_access_rights_enum( gb); 
     set_data_word_width( 8);
     get_data_word_width( );
     set_suffix( fs);
  }
}
;
csl_register um{
    um( ){
     set_address( eb, );
     add_logic( serial_input);
     clear_value( 8);
     add_logic( gray_output);
     set_count_direction( 9);
     set_end_value( 2);
     set_start_value( 2);
     add_logic( cnt_dir_signal);
     get_cnt_dir_signal( );
     add_logic( inc_signal);
  }
}
;
csl_register qn{
    qn( ){
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

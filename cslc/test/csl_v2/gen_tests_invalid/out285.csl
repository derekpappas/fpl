csl_enum pm {
	wu = 60,
	lm = 8,
	dx = 69,
	ls = 88,
	wj = 60
};
csl_enum tk {
	cc = 73,
	nb = 67,
	ug = 55,
	uf = 14,
	kb = 41
};
csl_enum mc {
	kl,
	xo,
	mp,
	dl,
	mq,
	ys,
	om,
	no
};
csl_isa_instruction_format hd{
    hd( ){
     generate_decoder( ss);
  }
}
;
csl_isa ji{
    ji( ){
     set_decoder_name( "ol");
     set_decoder_out_name_prefix( "wo");
     set_decoder_out_name_suffix( "xj");
     generate_decoder( iw);
     print( isa.txt);
  }
}
;
csl_fifo so{
   so( ){
     add_logic( programable_depth, 3);
     add_logic( depth_extend, 9);
     add_logic( width_extend, 8);
     add_logic( stall_wr_side);
     add_logic( rd_credit);
     add_logic( flow);
  }
}
;
csl_memory_map_page ex{
    ex( ){
     add_address_range( 4, 3);
     set_next_address( 1);
     set_access_rights( none, access_read);
     add_reserved_address_range( 5, 9);
     get_lower_bound( );
     set_data_word_width( 6);
     get_data_word_wodth( );
     set_aligment( 5);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page un{
    un( ){
     add_address_range( 7, 6);
     get_address_increment( );
     set_access_rights( access_read_write, access_read);
     add( so, "cj");
     get_upper_bound( );
     set_data_word_width( 0);
     get_data_word_wodth( );
     set_aligment( 3);
     get_aligment( );
     set_endianess( little_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page ny{
  ex ru;
  un ms;
  un jc;
  un uu;
    ny( ){
     set_address_increment( 5);
     get_address_increment( );
     set_access_rights( none, access_read_write);
     get_upper_bound( );
     set_aligment( 9);
     set_endianess( little_endian);
  }
}
;
csl_memory_map sv{
  ny gs;
  ex le;
  ny xs;
  ex lc;
  un qh;
    sv( ){
     auto_gen_memory_map( );
     set_top_unit( iwwr);
exun.add_to_memory_map( 8,access_write); 
     set_type( hierach);
exun.set_access_rights_enum( ny); 
     set_data_word_width( 5);
     get_data_word_width( );
     set_prefix( bv);
     get_prefix( );
     set_suffix( ls);
  }
}
;
csl_register iv{
    iv( ){
     set_range( {[2:1], [4:0], [0:9], [6:9], [7:6]});
     set_type( EVNT);
     set_width( 0);
     index_data_pair( sv, 1);
     get_atributes( );
     add_logic( neg_output);
     add_logic( serial_output);
     add_logic( rd_en);
     init_value( 5);
     set_value( 4);
     add_logic( gray_output);
     add_logic( dec_signal);
  }
}
;
csl_register em{
    em( ){
     set_width( 4);
     get_width( );
     set_depth( 4);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 7);
     add_logic( bypass);
  }
}
;

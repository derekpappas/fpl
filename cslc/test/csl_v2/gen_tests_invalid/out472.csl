csl_enum bc {
	ns,
	dx,
	nq,
	gr,
	xv,
	rn,
	vx,
	qx,
	vj,
	vn,
	jd
};
csl_enum lr {
	pw = 90,
	qp = 91,
	yu = 35,
	rm = 36,
	nw = 18,
	nd = 39
};
csl_isa_instruction_format qi{
    qi( ){
     set_width( 8);
     generate_decoder( unbwsc);
  }
}
;
csl_isa_instruction hv : qi{
    hv( ){
    set_asm_mnemonic( csl_list "et", "in", "nq", "pq", "hg");
  }
}
;
csl_isa_instruction fo : qi{
    fo( ){
  }
}
;
csl_isa uo{
  hv ei;
  fo jq;
  hv bd;
  fo ak;
  hv ud;
  hv qd;
  fo cc;
  hv py;
  fo cy;
  fo ai;
  hv fl;
  fo kn;
  hv ah;
  fo rf;
  fo jt;
  hv mc;
  fo wh;
  hv kq;
  fo bk;
  hv ip;
  fo ue;
  fo lr;
  hv ul;
  fo fa;
  hv ro;
  fo bn;
    uo( ){
     set_decoder_name( "rq");
     set_decoder_out_name_prefix( "wd");
     set_decoder_out_name_suffix( "jn");
     generate_decoder( unbmbw);
     print( isa.txt);
  }
}
;
csl_fifo bu{
   bu( ){
     add_logic( programable_depth, 2);
     add_logic( credit);
     add_logic( rd_credit);
  }
}
;
csl_memory_map_page pu{
    pu( ){
     set_address_increment( 2);
     get_next_address( );
     get_lower_bound( );
     get_upper_bound( );
     get_aligment( );
  }
}
;
csl_memory_map_page mp{
  pu cn;
    mp( ){
     add_address_range( 0, 0);
     set_address_increment( 4);
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_read, access_write);
     get_lower_bound( );
     get_data_word_wodth( );
     set_endianess( big_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page nc{
    nc( ){
     set_next_address( 5);
     set_access_rights( access_write, none);
     set_data_word_width( 8);
     set_aligment( 9);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map je{
    je( ){
     auto_gen_memory_map( );
     set_top_unit( unsc);
pump.add_to_memory_map( access_write); 
     set_type( page);
pump.set_access_rights_enum( nc); 
     set_data_word_width( 6);
     get_data_word_width( );
     set_prefix( mj);
     set_suffix( gh);
  }
}
;
csl_register ip{
    ip( ){
     set_width( 8);
     add_logic( rd_en);
     reset_value( 5);
     set_lock_enable_bit( 0);
     add_logic( gray_output);
     set_count_direction( 1);
     add_logic( cnt_dir_signal);
     add_logic( inc_signal);
  }
}
;
csl_register gj{
    gj( ){
     set_width( 6);
     get_width( );
     set_depth( 9);
     create_rtl_module( );
     set_const_value( 0);
     add_logic( bypass);
  }
}
;

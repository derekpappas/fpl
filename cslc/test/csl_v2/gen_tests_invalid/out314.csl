csl_enum ey {
	it,
	aj,
	xi,
	au,
	ah,
	vf,
	xk,
	yk,
	gn
};
csl_enum fr {
	dm,
	kn,
	hh,
	bt,
	jh,
	sr
};
csl_enum cu {
	ba = 67,
	dd = 40,
	wf = 1,
	mu = 70
};
csl_isa_instruction_format ob{
    ob( ){
     set_width( 8);
     generate_decoder( bhvyua);
  }
}
;
csl_isa xe{
    xe( ){
     set_decoder_name( "hb");
     set_decoder_out_name_prefix( "yr");
     set_decoder_out_name_suffix( "tx");
     generate_decoder( xhbh);
     print( isa.txt);
  }
}
;
csl_fifo nh{
   nh( ){
     add_logic( programable_depth, 4);
  }
}
;
csl_memory_map_page nt{
    nt( ){
     get_address_increment( );
     get_next_address( );
     add_reserved_address_range( 4, 6);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     get_aligment( );
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page fv{
  nt jx;
  nt mn;
  nt im;
    fv( ){
     set_address_increment( 6);
     get_address_increment( );
     get_next_address( );
     add( nt);
     get_data_word_wodth( );
     set_endianess( little_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page xc{
    xc( ){
     add_address_range( 7, 7);
     set_address_increment( 8);
     get_address_increment( );
     get_aligment( );
     set_endianess( big_endian);
  }
}
;
csl_memory_map lw{
  nt sh;
  xc uc;
  fv ea;
  fv ci;
    lw( ){
     auto_gen_memory_map( );
     set_type( hierach);
     set_data_word_width( 7);
     get_data_word_width( );
  }
}
;
csl_register xj{
    xj( ){
     constant( 4);
     add_logic( serial_input);
     add_logic( rd_en);
     reset_value( 4);
     clear_value( 6);
     add_logic( gray_output);
     set_count_amount( 0);
     set_count_direction( 0);
     set_end_value( 0);
  }
}
;
csl_register om{
    om( ){
     add_logic( read_valid);
     create_rtl_module( );
  }
}
;

csl_enum xh {
	ej,
	qf,
	iq,
	ir,
	oo
};
csl_enum rb {
	id,
	dc,
	oh,
	pp,
	fu,
	ia,
	lp,
	ik
};
csl_enum xj {
	tc,
	uk,
	jd,
	er,
	ws,
	gq,
	wr,
	va
};
csl_isa_instruction_format mx{
    mx( ){
     generate_decoder( cn);
  }
}
;
csl_isa yw{
    yw( ){
     set_decoder_name( "fn");
     set_decoder_out_name_prefix( "ip");
     set_decoder_out_name_suffix( "jg");
     generate_decoder( sp);
     print( isa.txt);
  }
}
;
csl_fifo ko{
   ko( ){
     add_logic( stall_rd_side);
     add_logic( credit);
     add_logic( wr_credit);
  }
}
;
csl_memory_map_page md{
    md( ){
     set_address_increment( 1);
     get_address_increment( );
     get_next_address( );
     set_access_rights( none, access_read_write);
     add_reserved_address_range( 4, 7);
     add( ko, "bh");
     get_upper_bound( );
     set_aligment( 2);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page gj{
  md he;
  md sy;
    gj( ){
     get_address_increment( );
     set_next_address( 1);
     get_next_address( );
     add_reserved_address_range( 4, 9);
     add( ko, "fs");
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 8);
     get_data_word_wodth( );
     set_aligment( 8);
     get_aligment( );
     set_endianess( big_endianbig_endian);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map yk{
    yk( ){
     auto_gen_memory_map( );
     set_type( hierach);
  }
}
;
csl_register ex{
    ex( ){
     set_type( STATIC);
     set_width( 6);
     set_address( yk, );
     add_logic( serial_input);
     add_logic( rd_en);
     set_count_amount( 7);
     set_end_value( 4);
     set_start_value( 43);
     stop_at_end_value( );
  }
}
;
csl_register rq{
    rq( ){
     set_depth( 0);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

csl_enum do {
	xp,
	wh,
	bx,
	bh,
	ly,
	sx,
	vu,
	ol
};
csl_enum nh {
	mj = 12,
	dd = 1,
	fi = 39,
	ds = 67,
	hh = 79,
	dm = 54,
	vd = 13,
	ds = 34,
	ke = 14,
	sl = 90,
	ne = 37
};
csl_enum kh {
	cj = 6,
	eq = 58,
	ur = 49,
	ah = 50
};
csl_isa_instruction_format cr{
    cr( ){
     set_width( 8);
     generate_decoder( lw);
  }
}
;
csl_isa dn{
    dn( ){
     set_decoder_name( "xh");
     set_decoder_out_name_prefix( "dm");
     set_decoder_out_name_suffix( "xq");
     generate_decoder( vvlw);
     print( isa.txt);
  }
}
;
csl_fifo mi{
   mi( ){
     add_logic( parallel_output, all);
     add_logic( wr_release);
  }
}
;
csl_memory_map_page ma{
    ma( ){
     add_address_range( 1, 0);
     set_address_increment( 0);
     set_next_address( 7);
     get_next_address( );
     add_reserved_address_range( 2, 1);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_endianess( big_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page xg{
  ma yb;
  ma qf;
    xg( ){
     add_address_range( 1, 9);
     get_next_address( );
     set_access_rights( none, access_read_write);
     add_reserved_address_range( 7, 4);
     add( ma);
     get_lower_bound( );
     set_data_word_width( 8);
     set_aligment( 2);
     set_endianess( little_endianbig_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page bj{
  ma av;
  ma pa;
  xg qj;
  ma js;
    bj( ){
     set_next_address( 9);
     set_access_rights( access_read_write, access_write);
     add_reserved_address_range( 3, 9);
     get_lower_bound( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map tf{
  ma qu;
  xg xo;
  bj oi;
  bj sq;
  ma rv;
  xg ji;
    tf( ){
     set_top_unit( ei);
     set_type( hierach);
xgbj.set_access_rights_enum( bj); 
     set_data_word_width( 6);
     get_data_word_width( );
     set_prefix( wr);
     set_suffix( fs);
  }
}
;
csl_register ne{
    ne( ){
     set_width( 8);
     index_data_pair( tf);
     add_logic( wr_en);
     set_value( 4);
     clear_value( 7);
     set_lock_enable_bit( 7);
     get_lock_enable_bit( );
     add_logic( gray_output);
     set_count_amount( 1);
  }
}
;
csl_register dk{
    dk( ){
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

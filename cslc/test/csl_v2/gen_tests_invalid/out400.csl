csl_enum au {
	ks,
	qw,
	oq,
	nn,
	sy,
	tx,
	bo,
	hq,
	pq,
	ev,
	li
};
csl_enum nh {
	bn,
	ih,
	rk,
	ec,
	fu,
	yt,
	no,
	hg,
	qd
};
csl_enum er {
	rn = 99,
	kh = 69,
	fp = 63,
	gq = 90
};
csl_isa_instruction_format cb{
    cb( ){
     set_width( 6);
     generate_decoder( yupujv);
  }
}
;
csl_isa fu{
    fu( ){
     set_decoder_out_name_prefix( "mm");
     set_decoder_out_name_suffix( "nr");
     generate_decoder( yupujvvw);
     print( isa.txt);
  }
}
;
csl_fifo ld{
   ld( ){
     set_physical_implementation( SRAM);
     add_logic( depth_extend, 0);
     add_logic( bq);
     add_logic( wr_words, 7);
     add_logic( stall_rd_side);
     add_logic( almost_empty, 0);
     add_logic( wr_credit);
  }
}
;
csl_memory_map_page hd{
    hd( ){
     add_address_range( 6, 8);
     set_address_increment( 0);
     get_address_increment( );
     set_next_address( 3);
     add_reserved_address_range( 0, 3);
     get_upper_bound( );
     set_data_word_width( 0);
     set_endianess( big_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page xm{
    xm( ){
     get_address_increment( );
     set_next_address( 8);
     add_reserved_address_range( 1, 2);
     set_data_word_width( 9);
     set_aligment( 2);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page ii{
  hd dh;
  xm tl;
  hd uo;
  xm gw;
  hd ci;
  xm tb;
    ii( ){
     add_address_range( 1, 6);
     set_access_rights( access_write, access_read_write);
     add( xm);
     get_lower_bound( );
     get_data_word_wodth( );
     set_aligment( 1);
     get_aligment( );
     set_endianess( little_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map uu{
    uu( ){
     auto_gen_memory_map( );
     set_type( page);
hd.set_access_rights_enum( xmii); 
     set_prefix( py);
  }
}
;
csl_register ce{
    ce( ){
     set_type( STATIC);
     set_width( 3);
     add_logic( serial_input);
     add_logic( serial_output);
     add_logic( rd_en);
     add_logic( wr_en);
     init_value( 6);
     set_value( 8);
     set_count_direction( 4);
     set_end_value( 5);
     add_logic( inc_signal);
     add_logic( dec_signal);
  }
}
;
csl_register sb{
    sb( ){
     set_const_value( 5);
     add_logic( bypass);
  }
}
;

csl_enum ae {
	ts,
	ce,
	sd,
	ma,
	eg,
	ad,
	wf,
	ur,
	yk
};
csl_enum bi {
	wb = 96,
	ov = 25,
	ma = 84,
	lt = 48,
	em = 97,
	ab = 42,
	hf = 25,
	ha = 33,
	iv = 53,
	cm = 19,
	fc = 31,
	pc = 60,
	jk = 19
};
csl_enum tl {
	xw = 75,
	tw = 43,
	ai = 42,
	sm = 89,
	ke = 66,
	jo = 50,
	sl = 1,
	ra = 34,
	qa = 26,
	ca = 54,
	ve = 90,
	ob = 87,
	if = 17,
	du = 65
};
csl_isa_instruction_format lq{
    lq( ){
     set_width( 7);
  }
}
;
csl_isa_instruction nr : lq{
    nr( ){
    set_asm_mnemonic( csl_list "ru", "sm", "bi", "de", "ou", "vx", "on", "kc", "fq");
  }
}
;
csl_isa_instruction wg : lq{
    wg( ){
    set_asm_mnemonic( );
  }
}
;
csl_isa yk{
    yk( ){
     set_decoder_name( "nh");
     set_decoder_out_name_prefix( "qm");
     set_decoder_out_name_suffix( "vq");
     generate_decoder( kudn);
     print( isa.txt);
  }
}
;
csl_fifo ya{
   ya( ){
  }
}
;
csl_memory_map_page ch{
    ch( ){
     add_address_range( 2, 9);
     set_access_rights( access_read, access_write);
     add_reserved_address_range( 3, 8);
     set_data_word_width( 8);
     get_data_word_wodth( );
     set_aligment( 1);
     get_aligment( );
     set_endianess( big_endian);
     get_endianess( );
  }
}
;
csl_memory_map_page cg{
  ch ts;
    cg( ){
     add_address_range( 1, 5);
     get_address_increment( );
     set_next_address( 2);
     get_next_address( );
     add_reserved_address_range( 6, 5);
     get_upper_bound( );
     get_data_word_wodth( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page go{
  cg mc;
    go( ){
     set_address_increment( 2);
     get_address_increment( );
     set_access_rights( access_write, access_read);
     add( cg);
     set_data_word_width( 1);
     get_aligment( );
     get_endianess( );
  }
}
;
csl_memory_map rp{
    rp( ){
     auto_gen_memory_map( );
     set_data_word_width( 7);
     set_suffix( jo);
  }
}
;
csl_register qn{
    qn( ){
     set_range( {[0:0], [9:2], [1:0], [5:6], [1:6], [9:8], [7:4], [1:9], [6:8]});
     set_width( 0);
     index_data_pair( rp, 5);
     set_atribute( read);
     constant( 4);
     add_logic( neg_output);
     add_logic( serial_output);
     add_logic( wr_en);
     init_value( 8);
     reset_value( 6);
     clear_value( 4);
     add_logic( gray_output);
     set_count_amount( 6);
     add_logic( inc_signal);
  }
}
;
csl_register nf{
    nf( ){
     set_depth( 7);
     get_depth( );
     set_const_value( 0);
  }
}
;

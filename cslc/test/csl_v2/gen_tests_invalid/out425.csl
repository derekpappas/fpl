csl_enum tt {
	md = 44,
	ib = 83,
	ov = 37,
	td = 63,
	dg = 65,
	wu = 62,
	ga = 18,
	dv = 99
};
csl_enum ac {
	ve,
	nd,
	ar,
	nh,
	yy,
	xu
};
csl_enum ul {
	xf = 55,
	mp = 97,
	dg = 68,
	sj = 57,
	or = 27,
	ew = 75,
	tj = 25
};
csl_isa_instruction_format ot{
    ot( ){
     set_width( 6);
     generate_decoder( sublmu);
  }
}
;
csl_isa ct{
    ct( ){
     set_decoder_out_name_prefix( "fl");
     set_decoder_out_name_suffix( "ca");
     generate_decoder( su);
     print( isa.txt);
  }
}
;
csl_fifo fo{
   fo( ){
     add_logic( wr_hold, 4);
     add_logic( flow);
  }
}
;
csl_memory_map_page oc{
    oc( ){
     add_address_range( 3, 9);
     set_address_increment( 6);
     set_next_address( 1);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page ii{
    ii( ){
     get_address_increment( );
     set_next_address( 9);
     set_access_rights( access_read_write, access_read_write);
     add_reserved_address_range( 0, 4);
     add( fo, "ba");
     get_lower_bound( );
     set_data_word_width( 5);
     get_data_word_wodth( );
     set_aligment( 0);
     get_aligment( );
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map an{
  oc xo;
  ii vh;
  oc ph;
  ii rw;
  ii ou;
    an( ){
     auto_gen_memory_map( );
.add_to_memory_map( access_read_write); 
     set_prefix( xj);
     get_prefix( );
  }
}
;
csl_register xa{
    xa( ){
     set_range( [4:7]);
     set_address( an, );
     add_logic( serial_output);
     add_logic( wr_en);
     init_value( 6);
     clear_value( 6);
     set_start_value( 2);
     add_logic( inc_signal);
  }
}
;
csl_register jn{
    jn( ){
     set_width( 4);
     get_width( );
     set_depth( 6);
     add_logic( read_valid);
     set_const_value( 0);
     add_logic( bypass);
  }
}
;

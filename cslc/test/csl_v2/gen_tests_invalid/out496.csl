csl_enum oj {
	ap,
	ln,
	pm,
	ue,
	vp,
	pj,
	vx
};
csl_enum xg {
	qp = 67,
	sq = 65,
	mv = 59,
	gl = 68,
	pw = 72,
	yd = 54,
	an = 22,
	oc = 36,
	ga = 39,
	sv = 22,
	np = 43,
	al = 63
};
csl_enum fr {
	we,
	su,
	kj
};
csl_isa_instruction_format kp{
    kp( ){
     set_width( 0);
     generate_decoder( swvqmt);
  }
}
;
csl_isa_instruction kg : kp{
    kg( ){
    set_asm_mnemonic( bg);
  }
}
;
csl_isa_instruction aq : kp{
    aq( ){
    set_asm_mnemonic( dn);
  }
}
;
csl_isa ct{
  kg ym;
  aq rl;
  kg cd;
  aq hs;
  aq vf;
  kg fc;
  kg ju;
  aq im;
  kg bo;
  aq oy;
  kg vd;
  aq kb;
  aq eu;
  kg hm;
  aq lg;
  kg ep;
  aq ca;
  aq yw;
  kg yq;
  aq rn;
    ct( ){
     set_decoder_name( "tf");
     set_decoder_out_name_prefix( "xr");
     set_decoder_out_name_suffix( "xy");
     generate_decoder( uaswvq);
     print( isa.txt);
  }
}
;
csl_fifo hf{
   hf( ){
     set_physical_implementation( SRAM);
     add_logic( width_extend, 3);
     add_logic( wr_hold, 8);
     add_logic( parallel_output, all);
     add_logic( almost_empty, 5);
  }
}
;
csl_memory_map_page dc{
    dc( ){
     add_address_range( 3, 3);
     set_next_address( 6);
     add_reserved_address_range( 5, 4);
     get_upper_bound( );
     set_aligment( 7);
     get_aligment( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page yu{
    yu( ){
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 3);
     get_aligment( );
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page gs{
    gs( ){
     set_address_increment( 4);
     get_address_increment( );
     set_access_rights( access_read, access_read);
     get_upper_bound( );
     set_data_word_width( 8);
     get_data_word_wodth( );
  }
}
;
csl_register px{
    px( ){
     set_range( [8:0]);
     set_type( STATUS);
     add_logic( neg_output);
     add_logic( serial_input);
     clear_value( 8);
     set_lock_enable_bit( 3);
     set_count_direction( 3);
     set_end_value( 8);
     add_logic( cnt_dir_signal);
     add_logic( inc_signal);
  }
}
;
csl_register li{
    li( ){
     set_width( 3);
     get_width( );
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

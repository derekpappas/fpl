csl_enum ok {
	wf,
	ps,
	ty,
	yh,
	ay,
	fv,
	sx,
	lr
};
csl_enum en {
	io,
	jr,
	ek,
	qm,
	pw,
	xg,
	ju
};
csl_enum ly {
	oh = 51,
	ap = 11
};
csl_isa_instruction_format pp{
    pp( ){
     generate_decoder( ifaund);
  }
}
;
csl_isa ql{
    ql( ){
     set_decoder_name( "wd");
     set_decoder_out_name_suffix( "gs");
     generate_decoder( ifvvau);
     print( isa.txt);
  }
}
;
csl_fifo jf{
   jf( ){
     add_logic( flow);
  }
}
;
csl_memory_map_page en{
    en( ){
     add_address_range( 1, 1);
     get_address_increment( );
     set_access_rights( access_write, none);
     get_lower_bound( );
     get_data_word_wodth( );
     get_aligment( );
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page xl{
    xl( ){
     set_address_increment( 5);
     add_reserved_address_range( 3, 1);
     add( jf, "tk");
     add( en);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 0);
     set_aligment( 1);
     get_aligment( );
     set_endianess( big_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page cs{
    cs( ){
     set_address_increment( 7);
     get_address_increment( );
     set_next_address( 1);
     get_next_address( );
     set_access_rights( access_read_write, none);
     add_reserved_address_range( 9, 7);
     add( jf, "yy", 8);
     add( xl);
     get_lower_bound( );
     set_data_word_width( 3);
     set_aligment( 2);
     get_aligment( );
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map go{
  cs ne;
  xl lj;
  cs bu;
  en wm;
  cs mq;
    go( ){
     set_top_unit( ifaund);
.     set_data_word_width( 0);
     set_prefix( it);
     set_suffix( nk);
  }
}
;
csl_register gw{
    gw( ){
     set_type( ATOM);
     set_atribute( read);
     set_value( 0);
     reset_value( 9);
     add_logic( gray_output);
     set_count_direction( 9);
     add_logic( cnt_dir_signal);
  }
}
;
csl_register jd{
    jd( ){
     set_width( 8);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 3);
  }
}
;

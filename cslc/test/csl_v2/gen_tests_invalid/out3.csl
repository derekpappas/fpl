csl_enum jw {
	hi,
	tt,
	sg
};
csl_enum uu {
	lc,
	kn,
	wm,
	lj,
	pn,
	hy
};
csl_enum mt {
	wq,
	rs,
	us,
	be,
	pk,
	ml,
	ei,
	uy,
	fg,
	dr,
	td,
	eh,
	mv,
	ut
};
csl_isa_instruction_format qp{
    qp( ){
     set_width( 2);
     generate_decoder( dsfk);
  }
}
;
csl_isa uf{
    uf( ){
     set_decoder_name( "sv");
     set_decoder_out_name_prefix( "ku");
     set_decoder_out_name_suffix( "jq");
     generate_decoder( ljrifk);
  }
}
;
csl_fifo qx{
   qx( ){
     add_logic( programable_depth, 8);
     add_logic( wk);
     add_logic( pushback);
     add_logic( string_through, 7);
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page my{
    my( ){
     set_address_increment( 4);
     set_next_address( 5);
     set_aligment( 3);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page vd{
    vd( ){
     set_address_increment( 1);
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_write, none);
     get_data_word_wodth( );
     get_aligment( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page sa{
    sa( ){
     add_address_range( 2, 6);
     get_address_increment( );
     set_next_address( 0);
     get_next_address( );
     set_access_rights( access_read, access_read);
     add_reserved_address_range( 5, 0);
     add( vd);
     get_upper_bound( );
     set_data_word_width( 3);
     get_data_word_wodth( );
     set_aligment( 6);
     get_aligment( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map fs{
    fs( ){
     auto_gen_memory_map( );
     set_top_unit( ridsfk);
.add_to_memory_map( 6,access_write); 
     set_type( page);
     set_prefix( bq);
     get_prefix( );
  }
}
;
csl_register tr{
    tr( ){
     set_width( 2);
     constant( 4);
     add_logic( wr_en);
     set_value( 6);
     set_count_direction( 4);
     add_logic( cnt_dir_signal);
     add_logic( dec_signal);
  }
}
;
csl_register ay{
    ay( ){
     set_width( 7);
     add_logic( read_valid);
     set_const_value( 0);
     add_logic( bypass);
  }
}
;

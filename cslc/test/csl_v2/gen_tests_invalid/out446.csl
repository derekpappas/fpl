csl_enum vl {
	st,
	cl,
	hg,
	xo,
	kt,
	ef,
	ma,
	lp,
	ia,
	gd,
	ws,
	io,
	ey,
	de,
	dy
};
csl_enum rv {
	uw,
	jc,
	di,
	qp,
	ew,
	vq,
	xh,
	ig
};
csl_enum jq {
	lh = 32,
	jv = 34,
	xp = 88,
	vd = 30,
	vb = 37,
	eq = 68
};
csl_isa_instruction_format by{
    by( ){
     set_width( 4);
     generate_decoder( jakt);
  }
}
;
csl_isa ph{
    ph( ){
     set_decoder_out_name_prefix( "tn");
     print( isa.txt);
  }
}
;
csl_fifo ro{
   ro( ){
     add_logic( rd_words, 3);
  }
}
;
csl_memory_map_page ts{
    ts( ){
     set_next_address( 0);
     set_access_rights( access_read_write, access_write);
     add_reserved_address_range( 3, 5);
     set_data_word_width( 1);
     get_data_word_wodth( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page ym{
    ym( ){
     set_address_increment( 6);
     get_next_address( );
     get_upper_bound( );
     set_aligment( 3);
     get_symbol_lenght( );
  }
}
;
csl_memory_map qd{
    qd( ){
     auto_gen_memory_map( );
     set_top_unit( cukt);
tsym.add_to_memory_map( access_write); 
     set_type( flat);
tsym.set_access_rights_enum( tsym); 
     set_data_word_width( 8);
     get_data_word_width( );
     set_prefix( go);
     set_suffix( dg);
  }
}
;
csl_register ce{
    ce( ){
     set_width( 6);
     set_atribute( read_write);
     add_logic( serial_output);
     add_logic( gray_output);
     set_count_amount( 4);
     stop_at_end_value( );
  }
}
;
csl_register ox{
    ox( ){
     set_width( 8);
     get_width( );
     set_depth( 8);
     set_const_value( 1);
  }
}
;

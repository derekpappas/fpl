csl_enum oh {
	sg,
	rb,
	ds,
	gg,
	fd,
	wn,
	ui,
	ld,
	fg
};
csl_enum so {
	vm,
	nc,
	ke,
	re,
	pj,
	oj,
	pi
};
csl_enum ku {
	cs = 10,
	bh = 54,
	va = 85,
	ws = 28,
	jl = 82,
	xo = 60,
	rq = 79,
	gp = 33,
	dt = 95,
	ro = 27,
	am = 9,
	up = 79
};
csl_isa_instruction_format rl{
    rl( ){
  }
}
;
csl_isa_instruction lm : rl{
    lm( ){
    set_asm_mnemonic( );
  }
}
;
csl_isa_instruction bs : rl{
    bs( ){
    set_asm_mnemonic( csl_list "vt", "ns", "wk", "dd", "ys", "uf");
  }
}
;
csl_isa kl{
    kl( ){
     set_decoder_name( "ee");
     set_decoder_out_name_suffix( "qs");
     generate_decoder( euul);
     print( isa.txt);
  }
}
;
csl_memory_map_page my{
    my( ){
     get_address_increment( );
     add_reserved_address_range( 9, 8);
     get_upper_bound( );
     set_data_word_width( 2);
     get_aligment( );
     set_endianess( big_endianlittle_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page kn{
    kn( ){
     get_address_increment( );
     set_next_address( 3);
     set_access_rights( none, access_write);
     get_lower_bound( );
     set_aligment( 9);
     set_endianess( little_endianbig_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page uh{
    uh( ){
  }
}
;
csl_memory_map lh{
  my be;
  kn cb;
  uh ag;
  my yv;
  kn ym;
  my bo;
  kn vs;
  uh nh;
    lh( ){
     auto_gen_memory_map( );
     set_type( hierach);
mykn.set_access_rights_enum( kn); 
     set_data_word_width( 0);
     set_prefix( ex);
     set_suffix( nu);
     get_suffix( );
  }
}
;
csl_register ri{
    ri( ){
     set_range( {[7:0], [2:6], [3:1], [3:5], [5:8]});
     set_width( 5);
     index_data_pair( lh, 5);
     constant( 3);
     add_logic( neg_output);
     add_logic( serial_input);
     add_logic( rd_en);
     set_value( 4);
     add_logic( gray_output);
     set_count_direction( 2);
     set_start_value( 7);
     get_cnt_dir_signal( );
     add_logic( inc_signal);
     add_logic( dec_signal);
  }
}
;
csl_register if{
    if( ){
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 8);
     add_logic( bypass);
  }
}
;

csl_enum wa {
	st = 94,
	wq = 55,
	ra = 83,
	br = 53,
	nm = 60
};
csl_enum wo {
	om,
	mi,
	vd,
	en,
	ji,
	xq,
	qh,
	ho,
	yg,
	qt
};
csl_enum bp {
	ks,
	qo,
	me,
	bl,
	vr,
	xi,
	cw
};
csl_isa_instruction_format cd{
    cd( ){
     set_width( 9);
     generate_decoder( lc);
  }
}
;
csl_isa fm{
    fm( ){
     set_decoder_name( "cl");
     set_decoder_out_name_suffix( "ax");
     generate_decoder( qllcxr);
     print( isa.txt);
  }
}
;
csl_fifo fh{
   fh( ){
     add_logic( programable_depth, 1);
     add_logic( width_extend, 5);
     add_logic( wr_release);
     add_logic( almost_full, 8);
  }
}
;
csl_memory_map_page tw{
    tw( ){
     get_address_increment( );
     set_next_address( 1);
     get_next_address( );
     set_access_rights( access_read, access_read_write);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 3);
     set_aligment( 3);
     set_endianess( big_endian);
     get_endianess( );
  }
}
;
csl_memory_map_page xu{
  tw pb;
    xu( ){
     get_data_word_wodth( );
  }
}
;
csl_memory_map_page ps{
  xu nr;
  xu ce;
    ps( ){
     add_address_range( 8, 1);
     set_address_increment( 7);
     set_next_address( 5);
     set_access_rights( access_read_write, none);
     add( fh, "nc");
     get_upper_bound( );
     set_aligment( 5);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map ru{
  tw qa;
  xu yn;
  ps jg;
  tw em;
  ps gd;
    ru( ){
     set_type( page);
     set_data_word_width( 4);
     get_data_word_width( );
     set_prefix( xt);
     set_suffix( da);
  }
}
;
csl_register kx{
    kx( ){
     add_logic( serial_output);
     init_value( 6);
     set_count_direction( 1);
     set_end_value( 9);
  }
}
;
csl_register xh{
    xh( ){
     set_depth( 8);
     get_depth( );
     set_const_value( 7);
     add_logic( bypass);
  }
}
;

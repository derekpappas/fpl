csl_enum jl {
	jr = 52,
	ie = 35,
	tq = 40,
	be = 85,
	ao = 55,
	ln = 90,
	fm = 81,
	oq = 96,
	jf = 97
};
csl_enum jp {
	km = 83,
	mo = 22,
	nc = 1,
	tw = 72,
	ie = 29,
	kr = 79
};
csl_enum xu {
	wr = 3,
	oa = 55,
	xo = 3,
	rj = 22,
	fw = 62,
	xt = 53,
	pk = 41,
	yb = 27,
	al = 75
};
csl_isa_instruction_format tf{
    tf( ){
     generate_decoder( vs);
  }
}
;
csl_isa_instruction ll : tf{
    ll( ){
    set_asm_mnemonic( sn);
  }
}
;
csl_isa_instruction ua : tf{
    ua( ){
    set_asm_mnemonic( csl_list "us", "dc", "ss", "dd", "tb", "km", "go", "gs");
  }
}
;
csl_isa_instruction qf : tf{
    qf( ){
    set_asm_mnemonic( csl_list "ft", "dh", "ri", "fs", "yq", "cf", "le");
  }
}
;
csl_isa_instruction nw : tf{
    nw( ){
    set_asm_mnemonic( ij);
  }
}
;
csl_isa xv{
    xv( ){
     set_decoder_out_name_prefix( "af");
     set_decoder_out_name_suffix( "at");
     generate_decoder( vsum);
     print( isa.txt);
  }
}
;
csl_fifo fl{
   fl( ){
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page iv{
    iv( ){
     set_next_address( 9);
     add_reserved_address_range( 6, 2);
     add( fl, "uj");
     set_aligment( 5);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page gv{
  iv dx;
  iv ct;
    gv( ){
     add_address_range( 2, 4);
     set_address_increment( 2);
     set_data_word_width( 6);
     get_aligment( );
     set_endianess( big_endianbig_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page jv{
    jv( ){
     set_next_address( 7);
     add( gv);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
  }
}
;
csl_memory_map hp{
    hp( ){
     auto_gen_memory_map( );
     set_top_unit( wfvs);
     set_type( page);
ivgv.set_access_rights_enum( iv); 
     set_data_word_width( 3);
     get_data_word_width( );
     set_prefix( ew);
     set_suffix( dq);
     get_suffix( );
  }
}
;
csl_register fm{
    fm( ){
     set_width( 2);
     get_atributes( );
     add_logic( serial_input);
     add_logic( serial_output);
     add_logic( rd_en);
     add_logic( wr_en);
     init_value( 7);
     add_logic( gray_output);
     stop_at_end_value( );
     add_logic( inc_signal);
  }
}
;
csl_register fq{
    fq( ){
     set_width( 1);
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

csl_enum cy {
	jc,
	vd,
	es,
	aj,
	ku,
	ow,
	fd,
	hv,
	kt,
	nb,
	ug,
	gr,
	yg,
	fw,
	ih
};
csl_enum vr {
	lt,
	wr,
	ow,
	cy,
	tq,
	vc,
	vg,
	xg,
	cl,
	ja,
	tq
};
csl_enum rv {
	yy = 58,
	sh = 70,
	iq = 62,
	bt = 92,
	kx = 11
};
csl_isa gt{
    gt( ){
     set_decoder_name( "yu");
     set_decoder_out_name_prefix( "ck");
     set_decoder_out_name_suffix( "am");
     generate_decoder( mqshgjjs);
     print( isa.txt);
  }
}
;
csl_fifo pj{
   pj( ){
     add_logic( parallel_output, all);
     add_logic( string_through, 8);
     add_logic( almost_full, 6);
     add_logic( flow);
  }
}
;
csl_memory_map_page ks{
    ks( ){
     add_address_range( 3, 9);
     set_address_increment( 6);
     set_access_rights( access_read, access_read_write);
     get_data_word_wodth( );
     set_aligment( 7);
     get_aligment( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page ye{
  ks fb;
  ks np;
  ks si;
    ye( ){
     add_address_range( 4, 3);
     set_address_increment( 2);
     get_address_increment( );
     set_access_rights( access_read, access_write);
     add_reserved_address_range( 0, 7);
     get_upper_bound( );
     get_data_word_wodth( );
     get_aligment( );
     set_endianess( little_endianlittle_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page jj{
  ye tq;
  ks yd;
  ye ib;
  ye bx;
    jj( ){
     add_address_range( 1, 4);
     get_address_increment( );
     add( pj, "al", 8);
     get_lower_bound( );
     set_aligment( 8);
     set_endianess( big_endian);
     get_endianess( );
  }
}
;
csl_memory_map pk{
    pk( ){
     auto_gen_memory_map( );
     set_data_word_width( 9);
     get_data_word_width( );
     set_prefix( jt);
  }
}
;
csl_register yd{
    yd( ){
     set_address( pk, 2);
     add_logic( serial_output);
     set_count_direction( 6);
     add_logic( inc_signal);
  }
}
;
csl_register wd{
    wd( ){
     set_depth( 8);
     get_depth( );
     add_logic( read_valid);
     set_const_value( 6);
  }
}
;

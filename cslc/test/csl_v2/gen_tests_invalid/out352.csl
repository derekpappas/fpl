csl_enum ss {
	pk = 23,
	nl = 44,
	pk = 22,
	iy = 42,
	ti = 53,
	hu = 37,
	bc = 2,
	od = 31,
	nk = 31,
	dd = 46
};
csl_enum ct {
	vb,
	dq,
	af,
	ys,
	ao,
	gp,
	cv,
	ck,
	wx
};
csl_enum vf {
	sw,
	ji,
	cy,
	uf,
	dw,
	cy
};
csl_isa_instruction_format li{
    li( ){
     set_width( 1);
     generate_decoder( xldokx);
  }
}
;
csl_isa_instruction yq : li{
    yq( ){
    set_asm_mnemonic( rm);
  }
}
;
csl_isa qa{
    qa( ){
     set_decoder_name( "fh");
     set_decoder_out_name_prefix( "yf");
     set_decoder_out_name_suffix( "gb");
     generate_decoder( xlkx);
     print( isa.txt);
  }
}
;
csl_fifo ul{
   ul( ){
     set_physical_implementation( FFA);
     add_logic( async_fifo);
     add_logic( width_extend, 2);
     add_logic( stall);
     add_logic( flow);
  }
}
;
csl_memory_map_page er{
    er( ){
     get_address_increment( );
     set_next_address( 3);
     add_reserved_address_range( 2, 0);
     get_upper_bound( );
     set_data_word_width( 1);
     set_aligment( 3);
  }
}
;
csl_memory_map_page rs{
    rs( ){
     set_address_increment( 7);
     get_next_address( );
     add_reserved_address_range( 8, 8);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_endianess( big_endianlittle_endian);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page rx{
  er yy;
    rx( ){
     get_address_increment( );
     add( ul, "ll", 5);
     set_aligment( 9);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map oy{
    oy( ){
     set_top_unit( shxldokx);
     set_type( hierach);
  }
}
;
csl_register fr{
    fr( ){
     set_width( 1);
     get_width( );
     set_depth( 4);
     get_depth( );
     add_logic( bypass);
  }
}
;

csl_enum lx {
	tq,
	aq,
	ct,
	xf,
	jn,
	lv,
	ie,
	qx,
	jg,
	hl,
	kw,
	db,
	gw,
	ct
};
csl_enum en {
	rx,
	gt,
	qi
};
csl_enum np {
	py,
	fc,
	vn,
	go
};
csl_isa_instruction_format dt{
    dt( ){
     set_width( 1);
  }
}
;
csl_isa hb{
    hb( ){
     set_decoder_name( "jj");
     set_decoder_out_name_prefix( "rg");
     set_decoder_out_name_suffix( "rl");
     generate_decoder( ldku);
     print( isa.txt);
  }
}
;
csl_fifo vm{
   vm( ){
     add_logic( pp);
     add_logic( parallel_output, all);
     add_logic( credit);
  }
}
;
csl_memory_map_page lq{
    lq( ){
     get_next_address( );
     add_reserved_address_range( 1, 0);
     get_lower_bound( );
     set_data_word_width( 6);
     get_data_word_wodth( );
     get_endianess( );
  }
}
;
csl_memory_map_page sm{
  lq aq;
  lq dn;
    sm( ){
     set_address_increment( 7);
     get_address_increment( );
     set_access_rights( access_write, access_write);
     add( vm, "tw");
     get_upper_bound( );
     set_data_word_width( 7);
     get_data_word_wodth( );
     set_aligment( 7);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page ek{
  sm mu;
  lq oa;
  lq mo;
  sm bk;
    ek( ){
     add_address_range( 0, 0);
     set_address_increment( 0);
     get_address_increment( );
     set_next_address( 5);
     get_next_address( );
     set_access_rights( none, access_read_write);
     add_reserved_address_range( 2, 5);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 7);
     set_aligment( 8);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map sa{
    sa( ){
     auto_gen_memory_map( );
     set_top_unit( ldby);
     set_type( page);
lqsmek.set_access_rights_enum( smek); 
     set_data_word_width( 6);
     get_data_word_width( );
     set_prefix( yl);
     set_suffix( os);
  }
}
;
csl_register cf{
    cf( ){
     set_range( {[3:8], [0:8], [3:4], [0:4], [1:1], [0:0]});
     add_logic( serial_output);
     init_value( 0);
     set_value( 1);
     reset_value( 2);
     clear_value( 0);
     set_end_value( 4);
     stop_at_end_value( );
     add_logic( inc_signal);
  }
}
;
csl_register rq{
    rq( ){
     set_width( 8);
     get_width( );
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

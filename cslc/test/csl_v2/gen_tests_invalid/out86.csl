csl_enum eq {
	bp,
	jm,
	ep,
	ch,
	cb,
	el,
	uy,
	bj
};
csl_enum ra {
	dc,
	sb,
	ru,
	jb
};
csl_enum eg {
	ik,
	wl,
	bj,
	xh,
	ba,
	pd,
	dv
};
csl_isa_instruction_format ju{
    ju( ){
     set_width( 4);
  }
}
;
csl_isa ax{
    ax( ){
     set_decoder_name( "dm");
     set_decoder_out_name_suffix( "ae");
     print( isa.txt);
  }
}
;
csl_fifo ag{
   ag( ){
     set_dimension( 1, 7);
  }
}
;
csl_memory_map_page bo{
    bo( ){
     set_address_increment( 3);
     get_address_increment( );
     set_next_address( 2);
     set_access_rights( access_read, access_read);
     add_reserved_address_range( 2, 9);
     get_lower_bound( );
     set_endianess( little_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page yp{
    yp( ){
     get_address_increment( );
     get_next_address( );
     get_data_word_wodth( );
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page fw{
  yp rn;
  bo gs;
  yp bq;
  bo jr;
  yp pi;
    fw( ){
     add_address_range( 2, 6);
     set_next_address( 9);
     get_next_address( );
     get_upper_bound( );
     set_data_word_width( 8);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map ku{
  bo jv;
  fw ek;
  yp uw;
  fw wg;
    ku( ){
  }
}
;
csl_register pu{
    pu( ){
     add_logic( inc_signal);
  }
}
;
csl_register jk{
    jk( ){
     set_width( 9);
     get_width( );
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

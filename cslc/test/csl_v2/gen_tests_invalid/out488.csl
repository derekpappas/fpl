csl_enum jw {
	ij,
	xs,
	dk,
	ue,
	ya,
	yh
};
csl_enum kx {
	ox = 74,
	ms = 75,
	uw = 19,
	oj = 46,
	ds = 71,
	ey = 80
};
csl_enum lj {
	gw,
	go,
	gg,
	jl,
	rh,
	qs,
	hr
};
csl_isa_instruction_format sn{
    sn( ){
     set_width( 3);
  }
}
;
csl_isa ny{
    ny( ){
     set_decoder_out_name_suffix( "ep");
     print( isa.txt);
  }
}
;
csl_fifo lq{
   lq( ){
     add_logic( sync_fifo);
     add_logic( parallel_input, all);
     add_logic( rd_credit);
  }
}
;
csl_memory_map_page yr{
    yr( ){
     get_next_address( );
     add_reserved_address_range( 0, 0);
  }
}
;
csl_memory_map_page qy{
    qy( ){
     add_address_range( 7, 3);
     set_next_address( 6);
     set_access_rights( none, none);
     add_reserved_address_range( 2, 3);
     get_upper_bound( );
     set_aligment( 2);
  }
}
;
csl_memory_map_page hc{
  yr ym;
  qy de;
  yr bt;
  yr mb;
  qy hi;
    hc( ){
     set_address_increment( 6);
     get_next_address( );
     set_access_rights( access_write, none);
     get_lower_bound( );
     get_endianess( );
  }
}
;
csl_memory_map gb{
    gb( ){
     auto_gen_memory_map( );
     set_top_unit( vwcf);
     set_prefix( qf);
     get_prefix( );
  }
}
;
csl_register am{
    am( ){
     set_width( 1);
     set_address( gb, );
     set_atribute( read_write);
     add_logic( serial_output);
     add_logic( wr_en);
     init_value( 4);
     clear_value( 9);
     set_count_amount( 5);
     stop_at_end_value( );
  }
}
;
csl_register kl{
    kl( ){
     set_depth( 1);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 1);
     add_logic( bypass);
  }
}
;

csl_enum rd {
	ir,
	nw,
	rr,
	to,
	wl,
	vs,
	np
};
csl_enum di {
	un = 56,
	je = 61,
	hh = 77,
	wv = 83,
	na = 24,
	ji = 69,
	ge = 71,
      //	np = 75,
	vd = 92,
	op = 30,
	vk = 65,
	es = 53,
	vc = 28,
	ol = 14
};
csl_enum sr {
	up,
	hg,
      //	to,
	or
};
csl_isa_instruction_format cv{
    cv( ){
     set_width( 0);
     generate_decoder( mldc);
  }
}
;
csl_isa xp{
    xp( ){
     set_decoder_out_name_prefix( "rp");
     set_decoder_out_name_suffix( "lv");
     generate_decoder( apmc);
  }
}
;
csl_fifo mk{
   mk( ){
     set_physical_implementation( SRAM);
     add_logic( depth_extend, 7);
     add_logic( pushback);
     add_logic( stall_wr_side);
     add_logic( almost_full, 5);
     add_logic( wr_credit);
  }
}
;
csl_memory_map_page uo{
    uo( ){
     add_address_range( 2, 0);
     set_address_increment( 0);
     set_next_address( 5);
     get_next_address( );
     set_access_rights( access_write, access_write);
     get_lower_bound( );
     set_data_word_width( 1);
     get_data_word_wodth( );
     set_aligment( 0);
     get_aligment( );
     set_endianess( big_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page hp{
    hp( ){
     add_address_range( 2, 1);
     get_address_increment( );
     set_next_address( 5);
     add_reserved_address_range( 1, 7);
     get_lower_bound( );
     set_data_word_width( 9);
     get_data_word_wodth( );
     get_aligment( );
  }
}
;
csl_memory_map_page sl{
  uo bj;
  hp gl;
  uo is;
  hp bc;
    sl( ){
     add_address_range( 4, 7);
     set_address_increment( 4);
     set_next_address( 1);
     add( uo);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 0);
     get_aligment( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map xd{
  sl gu;
  sl fq;
  uo lj;
    xd( ){
     auto_gen_memory_map( );
     set_top_unit( mc);
     set_type( flat);
     set_data_word_width( 7);
     get_data_word_width( );
     set_prefix( nk);
  }
}
;
csl_register ip{
    ip( ){
     set_type( DFF);
     add_logic( serial_output);
     add_logic( rd_en);
     set_value( 2);
     reset_value( 5);
     clear_value( 7);
     add_logic( gray_output);
     set_count_direction( 5);
     set_end_value( 6);
     add_logic( cnt_dir_signal);
  }
}
;
csl_register ft{
    ft( ){
     set_width( 9);
     set_depth( 2);
     get_depth( );
  }
}
;

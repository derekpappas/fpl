csl_enum xd {
	mm = 63,
	hs = 11,
	bh = 3
};
csl_enum ph {
	ss,
	sg,
	ut,
	ji,
	ib,
	bk,
	mf,
	bt,
	gv,
	yk,
	cy,
	oo,
	mx,
	kp,
	fc,
	wa,
	up,
	gp,
	mq,
	au
};
csl_enum td {
	fg = 12,
	lg = 0,
	cr = 19
};
csl_isa_instruction_format rg{
    rg( ){
     set_width( 2);
     generate_decoder( emtd);
  }
}
;
csl_isa_instruction pv : rg{
    pv( ){
    set_asm_mnemonic( csl_list "km");
  }
}
;
csl_isa wm{
    wm( ){
     set_decoder_name( "pv");
     set_decoder_out_name_suffix( "qn");
     generate_decoder( wvbl);
     print( isa.txt);
  }
}
;
csl_fifo jb{
   jb( ){
     add_logic( he);
  }
}
;
csl_memory_map_page br{
    br( ){
     get_address_increment( );
     set_access_rights( access_write, access_read);
     add_reserved_address_range( 7, 7);
     add( jb, "gk");
     get_lower_bound( );
     get_data_word_wodth( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page np{
  br cy;
    np( ){
     get_address_increment( );
     set_next_address( 4);
     set_access_rights( access_read_write, access_read);
     add_reserved_address_range( 5, 8);
     get_upper_bound( );
     get_aligment( );
     get_endianess( );
  }
}
;
csl_memory_map_page hb{
    hb( ){
     get_address_increment( );
     set_access_rights( access_write, access_read_write);
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 5);
     get_aligment( );
     set_endianess( big_endianbig_endian);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map ei{
  np lm;
  hb fd;
  br ux;
  np dw;
  hb sn;
    ei( ){
     set_top_unit( wv);
     set_type( hierach);
     set_data_word_width( 2);
     get_data_word_width( );
  }
}
;
csl_register da{
    da( ){
     set_atribute( shadow);
     stop_at_end_value( );
     add_logic( dec_signal);
  }
}
;
csl_register eh{
    eh( ){
     set_width( 2);
     get_width( );
     set_depth( 2);
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

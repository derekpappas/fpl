csl_enum hi {
	jt,
	mi,
	vd,
	ds,
	xf
};
csl_enum sx {
	wl = 27,
	ar = 27,
	yq = 74,
	cl = 6,
	gf = 55,
	qw = 14,
	oo = 96,
	jn = 43,
	aq = 24,
	vl = 28
};
csl_enum ki {
	tj,
	nw,
	en
};
csl_isa_instruction_format qh{
    qh( ){
  }
}
;
csl_isa ds{
    ds( ){
     set_decoder_name( "wb");
     set_decoder_out_name_prefix( "tv");
     set_decoder_out_name_suffix( "yo");
     generate_decoder( ki);
     print( isa.txt);
  }
}
;
csl_fifo fs{
   fs( ){
     add_logic( programable_depth, 3);
     add_logic( parallel_output, all);
     add_logic( output_rd_addr);
  }
}
;
csl_memory_map_page gn{
    gn( ){
     set_address_increment( 4);
     set_next_address( 1);
     set_access_rights( access_write, access_write);
     get_upper_bound( );
     set_data_word_width( 4);
     get_data_word_wodth( );
     get_aligment( );
     set_endianess( big_endianbig_endian);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page op{
    op( ){
     add_address_range( 3, 1);
     set_address_increment( 0);
     get_next_address( );
     set_access_rights( none, access_read_write);
     add_reserved_address_range( 7, 0);
     add( gn);
     get_data_word_wodth( );
     set_aligment( 6);
     get_aligment( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page ow{
    ow( ){
     add_address_range( 4, 6);
     set_address_increment( 5);
     get_address_increment( );
     get_next_address( );
     set_access_rights( none, access_read_write);
     add_reserved_address_range( 9, 5);
     add( fs, "il", 6);
     get_lower_bound( );
     set_data_word_width( 7);
     set_aligment( 2);
     get_aligment( );
     set_endianess( big_endianlittle_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map cm{
    cm( ){
opow.set_access_rights_enum( opow); 
     set_data_word_width( 5);
     get_data_word_width( );
  }
}
;
csl_register yw{
    yw( ){
     set_range( [1:3]);
     get_atributes( );
     add_logic( neg_output);
     add_logic( serial_input);
     add_logic( rd_en);
     add_logic( wr_en);
     reset_value( 7);
     clear_value( 6);
     set_lock_enable_bit( 5);
     add_logic( gray_output);
     set_count_direction( 9);
     set_end_value( 1);
     set_start_value( 7);
     add_logic( inc_signal);
     add_logic( dec_signal);
  }
}
;
csl_register uc{
    uc( ){
     set_depth( 8);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 6);
     add_logic( bypass);
  }
}
;

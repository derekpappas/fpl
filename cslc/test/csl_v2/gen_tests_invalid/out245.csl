csl_enum kl {
	ue,
	bi,
	pc,
	py,
	uu
};
csl_enum vv {
	yp = 66,
	cx = 72,
	gk = 95,
	hk = 76,
	yd = 52,
	kd = 66
};
csl_enum dn {
	cd,
	pm,
	ok,
	ss,
	uj,
	um
};
csl_isa_instruction_format gk{
    gk( ){
     set_width( 3);
     generate_decoder( cphl);
  }
}
;
csl_isa_instruction gf : gk{
    gf( ){
    set_asm_mnemonic( id);
  }
}
;
csl_isa la{
    la( ){
     set_decoder_name( "jn");
     set_decoder_out_name_prefix( "ki");
     set_decoder_out_name_suffix( "tm");
     generate_decoder( cpcn);
     print( isa.txt);
  }
}
;
csl_fifo ek{
   ek( ){
     add_logic( programable_depth, 8);
     add_logic( async_fifo);
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page vu{
    vu( ){
     get_next_address( );
     add( ek, "sc");
     get_upper_bound( );
     set_aligment( 0);
     get_aligment( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page bb{
  vu as;
  vu le;
    bb( ){
     set_next_address( 9);
     set_data_word_width( 3);
  }
}
;
csl_memory_map_page rx{
  vu id;
  vu pc;
  bb st;
    rx( ){
     get_upper_bound( );
     set_aligment( 0);
     get_aligment( );
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map nu{
    nu( ){
     set_prefix( dl);
     get_prefix( );
  }
}
;
csl_register rr{
    rr( ){
     add_logic( serial_output);
     reset_value( 9);
     clear_value( 8);
     add_logic( gray_output);
     set_count_amount( 6);
     set_count_direction( 7);
     add_logic( cnt_dir_signal);
  }
}
;
csl_register hi{
    hi( ){
     set_depth( 4);
     get_depth( );
     create_rtl_module( );
     set_const_value( 7);
  }
}
;

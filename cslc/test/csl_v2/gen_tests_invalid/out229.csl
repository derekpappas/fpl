csl_enum eq {
	av,
	qd,
	qr,
	xl,
	tr,
	cw,
	wi,
	wx,
	il
};
csl_enum yp {
	uw,
	mn,
	ah,
	yb,
	hd,
	tk,
	bm,
	nr,
	fn,
	db,
	gh,
	xf,
	sx,
	db,
	lc,
	qh,
	cg,
	we
};
csl_enum pv {
	gx,
	bc,
	kc,
	pa
};
csl_isa_instruction_format tl{
    tl( ){
     set_width( 0);
  }
}
;
csl_isa wp{
    wp( ){
     set_decoder_name( "rn");
     set_decoder_out_name_prefix( "ui");
     generate_decoder( nxcfmm);
     print( isa.txt);
  }
}
;
csl_fifo ji{
   ji( ){
     add_logic( stall);
     add_logic( wr_release);
     add_logic( almost_full, 6);
  }
}
;
csl_memory_map_page dq{
    dq( ){
     set_data_word_width( 6);
     get_endianess( );
  }
}
;
csl_memory_map_page fa{
    fa( ){
     set_next_address( 6);
     get_next_address( );
     set_endianess( big_endianbig_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page tk{
    tk( ){
     set_address_increment( 1);
     set_next_address( 9);
     get_next_address( );
     add( dq);
     get_lower_bound( );
     get_aligment( );
     set_endianess( big_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map pb{
  dq cj;
  fa rj;
  dq fr;
    pb( ){
     auto_gen_memory_map( );
     set_top_unit( nx);
dq.add_to_memory_map( none); 
     set_type( hierach);
dq.set_access_rights_enum( dqtk); 
     set_data_word_width( 3);
     get_data_word_width( );
     set_prefix( dr);
     set_suffix( bb);
  }
}
;
csl_register iq{
    iq( ){
     set_range( [6:8]);
     set_atribute( read_write);
     add_logic( serial_input);
     add_logic( wr_en);
     set_lock_enable_bit( 1);
     set_count_direction( 2);
     stop_at_end_value( );
     add_logic( inc_signal);
     add_logic( dec_signal);
  }
}
;
csl_register yx{
    yx( ){
     set_width( 7);
     set_depth( 0);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 4);
     add_logic( bypass);
  }
}
;

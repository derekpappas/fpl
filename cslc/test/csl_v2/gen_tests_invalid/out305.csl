csl_enum nc {
	wb = 94,
	kn = 36,
	tm = 73,
	sk = 34,
	hc = 24
};
csl_enum bh {
	du,
	iv,
	xt,
	jq,
	fx,
	xd,
	er
};
csl_enum du {
	fr,
	we,
	uk,
	rr,
	wm,
	cg,
	od,
	ot,
	by,
	py,
	sb
};
csl_isa_instruction_format xn{
    xn( ){
     generate_decoder( igpp);
  }
}
;
csl_isa oe{
    oe( ){
     set_decoder_name( "vf");
     set_decoder_out_name_prefix( "dp");
     set_decoder_out_name_suffix( "xn");
     generate_decoder( hiigxwpp);
     print( isa.txt);
  }
}
;
csl_fifo vw{
   vw( ){
  }
}
;
csl_memory_map_page gh{
    gh( ){
     add_address_range( 7, 4);
     get_address_increment( );
     set_access_rights( access_read_write, access_read_write);
     add_reserved_address_range( 7, 9);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 0);
     get_aligment( );
     set_endianess( little_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page sy{
    sy( ){
     add_address_range( 3, 7);
     set_next_address( 7);
     set_data_word_width( 8);
     get_aligment( );
     set_endianess( little_endianlittle_endian);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map ke{
    ke( ){
     auto_gen_memory_map( );
     set_top_unit( hi);
     set_prefix( nc);
     get_prefix( );
     set_suffix( ix);
  }
}
;
csl_register jo{
    jo( ){
     set_type( LFSR);
     set_width( 6);
     add_logic( neg_output);
     add_logic( serial_input);
     add_logic( rd_en);
     add_logic( wr_en);
     init_value( 6);
     add_logic( gray_output);
     set_count_direction( 7);
     set_end_value( 4);
  }
}
;
csl_register ly{
    ly( ){
     set_depth( 9);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
  }
}
;

csl_enum or {
	or,
	el,
	va,
	ld,
	ck,
	xv,
	ri,
	pp,
	iw,
	xf,
	vk,
	fn,
	dl
};
csl_enum ke {
	ry,
	xh,
	re,
	up,
	ei,
	si,
	us,
	em,
	cw,
	em,
	vf,
	rt
};
csl_enum ry {
	iu,
	mu,
	bf,
	wa,
	oq,
	ej,
	gl,
	ty,
	to,
	rb
};
csl_isa_instruction_format rl{
    rl( ){
     set_width( 9);
     generate_decoder( ufnl);
  }
}
;
csl_isa cn{
    cn( ){
     set_decoder_name( "qs");
     set_decoder_out_name_prefix( "qt");
     set_decoder_out_name_suffix( "mt");
     generate_decoder( uu);
     print( isa.txt);
  }
}
;
csl_fifo xh{
   xh( ){
     add_logic( programable_depth, 0);
     add_logic( width_extend, 3);
     add_logic( credit);
  }
}
;
csl_memory_map_page wq{
    wq( ){
     set_next_address( 1);
     get_lower_bound( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page mx{
    mx( ){
     add_address_range( 1, 5);
     get_address_increment( );
     set_next_address( 3);
     set_access_rights( access_read, none);
     add_reserved_address_range( 7, 3);
     add( wq);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 0);
     get_data_word_wodth( );
     set_aligment( 4);
     set_endianess( big_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map wd{
    wd( ){
wq.add_to_memory_map( 8,access_read); 
wq.set_access_rights_enum( wq); 
     set_prefix( pj);
  }
}
;
csl_register bd{
    bd( ){
     set_type( SEMA);
     set_address( wd, 4);
     index_data_pair( wd, 1);
     set_count_amount( 3);
     set_count_direction( 5);
     add_logic( inc_signal);
  }
}
;
csl_register ah{
    ah( ){
     set_width( 3);
     set_depth( 8);
     add_logic( read_valid);
     set_const_value( 5);
     add_logic( bypass);
  }
}
;

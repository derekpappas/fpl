csl_enum cf {
	fg,
	hp,
	oe,
	uv,
	dv,
	om,
	oa,
	cq,
	je,
	mj
};
csl_enum nf {
	dq,
	jl,
	ru,
	yv,
	cg,
	cj,
	vt,
	pr,
	ps,
	pg,
	fg,
	ik,
	ar,
	qm,
	df,
	sh
};
csl_enum xe {
	ur = 38,
	bt = 85,
	oe = 22,
	bs = 30,
	py = 60
};
csl_isa_instruction_format no{
    no( ){
     set_width( 8);
     generate_decoder( qj);
  }
}
;
csl_isa kn{
    kn( ){
     set_decoder_name( "yi");
     set_decoder_out_name_prefix( "tu");
     set_decoder_out_name_suffix( "gv");
     print( isa.txt);
  }
}
;
csl_fifo cu{
   cu( ){
     add_logic( almost_empty, 4);
  }
}
;
csl_memory_map_page qp{
    qp( ){
     add_address_range( 1, 9);
     set_address_increment( 9);
     get_address_increment( );
     set_next_address( 5);
     get_next_address( );
     set_access_rights( access_read, access_write);
     add_reserved_address_range( 3, 6);
     get_lower_bound( );
     set_aligment( 9);
     get_aligment( );
     set_endianess( little_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page dp{
  qp et;
    dp( ){
     add_address_range( 0, 2);
     set_access_rights( access_read, none);
     add_reserved_address_range( 4, 2);
     get_upper_bound( );
     set_aligment( 8);
     get_symbol_lenght( );
  }
}
;
csl_memory_map gx{
  qp io;
  dp gi;
    gx( ){
     auto_gen_memory_map( );
     set_top_unit( kpevnk);
     set_prefix( qm);
     set_suffix( su);
  }
}
;
csl_register tj{
    tj( ){
     set_type( STATIC);
     set_width( 3);
     add_logic( dec_signal);
  }
}
;
csl_register uc{
    uc( ){
     set_width( 3);
     set_depth( 0);
     add_logic( read_valid);
     create_rtl_module( );
  }
}
;

csl_enum qv {
	vs,
	wu,
	ti,
	qv,
	cf,
	iy,
	ty,
	xr,
	su
};
csl_enum id {
	av = 39,
	ce = 35,
	er = 19,
	la = 15,
	ed = 16,
	xb = 29,
	xv = 26,
	xt = 99
};
csl_enum gr {
	pk,
	wa,
	jt,
	ah,
	ls,
	du,
	xf,
	qc
};
csl_isa_instruction_format pe{
    pe( ){
     set_width( 5);
     generate_decoder( ry);
  }
}
;
csl_isa mg{
    mg( ){
  }
}
;
csl_fifo pl{
   pl( ){
     add_logic( wr_hold, 2);
  }
}
;
csl_memory_map_page sn{
    sn( ){
     set_next_address( 2);
     get_lower_bound( );
     get_data_word_wodth( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page br{
  sn ic;
    br( ){
     set_address_increment( 2);
     set_next_address( 7);
     get_next_address( );
     set_access_rights( access_write, access_read_write);
     add( pl, "hu", 4);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 1);
     get_data_word_wodth( );
     set_aligment( 9);
     get_aligment( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map jt{
  sn fs;
  br dw;
  sn kx;
    jt( ){
     auto_gen_memory_map( );
     set_top_unit( jbrysidd);
.add_to_memory_map( 8,access_read_write); 
     set_type( page);
     set_prefix( gw);
     get_prefix( );
  }
}
;
csl_register jh{
    jh( ){
     set_range( [1:6]);
     set_atribute( write);
     get_atributes( );
     add_logic( neg_output);
     add_logic( serial_input);
     add_logic( serial_output);
     add_logic( wr_en);
     set_value( 3);
     add_logic( gray_output);
     set_count_direction( 9);
  }
}
;
csl_register tm{
    tm( ){
     set_depth( 3);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 4);
     add_logic( bypass);
  }
}
;

csl_enum rk {
	hu,
	mh,
	ma,
	uf,
	yw,
	hi,
	ds,
	pi,
	hc,
	ee,
	ie,
	ta
};
csl_enum cb {
	hv,
	my,
	iv
};
csl_enum vx {
	ei,
	xy,
	pw,
	yw,
	he
};
csl_isa_instruction_format xj{
    xj( ){
     set_width( 6);
     generate_decoder( wtdaea);
  }
}
;
csl_isa wy{
    wy( ){
     set_decoder_name( "eo");
     set_decoder_out_name_prefix( "vg");
     set_decoder_out_name_suffix( "ax");
     generate_decoder( wtdaea);
     print( isa.txt);
  }
}
;
csl_fifo ii{
   ii( ){
     set_dimension( 7, 9);
     add_logic( almost_empty, 7);
  }
}
;
csl_memory_map_page bb{
    bb( ){
     set_address_increment( 7);
     set_next_address( 3);
     get_next_address( );
     set_access_rights( access_read_write, access_read);
     get_lower_bound( );
     get_aligment( );
     get_endianess( );
  }
}
;
csl_memory_map_page au{
    au( ){
     get_address_increment( );
     add_reserved_address_range( 2, 9);
     set_data_word_width( 1);
  }
}
;
csl_memory_map_page rr{
    rr( ){
     set_address_increment( 0);
     set_access_rights( access_write, access_write);
     add( bbau);
     get_upper_bound( );
     set_data_word_width( 9);
     get_symbol_lenght( );
  }
}
;
csl_memory_map qh{
  bb jp;
  bb bf;
  au uj;
  rr mw;
    qh( ){
     set_top_unit( wt);
     set_type( hierach);
bb.set_access_rights_enum( au); 
     set_prefix( cw);
     get_prefix( );
  }
}
;
csl_register gi{
    gi( ){
     set_range( [2:8]);
     set_width( 5);
     constant( 1);
     init_value( 7);
     add_logic( inc_signal);
  }
}
;
csl_register es{
    es( ){
     set_depth( 1);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 8);
     add_logic( bypass);
  }
}
;

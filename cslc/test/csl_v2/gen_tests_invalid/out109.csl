csl_enum kr {
	wj,
	ij,
	dk,
	cj,
	xl,
	fk,
	wx
};
csl_enum tl {
	my,
	jh,
	ve,
	mr,
	lo,
	nv,
	sx,
	qq
};
csl_enum ib {
	cn,
	ng,
	yl,
	ug
};
csl_isa_instruction_format hf{
    hf( ){
     set_width( 8);
     generate_decoder( bn);
  }
}
;
csl_isa_instruction bl : hf{
    bl( ){
    set_asm_mnemonic( csl_list "qm", "sb", "qi");
  }
}
;
csl_isa wv{
    wv( ){
     set_decoder_out_name_suffix( "jx");
     generate_decoder( bnjvry);
  }
}
;
csl_fifo in{
   in( ){
     add_logic( wr_release);
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page jf{
    jf( ){
     add_address_range( 1, 8);
     set_next_address( 3);
     get_next_address( );
     add( in, "wn", 0);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 0);
     get_aligment( );
     set_endianess( little_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page sa{
    sa( ){
  }
}
;
csl_memory_map_page yp{
    yp( ){
     add_reserved_address_range( 2, 9);
     get_lower_bound( );
     get_upper_bound( );
     set_aligment( 5);
     set_endianess( little_endian);
  }
}
;
csl_memory_map cu{
    cu( ){
     auto_gen_memory_map( );
     set_top_unit( jv);
jfsayp.set_access_rights_enum( sa); 
     set_data_word_width( 6);
     get_data_word_width( );
     set_suffix( ii);
  }
}
;
csl_register eh{
    eh( ){
     set_type( EVNT);
     set_width( 4);
     set_address( cu, );
     index_data_pair( cu, 9);
     add_logic( serial_input);
     add_logic( serial_output);
     add_logic( rd_en);
     set_value( 9);
     reset_value( 2);
     clear_value( 4);
     set_count_direction( 9);
     set_end_value( 5);
     set_start_value( 4);
     add_logic( cnt_dir_signal);
  }
}
;
csl_register qw{
    qw( ){
     set_width( 1);
     get_width( );
     set_depth( 3);
     add_logic( read_valid);
     create_rtl_module( );
  }
}
;

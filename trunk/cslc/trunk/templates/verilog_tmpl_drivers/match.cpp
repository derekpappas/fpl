#include "../html_template.h"

using namespace std;
using namespace tmpl;

//----------------------------------------------------------------------------
int main(int argc, char* argv[]) 
{
 // create a template object
  // html_template templ("/home/Monica/work/svn_repo/repos/trunk/cslc/trunk/templates/verilog_tb_templates/match.tmpl");
string path = getenv("WORK");
html_template templ(path + "/trunk/templates/verilog_tb_templates/match.tmpl");

 char file_name[20] = "TB.v";
 //------------input interface--------------------------
 //-------------DUT output signals----------------------
 //these signals are inputs from signals.tmpl
 vector<string> dut_out_wires;
 vector<string>::const_iterator iter1;
 dut_out_wires.push_back("a0_out_p_out1");
 dut_out_wires.push_back("a0_out_p_out2");
 
 //-------------TB expected signals(generated by vectors)------
 //these signals are inputs from signals.tmpl
 vector<string> dut_exp_wires;
 //vector<string>::const_iterator iter2;
 dut_exp_wires.push_back("a0_out_p_out1_expected");
 dut_exp_wires.push_back("a0_out_p_out2_expected");

 //----------clk/reset signals----------------------------------
 //these signals are inputs from signals.tmpl
 string clk = "clk";
 string testbench_reset_ = "testbench_reset_";
 //--------------------------------------------------------------
 //----------------------------------------------------
 //these signals are declared in tb and are inputs from signals.tmpl
 string exp_match_count = "exp_a0_match_count";
 string exp_mismatch_count = "exp_a0_mismatch_count";
 string exp_transaction_count = "exp_a0_transaction_count";
 string exp_mismatch = "exp_a0_mismatch_count";

 //---------------------------------------------
 //-----------inputs from param.tmpl------------
 string EXP_ADDR_WIDTH = "EXP_ADDR_WIDTH";
 string EXP_VECTOR_MAX_ERR = "EXP_VECTOR_MAX_ERR";
 //---------------------------------------------
 // -----------clk period----------------------
 //------------from vectors---------------------
 string clk_per = "10";
 //--------------------------------------------

 int i=0;
 loop_t match_list;
 //loop_t mismatch_list;
 row_t row1;
 
 for(iter1 = dut_out_wires.begin(); iter1 != dut_out_wires.end(); iter1++){
   string match = *iter1 + "_match_en";
   string mismatch = *iter1 + "_mismatch_en";
   row1("match_en") = match;
   row1("mismatch_en") = mismatch;
   row1("out_signal")= *iter1;
   row1("exp_signal")= dut_exp_wires.at(i);
   i++;
   match_list += row1;
 }
 templ("match_list") = match_list;
 //------------------------------------------------------------
 
 templ("clk") = clk;
 templ("testbench_reset_") = testbench_reset_;
 templ("mismatch_count") = exp_mismatch_count;
 templ("match_count") = exp_match_count;
 templ("EXP_ADDR_WIDTH") = EXP_ADDR_WIDTH; 
 templ("EXP_VECTOR_MAX_ERR") = EXP_VECTOR_MAX_ERR;

 //-----------------------------------------------------
 loop_t mismatches;
 loop_t matches;
 row_t row2;
 for(iter1 = dut_out_wires.begin(); iter1 != dut_out_wires.end(); iter1++){
   string mismatch = *iter1 + "_mismatch_en";
   row2("mismatch_en") = mismatch;
   row2("transaction_count") = exp_transaction_count;
   row2("mismatch_count") = exp_mismatch_count;
   mismatches +=row2;
 }
 for(iter1 = dut_out_wires.begin(); iter1 != dut_out_wires.end(); iter1++){
   string match = *iter1 + "_match_en";
   row2("match_en") = match;
   row2("transaction_count") = exp_transaction_count;
   row2("match_count") = exp_match_count;
   matches +=row2;
 }
templ("mismatches") = mismatches;
templ("matches") = matches;
 templ("clk_per")= clk_per;
//---------------------------------------------------------

// cout << templ;
//-------------add to tb file-------------
  ofstream testbench(file_name, ios::app);
  testbench << templ;

 return 0;
}
 

 

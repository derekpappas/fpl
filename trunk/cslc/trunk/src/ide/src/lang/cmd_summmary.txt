csl_signal signal_object_name;
csl_signal signal_object_name0(signal_object_name1);
csl_signal signal_object_name([signal_data_type][,width]);
csl_signal signal_object_name([signal_data_type,]upper_limit,lower_limit);
csl_signal signal_object_name([signal_data_type,]bitrange_object_name);
signal_object_name.set_width(numeric_expression);
int signal_object_name.get_width();
signal_object_name.set_bitrange(bitrange_object_name);
bitrange_object signal_object_name.get_bitrange();
signal_object_name.set_range(upper_limit, lower_limit);
signal_object_name.set_lower_index(numeric_expression);
int signal_object_name.get_lower_index();
signal_object_name.set_upper_index(numeric_expression);
int signal_object_name.get_upper_index();
signal_object_name.set_offset(numeric_expression);
constant_numeric_expression signal_object_name.get_offset();
signal_object_name.set_type(csl_signal_type);
csl_signal_type signal_object_name.get_type();
signal_object_name.set_attr(csl_signal_attr);
csl_list_object_name.set_attr(csl_signal_attribute);
signal_object_name.set_number_of_dimensions(numeric_expression);
int signal_object_name.get_number_of_dimensions();
signal_object_name.set_dim_width(dimension_number, numeric_expression);
int signal_object_name.get_dim_width(dimension_number);
signal_object_name.set_dim_bitrange(dimension_number,bitrange_object_name);
bitrange_object signal_object_name.get_dim_bitrange(dimension_number);
signal_object_name.set_dim_range(dimension_number,upper_limit, lower_limit);
signal_object_name.set_dim_lower_index(dimension_number, numeric_expression);
int signal_object_name.get_dim_lower_index(dimension_number);
signal_object_name.set_dim_upper_index(dimension_number, numeric_expression);
int signal_object_name.get_dim_upper_index(dimension_number);
signal_object_name.set_dim_offset(dimension_number, constant_numeric_expression);
constant_numeric_expression signal_object_name.get_dim_offset(dimension_number);
csl_signal_group signal_group_object_name(list_of_objects | signal_list_object);
csl_signal_group signal_group_object_name(list_of_signals);
csl_signal_group signal_group_object_name(list_object_name);
csl_signal_group signal_group_object_name(signal_group_object_name);
signal_group_object_name.generate_individual_rtl_signals(status);
signal_group_object_name.add_signal(signal_object_name);
signal_group_object_name.add_signal_list(list_object);
signal_group_object_name.remove_signal(signal_object_name);
signal_group_object_name.remove_signal_list(list_object);
csl_unit unit_object_name;
scope unit_object_name { csl statement+ }
unit_object_name0.add_instance(unit_object_name1, instance_object_name[.formal_connection_object_name(actual_connection_object_name)]);
unit_object_name.add_instance_list(unit_object_name, list_object);
unit_object_name.add_port(port_direction[,port_type][,bitrange],port_name);
unit_object_name.add_port(port_direction[,port_type][,bitrange],signal_object_name);
unit_object_name.add_port_list(port_direction[,port_type][,bitrange],list_object);
unit_object_name.add_interface(port_direction,signal_group);
interface_object_name unit_object_name.get_inputs();
interface_object_name unit_object_name.get_outputs();
port_object_name.reverse_port();
csl_interface interface_object_name;
csl_interface interface_object_name1(interface_object_name0);
csl_interface interface_object_name(csl_list (port_direction[, port_width][, signal_type]));
unit_object_name.add_interface(interface_name[,interface_instance_name]);
interface_object_name.add_interface(interface_name[,interface_instance_name]);
interface_object unit_object_name.get_interface();
unit_object_name.add_interface(interface_object_name0.get_inputs(),interface_object_name);
interface_object unit_object_name.get_interface(port_direction);
unit_object_name.add_interface_list(interface_list_name);
interface_object_name.add_port(port_direction[,port_type][,bitrange],port_name);
interface_object_name.remove_port(port_name);
interface_object_name.add_port_list(port_direction[,port_type][,bitrange],list_object);
interface_object_name.remove_port_list(list_object);
interface_object_name.add_interface(port_direction,signal_group);
interface_object_name.reverse_interface()
interface_object_name.reverse_interface()
unit_object_name.add_signal_list([signal_data_type,][bitrange,] list_object);
unit_object_name.add_signal_group(signal_group_name);
unit_object_name.add_unit_parameter(parameter_object_name, default_value);
instance_object_name.override_unit_parameter(parameter_object_name, parameter_value);
unit_object_name.set_unit_prefix(prefix_string[,prefix_specifier]);
string unit_object_name.get_unit_prefix();
unit_object_name.set_signal_prefix(prefix_string);
string unit_object_name.get_signal_prefix();
unit_object_name.set_signal_prefix_local(prefix_string);
string unit_object_name.get_signal_prefix_local();
unit_object_name.input_verilog_type(verilog_type);
unit_object_name.output_verilog_type(verilog_type);
unit_object_name.set_instance_alteration_bit(status);
connection_object_name0.connect(connection_object_name1);
connect(connection_object_name0,connection_object_name1);
connection_object_name.connect({.formal_connection_object_name( actual_connection_object_name)}+);
signal_object_name.merge(merg_op,list_of_signals);
signal_object_name.merge(merg_op, signal_list_object_name);


csl_state_data state_data_object_name;
state_data_name.set_dut_mem(dut_name[,mem_cell_list][,radix]);
state_data_name.set_dut_mem_init(binary_value | hex_value);
state_data_name.set_dut_compare_trigger(event_object | clock_signal);
state_data_name.set_id(numeric_expresion);
cint state_data_name.get_id();
state_data_name.set_update_source(source_name[,source_type][,radix]);
state_data_name.set_dut_output_filename(filename);
state_data_name.set_prefix(string);
string state_data_name.get_prefix();
state_data_name.set_max_num_states(numeric_expresion);
int state_data_name.get_max_num_states();
state_data_name.add_reset(signal_object_name);
state_data_name.add_clock(signal_object_name);
state_data_name.add_event(event_object_name, clock_object_name);
state_data_name.set_max_error_count(numeric_expression);
state_data_name.set_max_error_count(numeric_expression);
int state_data_name.get_max_error_count();
csl_vector vector_object_name(width);
vector_object_name.set_prefix(string);
string vector_object_name.get_prefix();
vector_object_name.set_connection_type(connection_type);
vector_object_name.set_id(numeric_expresion);
int vector_object_name.get_id();
vector_object_name.add_comment();
vector_object_name.set_max_num_vectors(numeric_expression);
int vector_object_name.get_max_num_vectors();
vector_object_name.set_source(source_name[,source_type][,radix]);
vector_object_name.connect(
testbench_object_name.dut.interface_instance_name);
vector_object_name.add_event(event_object_name | clock_object_name);
vector_object_name.add_reset(signal_object_name);
vector_object_name.add_tb_read_event(event_object_name);
vector_object_name.add_signal(signal_object);
vector_object_name.add_signal_group(signal_group_name);
vector_object_name.get_signals_values(unit_obj_name1,[unit_obj_name2,...] unit_obj_nameN);
vector_object_name.print_signal();
vector_object_name.print_signal_values_list(time);
vector_object_name.set_max_error_count(numeric_expresion);
int vector_object_name.get_max_error_count();


csl_testbench testbench_object_name;
csl_testbench testbench_object_name(testbench_type);
testbench_object_name.add_dut_instance(unit_name, instance_name);
testbench_object_name.set_filename(string);
testbench_object_name.include_file(include_filename);
testbench_object_name.add_clock_gen(clk_gen_object_name);
testbench_object_name.add_reset(signal_object_name);
testbench_object_name.set_type(diagnostic | stim_expect | serial_bus);
testbench_object_name.set_transaction_timeout_count(numeric_expresion);
int testbench_object_name.get_transaction_timeout_count();
testbench_object_name.set_simulation_timeout_count(numeric_expresion);
int testbench_object_name.get_simulation_timeout_count();
testbench_object_name.add_vector_instance(testbench_vector_object_name, testbench_vector_instance_name);
testbench_object_name.add_arch_state_instance(arch_state_object_name, arch_state_instance_name);
testbench_object_name.generate_waves(fsdb | vsd);
testbench_object_name.set_generate_waves_filename(filename);
testbench_object_name.inject_stalls();
clk_gen_object_name.clk_output(signal_object_name);
clk_gen_object_name.set_period(numeric_expression);
clk_gen_object_name.set_timebase(timebase);
csl_signal_pattern_generator sign_patt_gen_name;
sign_patt_gen_name.signal_name(signal_object_name);
sign_patt_gen_name.set_pwl(time |time_expresion, value);
sign_patt_gen_name.add_reset(signal_object_name);

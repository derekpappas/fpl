<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="CSLC Main" default="help">

  <property name="project.parent.dir"  value=".."/>
  <property name="project.parent.file" value="build.xml"/>

  <!-- Check all dependencies -->
  <target name="check.dependencies" unless="no.dependencies">
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>
    <typedef resource="cpptasks.types"/>
    <taskdef resource="cpptasks.tasks"/>

    <antfetch dir="${project.parent.dir}" antfile="${project.parent.file}" target="set.project.list" inheritAll="false"
              return="build.dir,
                      antlr.lib,
                      antlr.src,
                      antlr.inc,
                      antlr.jar,
                      we.dir,
                      we.lib,
                      error.lib,
                      support.dir,
                      support.lib,
                      csim.dir,
                      csim.lib,
                      ver_p.dir,
                      ver_p.lib,
                      csl_p.dir,
                      csl_p.lib,
                      preproc.dir,
                      preproc.lib,
                      cdom.dir,
                      cdom.lib,
                      cslom.dir,
                      cslom.lib,
                      adapter.dir,
                      adapter.lib,
                      cslom_gen.dir,
                      cslom_gen.lib,
                      ar.dir,
                      ar.lib,
                      cslom_ck.dir,
                      cslom_ck.lib,
                      cslc.dir,
                      cslc.binary"/>
  </target>

  <!-- Set all properties -->
  <target name="set.all.properties" depends="check.dependencies" unless="properties.set">
    <property name="no.dependencies"     value="on"/>
    <property name="properties.set"      value="on"/>
    <property name="project.root.dir"    value="${build.dir}/${cslc.dir}"/>
    <property name="project.src.list"    value="cslc_Typedef.cpp,
                                                new_cslc.cpp,
                                                new_main.cpp"/>
    <property name="project.driver.list" value=""/>

    <mkdir dir="${project.root.dir}"/>
  </target>

  <!-- Create build directiory -->
  <target name="create.build.dir">
    <if>
      <isset property="project.subdir"/>
      <then>
        <property name="project.build.dir" value="${project.root.dir}/${project.subdir}"/>
      </then>
      <else>
        <property name="project.build.dir" value="${project.root.dir}"/>
      </else>
    </if>

    <echo message="Build dir: '${project.build.dir}'" level="info"/>
    <mkdir dir="${project.build.dir}"/>
  </target>

  <!-- Wall flag -->
  <target name="wall">
    <echo message="---------------------- wall flag on"/>
    <property name="wall.flag" value="on"/>
  </target>

  <!-- RLM off flag -->
  <target name="rlm_off">
    <echo message="---------------------- rlm_off flag on"/>
    <property name="rlm.off.flag" value="on"/>
  </target>

  <!-- Debug target -->
  <target name="debug" depends="set.all.properties">
    <echo message="---------------------- debug flag on"/>
    <property name="debug.flag"     value="on"/>
    <property name="project.subdir" value="debug"/>
    <runtarget target="compile"/>
  </target>

  <!-- Clean target -->
  <target name="clean" depends="set.all.properties">
    <echo message="==================== Cleaning ${cslc.dir} ===================="/>
    <delete>
      <fileset dir="${project.root.dir}" includes="**/*"/>
    </delete>
  </target>

  <!-- Compile this project -->
  <target name="compile" depends="set.all.properties,create.build.dir">
    <echo message="==================== Compiling in ${cslc.dir} ===================="/>
    <cc outfile="${project.build.dir}/${cslc.binary}">
      <compiler name="g++">
        <fileset dir="${basedir}" includes="${project.src.list}"/>
        <compilerarg value="-g"                  if="debug.flag"/>
        <compilerarg value="-ftest-coverage"     if="debug.flag"/>
        <compilerarg value="-fprofile-arcs"      if="coverageFlag"/>
        <compilerarg value="-D__RELEASE_VERSION" if="release.flag"/>
        <compilerarg value="-DNDEBUG"            if="release.flag"/>
        <compilerarg value="-DBOOST_FILESYSTEM_NO_DEPRECATED"/>
        <compilerarg value="-Wall"               if="wall.flag"/>
        <!--compilerarg value="-DQCSLOM_LIBRARY"/>
        <compilerarg value="-DQT_NO_KEYWORDS"/>
        <compilerarg value="-DQT_CORE_LIB"/>
        <compilerarg value="-DQT_SHARED"/>
        <compilerarg value="-I/opt/tools/qtsdk-2009.03/qt/include/QtCore"/>
        <compilerarg value="-I/opt/tools/qtsdk-2009.03/qt/include"/-->
        <compilerarg value="-D__RLM_OFF"/>
        <compilerarg value="-I${antlr.inc}"/>
      </compiler>

      <linker name="g++">
        <libset libs="stdc++,m,pthread,hpdf,png,xerces-c,boost_filesystem" type="shared"/>
        <!--libset dir="/opt/tools/qtsdk-2009.03/qt/lib" libs="QtCore" type="shared"/-->
        <libset libs="gcov" type="static"  if="coverageFlag"/>
        <libset dir="${build.dir}/${we.dir}"        libs="${we.lib},${error.lib}" unless="v2vFlag"/>
        <libset dir="${build.dir}/${preproc.dir}"   libs="${preproc.lib}"         unless="v2vFlag"/>
        <libset dir="${build.dir}/${ver_p.dir}"     libs="${ver_p.lib}"           unless="v2vFlag"/>
        <libset dir="${build.dir}/${cdom.dir}"      libs="${cdom.lib}"            unless="v2vFlag"/>
        <libset dir="${build.dir}/${csl_p.dir}"     libs="${csl_p.lib}"           unless="v2vFlag"/>
        <libset dir="${build.dir}/${cslom.dir}"     libs="${cslom.lib}"           unless="v2vFlag"/>
        <libset dir="${build.dir}/${adapter.dir}"   libs="${adapter.lib}"         unless="v2vFlag"/>
        <libset dir="${build.dir}/${cslom_ck.dir}"  libs="${cslom_ck.lib}"        unless="v2vFlag"/>
        <libset dir="${build.dir}/${cslom_gen.dir}" libs="${cslom_gen.lib}"       unless="v2vFlag"/>
        <libset dir="${build.dir}/${ar.dir}"        libs="${ar.lib}"              unless="v2vFlag"/>
        <libset dir="${build.dir}/${support.dir}"   libs="${support.lib}"         unless="v2vFlag"/>
        <libset dir="${antlr.src}"                  libs="${antlr.lib}"           />
        <!-- FIX!!!! libset dir="${basedir}"                    libs="rlm"                    unless="rlm.off.flag"/-->
      </linker>
    </cc>

    <symlink action="single" link="${project.root.dir}/${cslc.binary}" resource="${project.build.dir}/${cslc.binary}" overwrite="true"/>

    <if>
      <not>
        <isset property="rlm.off.flag"/>
      </not>
      <then>
        <copy file="${basedir}/generic_license.lic" tofile="${project.build.dir}/generic_license.lic"/>
        <symlink action="single" link="${project.root.dir}/generic_license.lic" resource="${project.build.dir}/generic_license.lic" overwrite="true"/>
      </then>
    </if>
  </target>

  <!-- Compile drivers -->
  <target name="drivers"/>

  <!-- Display the help/usage -->
  <target name="help">
    <ant dir="${project.parent.dir}" antfile="${project.parent.file}" target="help" inheritAll="false"/>
  </target>

</project>

<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="CSLC Verilog Parser" default="help">

  <property name="project.parent.dir"  value="../.."/>
  <property name="project.parent.file" value="build.xml"/>

  <!-- Check all dependencies -->
  <target name="check.dependencies" unless="no.dependencies">
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>
    <typedef resource="cpptasks.types"/>
    <taskdef resource="cpptasks.tasks"/>

    <antfetch dir="${project.parent.dir}" antfile="${project.parent.file}" target="set.project.list" inheritAll="false"
              return="build.dir,
                      antlr.lib,
                      antlr.src,
                      antlr.inc,
                      antlr.jar,
                      ver_p.dir,
                      ver_p.lib"/>
  </target>

  <!-- Set all properties -->
  <target name="set.all.properties" depends="check.dependencies" unless="properties.set">
    <property name="no.dependencies"     value="on"/>
    <property name="properties.set"      value="on"/>
    <property name="project.root.dir"    value="${build.dir}/${ver_p.dir}"/>
    <property name="project.build.lib"   value="lib${ver_p.lib}.a"/>
    <property name="project.src.list"    value="Base.cpp,
                                                VerilogNumber.cpp,
                                                VerilogToken.cpp,
                                                VerilogLexerUtils.cpp,
                                                ToolsParser.cpp,
                                                Tools.cpp,
                                                VerilogLexer.cpp,
                                                VerilogParser.cpp,
                                                VerilogTreeWalker.cpp"/>
    <property name="project.driver.list" value=""/>

    <property name="grammar.src.list"    value="verilog.lexer.g,
                                                verilog.parser.g,
                                                verilog.walker.g"/>
    <property name="grammar.output.list" value="VerilogLexer.cpp,
                                                VerilogParser.cpp,
                                                VerilogParserTokenTypes.hpp,
                                                VerilogTokenTypes.hpp,
                                                VerilogTreeWalker.cpp,
                                                VerilogTreeWalkerTokenTypes.hpp,
                                                VerilogLexer.hpp,
                                                VerilogParser.hpp,
                                                VerilogParserTokenTypes.txt,
                                                VerilogTokenTypes.txt,
                                                VerilogTreeWalker.hpp,
                                                VerilogTreeWalkerTokenTypes.txt"/>

    <mkdir dir="${project.root.dir}"/>
  </target>

  <!-- Create build directiory -->
  <target name="create.build.dir">
    <if>
      <isset property="project.subdir"/>
      <then>
        <property name="project.build.dir" value="${project.root.dir}/${project.subdir}"/>
      </then>
      <else>
        <property name="project.build.dir" value="${project.root.dir}"/>
      </else>
    </if>

    <echo message="Build dir: '${project.build.dir}'" level="info"/>
    <mkdir dir="${project.build.dir}"/>
  </target>

  <!-- Wall flag -->
  <target name="wall">
    <echo message="---------------------- wall flag on"/>
    <property name="wall.flag" value="on"/>
  </target>

  <!-- Debug target -->
  <target name="debug" depends="set.all.properties">
    <echo message="---------------------- debug flag on"/>
    <property name="debug.flag"     value="on"/>
    <property name="project.subdir" value="debug"/>
    <runtarget target="compile"/>
  </target>

  <!-- Clean target -->
  <target name="clean" depends="set.all.properties">
    <echo message="==================== Cleaning ${ver_p.dir} ===================="/>
    <delete>
      <fileset dir="${project.root.dir}" includes="**/*"/>
    </delete>
  </target>

  <!-- Compile this project -->
  <target name="compile" depends="set.all.properties,create.build.dir">
    <echo message="==================== Compiling in ${ver_p.dir} ===================="/>
    <runtarget target="generate.grammar.files"/>
    <runtarget target="compile.src"/>
  </target>

  <!-- Generate grammar files -->
  <target name="generate.grammar.files">
    <echo message="-------------------- Checking grammar files --------------------"/>
    <outofdate>
      <sourcefiles>
        <filelist dir="${basedir}" files="${grammar.src.list}"/>
      </sourcefiles>
      <targetfiles>
        <filelist dir="${basedir}" files="${grammar.output.list}"/>
      </targetfiles>
      <sequential>
        <echo message="Grammar files are out of date" level="info"/>
        <delete>
          <fileset dir="${basedir}" includes="${grammar.output.list}"/>
        </delete>

        <for list="${grammar.src.list}" param="grammar" trim="true">
          <sequential>
            <antlr target="@{grammar}" outputdirectory="${basedir}">
              <classpath location="${antlr.jar}"/>
            </antlr>
          </sequential>
        </for>
      </sequential>
    </outofdate>
  </target>

  <!-- Compile all source files -->
  <target name="compile.src">
    <echo message="-------------------- Compiling ${ver_p.lib} --------------------"/>
    <cc outfile="${project.build.dir}/${ver_p.lib}" outtype="static">
      <compiler name="g++">
        <fileset dir="${basedir}" includes="${project.src.list}"/>
        <compilerarg value="-g"                  if="debug.flag"/>
        <compilerarg value="-ftest-coverage"     if="debug.flag"/>
        <compilerarg value="-fprofile-arcs"      if="coverageFlag"/>
        <compilerarg value="-D__RELEASE_VERSION" if="release.flag"/>
        <compilerarg value="-DNDEBUG"            if="release.flag"/>
        <compilerarg value="-Wall"               if="wall.flag"/>
        <compilerarg value="-I${antlr.inc}"/>
      </compiler>
    </cc>

    <symlink action="single" link="${project.root.dir}/${project.build.lib}" resource="${project.build.dir}/${project.build.lib}" overwrite="true"/>
  </target>

  <!-- Compile drivers -->
  <target name="drivers" depends="set.all.properties">
    <echo message="==================== Compiling drivers in ${ver_p.dir} ===================="/>
    <for list="${project.driver.list}" param="driver" trim="true">
      <sequential>
        <echo message="File '${basedir}/@{driver}'"/>
        <cc outfile="${project.root.dir}/@{driver}">
          <compiler name="gcc">
            <fileset dir="${basedir}" includes="@{driver}.cpp"/>
            <compilerarg value="-g"                  if="debug.flag"/>
            <compilerarg value="-D__RELEASE_VERSION" if="release.flag"/>
            <compilerarg value="-DNDEBUG"            if="release.flag"/>
            <compilerarg value="-Wall"               if="wall.flag"/>
            <compilerarg value="-I${antlr.inc}"/>
          </compiler>

          <linker name="gcc">
            <libset libs="stdc++"/>
            <libset dir="${antlr.src}" libs="${antlr.lib}"/>
            <libset dir="${project.root.dir}" libs="${ver_p.lib}"/>
          </linker>
        </cc>
      </sequential>
    </for>
  </target>

  <!-- Display the help/usage -->
  <target name="help">
    <ant dir="${project.parent.dir}" antfile="${project.parent.file}" target="help" inheritAll="false"/>
  </target>

</project>

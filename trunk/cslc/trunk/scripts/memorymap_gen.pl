#!/usr/bin/perl


use Switch;               # the switch/case command
use File::Find;           # traversing the directory tree
use File::Basename;       # retrieving the basename of a directory
use File::Path;           # mkpath command

use strict;

#constants used in tests
my $RANGE_FREE = "range_free";
my $RANGE_RESV = "range_reserved";
my $RANGE_NOTF = "range_not_free";
my $RANGE_ILLE = "range_illegal";
my $RANGE_OBL  = "outer_bounds_lower";
my $RANGE_OBU  = "outer_bounds_upper";
my $RANGE_OBLU = "outer_bounds_lower_upper";
my $RANGE_OVL  = "overlap_bound_lower";
my $RANGE_OVU  = "overlap_bound_upper";
my $RANGE_OVLU = "overlap_bound_lower_upper";
my $MM         = "mem_map";
my $MMP        = "mem_map_page";
my $RNG        = "range";
my $RF         = "reg_file"; 

#var for the test name
my $FREE     = "free";
my $ILLEGAL  = "ille";
my $RESERVED = "resv";
my $NOT_FREE = "notf";
my $LOC      = "location";
my $ONE      = "_with_one_";
my $TWO      = "_with_two_";
my $THREE    = "_with_three_";
my $FOUR     = "_with_four_";

#var used in tests
my $classMemoryMap     = "csl_memory_map";
my $memoryMapName      = "mem";
my $classMemoryMapPage = "csl_memory_map_page";
my $memoryMapPageName  = "mempage";
my $addAdrRange        = "add_address_range";
my $addAdrRangeResv    = "add_reserved_address_range";
my $addAdrRangeNotFree = "set_access_rights";
my $addAdrRangeAttr    = "HWR, access_none";
my $addObject          = "add";
my $classRegisterFile  = "csl_register_file";
my $registerFileName1  = "reg1";
my $registerFileName2  = "reg2";
my $classUnit          = "csl_unit";
my $unitName           = "u";
my $memAdrRange        = " 128, 1024";
my $memAdrRangeResv    = " 128, 256";
my $memAdrRangeNotFree = " 512: 544";
#my $memAdrRangeLower   = "40";
#my $memAdrRangeUpper   = "80";

my @rangeType = ($RANGE_FREE, $RANGE_RESV, $RANGE_NOTF, $RANGE_ILLE, $RANGE_OBL, $RANGE_OBU, $RANGE_OBLU, $RANGE_OVL, $RANGE_OVU, $RANGE_OVLU);
my %range_mmp ;
   $range_mmp{$RANGE_FREE } = " 256";
   $range_mmp{$RANGE_RESV } = " 128";
   $range_mmp{$RANGE_NOTF } = " 512";
   $range_mmp{$RANGE_ILLE } = " 0";
   $range_mmp{$RANGE_OBL  } = " 64";
   $range_mmp{$RANGE_OBU  } = " 1025";
   $range_mmp{$RANGE_OBLU } = " 100";
   $range_mmp{$RANGE_OVL  } = " 100";                
   $range_mmp{$RANGE_OVU  } = " 1000";                
   $range_mmp{$RANGE_OVLU } = " 1000";

#my @location1Mmp = ($FREE, $ILLEGAL, $RESERVED); 
#my @location2Mmp = ($FREE, $ILLEGAL, $RESERVED, $NOT_FREE);
#my @rangeArray   = ("0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150", "160", "170", "180", "190");

#legend

my %range_description_map;
   $range_description_map{$RANGE_FREE } = "//one csl_register_file will be inserted at a free location in the csl_memory_map_page";
   $range_description_map{$RANGE_RESV } = "//one csl_register_file will be inserted at a reserved location in the csl_memory_map_page";
   $range_description_map{$RANGE_NOTF } = "//one csl_register_file will be inserted at a not free location in the csl_memory_map_page";
   $range_description_map{$RANGE_ILLE } = "//one csl_register_file will be inserted at a illegal location in the csl_memory_map_page";
   $range_description_map{$RANGE_OBL  } = "//one csl_register_file will be inserted at a out of bounds lower location in the csl_memory_map_page";
   $range_description_map{$RANGE_OBU  } = "//one csl_register_file will be inserted at a out of bounds upper location in the csl_memory_map_page";
   $range_description_map{$RANGE_OBLU } = "//one csl_register_file will be inserted at a out of bounds lower and upper location in the csl_memory_map_page";
   $range_description_map{$RANGE_OVL  } = "//one csl_register_file will be inserted at a overlap lower location in the csl_memory_map_page";                          
   $range_description_map{$RANGE_OVU  } = "//one csl_register_file will be inserted at a overlap upper location in the csl_memory_map_page";                          
   $range_description_map{$RANGE_OVLU } = "//one csl_register_file will be inserted at a overlap lower and upper location in the csl_memory_map_page";
                         

my $test_name = "";
my $test_date = `date "+%d/%m/%G, %T"`;
my @test_list = ();
#my $i         = 1;
my $test      = "";

#subroutine called
&generate_memory_map_tests;

#subroutine to print in the generated file the legend
sub print_legend {
    my $test_type = $_[0];

    #print "print_legend\n";
    print FH "$range_description_map{$test_type}\n";
}

#subroutine to print in the generated file the header
sub print_header {
    my $test_name = $_[0];

    #print "print_header\n";
    print FH "//Test generated by Ines\n";
    print FH "//Test name: $test_name\n";
    print FH "//Date: $test_date\n";
    print FH "//a csl_memory_map is created\n";
    print FH "//a csl_memory_map_page is created\n";
    print FH "//the csl_memory_map_page has the folowing range of addresses ($memAdrRange)\n";
    print FH "//the csl_memory_map_page has the folowing range of reserved addresses ($memAdrRangeResv)\n";
}

#gen tests name
sub generate_memory_map_tests {
    
    #print "generate_memory_map_tests\n";

    foreach my $range (@rangeType) {
        $test_name = $MMP . $ONE . $RF . "_" . $range . ".csl" ;
        open (FH, ">work/$test_name");
        &print_header($test_name);
        &print_legend($range);
        print FH "\n";

        #csl_register
        print FH "$classRegisterFile $registerFileName1 {\n";
        print FH "    $registerFileName1() {\n";
        print FH "        set_width(32);\n";
        print FH "        set_depth(64);\n";
        print FH "    }\n";
        print FH "};\n\n";

        #csl_unit
        print FH "$classUnit $unitName {\n";
        print FH "    $registerFileName1 $registerFileName1;\n";
        print FH "    $unitName() {\n";
        print FH "    }\n";
        print FH "};\n\n";

        #csl_memory_map_page
        print FH "$classMemoryMapPage $memoryMapPageName { \n";
        print FH "    $memoryMapPageName() { \n";
        print FH "        $addAdrRange($memAdrRange);\n";
        print FH "        $addAdrRangeNotFree($memAdrRangeNotFree, $addAdrRangeAttr);\n";
        print FH "        $addAdrRangeResv($memAdrRangeResv);\n";
        print FH "        $addObject($unitName.$registerFileName1, \"$registerFileName1\", $range_mmp{$range});\n";
        print FH "    }\n";
        print FH "};\n\n";
        
        #csl_memory_map
        print FH "$classMemoryMap $memoryMapName { \n";
        print FH "    $memoryMapPageName $memoryMapPageName; \n";
        print FH "    $memoryMapName() { \n";
        print FH "    }\n";
        print FH "};\n";
    }
    
    close(FH);

    foreach my $range1 (@rangeType) {
        foreach my $range2 (@rangeType) {
            $test_name =  $MMP . $TWO . $RF . "s" . "_" . $range1 . "_" . $range2 . ".csl" ;
            open (FH, ">work/$test_name");
            &print_header($test_name);
            &print_legend($range1);
            &print_legend($range2);

            print FH "\n";
            
            #csl_register
            print FH "$classRegisterFile $registerFileName1 {\n";
            print FH "    $registerFileName1() {\n";
            print FH "        set_width(32);\n";
            print FH "        set_depth(64);\n";
            print FH "    }\n";
            print FH "};\n\n";

            print FH "$classRegisterFile $registerFileName2 {\n";
            print FH "    $registerFileName2() {\n";
            print FH "        set_width(32);\n";
            print FH "        set_depth(64);\n";
            print FH "    }\n";
            print FH "};\n\n";

            #csl_unit
            print FH "$classUnit $unitName {\n";
            print FH "    $registerFileName1 $registerFileName1;\n";
            print FH "    $registerFileName2 $registerFileName2;\n";
            print FH "    $unitName() {\n";
            print FH "    }\n";
            print FH "};\n\n";
            
            #csl_memory_map_page
            print FH "$classMemoryMapPage $memoryMapPageName { \n";
            print FH "    $memoryMapPageName() { \n";
            print FH "        $addAdrRange($memAdrRange);\n";
            print FH "        $addAdrRangeNotFree($memAdrRangeNotFree, $addAdrRangeAttr);\n";
            print FH "        $addAdrRangeResv($memAdrRangeResv);\n";
            print FH "        $addObject($unitName.$registerFileName1, \"$registerFileName1\", $range_mmp{$range1});\n";
            print FH "        $addObject($unitName.$registerFileName2, \"$registerFileName2\", $range_mmp{$range2});\n";
            print FH "    }\n";
            print FH "};\n\n";
         
            #csl_memory_map
            print FH "$classMemoryMap $memoryMapName { \n";
            print FH "    $memoryMapPageName $memoryMapPageName; \n";
            print FH "    $memoryMapName() { \n";
            print FH "    }\n";
            print FH "};\n";
        }   

     close(FH);
    }

    print "[INFO]Done\n";
}

{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f56\fmodern\fcharset238\fprq1 Courier New CE;}{\f57\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f59\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f60\fmodern\fcharset162\fprq1 Courier New Tur;}{\f61\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f62\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f63\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f64\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{
\s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext2 \styrsid5050096 heading 2;}{
\s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\fs27\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext3 \styrsid5050096 heading 3;}{
\s4\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext4 \styrsid5050096 heading 4;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\*\cs15 \additive \i \sbasedon10 \styrsid5050096 Emphasis;}{\*\cs16 \additive \b 
\sbasedon10 \styrsid5050096 Strong;}{\s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext17 \styrsid5050096 Normal (Web);}{\*
\cs18 \additive \ul\cf2 \sbasedon10 \styrsid5050096 Hyperlink;}{\*\cs19 \additive \fs20\loch\f2\hich\af2\dbch\af0 \sbasedon10 \styrsid5050096 HTML Typewriter;}{\s20\ql \li0\ri0\widctlpar
\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext20 \styrsid5050096 HTML Preformatted;}}{\*\pgptbl {\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16
\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp
\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp16\itap0\li720\ri720\sb100\sa100}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp
\ipgp16\itap0\li720\ri720\sb100\sa100}}{\*\rsidtbl \rsid2689870\rsid5050096}{\*\generator Microsoft Word 10.0.2627;}{\info{\title Advanced Topics}{\author Skywalker}{\operator Skywalker}{\creatim\yr2005\mo10\dy16\hr2\min4}
{\revtim\yr2005\mo10\dy16\hr2\min4}{\version2}{\edmins0}{\nofpages7}{\nofwords2145}{\nofchars12227}{\*\company A & C}{\nofcharsws14344}{\vern16437}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin
\dghspace180\dgvspace180\dghorigin1800\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale181\viewzk2\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct\asianbrkrule\rsidroot5050096 \fet0
\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\s2\qc \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\i\fs48\cf6\insrsid5050096 {\*\bkmkstart Advanced_Topics
}Advanced Topics}{\insrsid5050096 {\*\bkmkend Advanced_Topics}
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
The following topics are more advanced than usually presented in a tutorial, but have been included here because Opus Make has a lot of power that might be missed if you were to skim the Opus Make User's Guide.}{\ul\insrsid5050096 
{\*\bkmkstart The_\'93Keep-Working\'94_Mode} 
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\ul\insrsid5050096 The \'93Keep-Working\'94 Mode
}{\insrsid5050096 {\*\bkmkend The_\'93Keep-Working\'94_Mode} }{\field\fldedit{\*\fldinst {\insrsid5050096  HYPERLINK "http://www.opussoftware.com/tutorial/TutAdvanced.htm" \\l "Advanced Topics#Advanced Topics" }}{\fldrslt {
\cs18\fs15\ul\cf2\insrsid5050096 [Top]}}}{\insrsid5050096 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
Usually Make stops at the first shell line that returns an error. This is the right behavior for interactive work, but is not really what you want i
f you are doing a long, unattended build such as an overnight build of your entire system. The solution is to use Make's \'93keep-working\'94
 mode. This mode allows Make to do the maximum amount of work consistent with any errors that occur during the build. 
\par In
 the keep-working mode, a shell-line error while Make is updating a target causes Make to stop working on the current target. The make process continues, with Make noting that the current target was incompletely built. Future targets are only updated if t
hey do not depend on any incomplete targets. 
\par Since Make does as much work as possible, you only have to fix the problem targets and start Make again. The keep-working mode does the maximum amount of safe and correct work. 
\par The \'93keep-working\'94 mode is enabled with the }{\cs19\f2\fs20\insrsid5050096 .KEEPWORKING}{\insrsid5050096  makefile directive (see Page ) or \'93\endash k\'94 command-line flag (see Page ). 
\par \~
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\ul\insrsid5050096 
{\*\bkmkstart Search_Directories}Search Directories}{\insrsid5050096 {\*\bkmkend Search_Directories} }{\field\fldedit{\*\fldinst {\insrsid5050096  HYPERLINK "http://www.opussoftware.com/tutorial/TutAdvanced.htm" \\l "Advanced Topics#Advanced Topics" }
}{\fldrslt {\cs18\fs15\ul\cf2\insrsid5050096 [Top]}}}{\insrsid5050096 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 A common scenario when writi
ng software is to divide the project into production code and development code. Source files kept in the production directory are stable and are known to work. Software developers \'93check out\'94
 source files and header files from the production directory into a development directory, make modifications to them, then perform a \'93check in\'94 to place them back into the production directory. 
\par If the dependencies in the makefile contained \'93hard-coded\'94 paths to the source files and header files, then whenever a file w
as checked in or out of production the dependencies would need to be updated to reflect the new location of the file. Rather than do this, the solution is to use Make's }{\b\insrsid5050096 search directory}{\insrsid5050096  support. You tell Make about }{
\i\insrsid5050096 multiple}{\insrsid5050096  directories that files can reside in and Make will search them, in order, to find the files. 
\par Make is told about search directories with special macros that have names of the form }{\cs19\b\f2\fs20\insrsid5050096 .PATH}{\b\i\insrsid5050096 .ext}{\insrsid5050096  where }{\i\insrsid5050096 .ext}{\insrsid5050096 
 is the extension of the files these search directories apply to. The value of the macro is a semi-colon separated list of directories. Here is our example again, returned to the simple makefile that only supports Borland }{\cs19\f2\fs20\insrsid5050096 
bcc}{\insrsid5050096  and written to use search paths to locate source files with the }{\cs19\f2\fs20\insrsid5050096 .c}{\insrsid5050096  or }{\cs19\f2\fs20\insrsid5050096 .h}{\insrsid5050096  extension: 
\par }\pard\plain \s20\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs19\insrsid5050096 .PATH.c = .;e:\\make\\release
\par .PATH.h = .;e:\\make\\release
\par OBJS = main.obj io.obj
\par CC = bcc
\par MODEL = s
\par CFLAGS = \endash m$(MODEL)}{\insrsid5050096  
\par }{\cs19\insrsid5050096 project.exe : $(OBJS)
\par \tab tlink c0$(MODEL) $(OBJS), $(.TARGET),, c$(MODEL) /Lf:\\bc\\lib}{\insrsid5050096  
\par }{\cs19\insrsid5050096 $(OBJS) : incl.h}{\insrsid5050096  
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 The }{\cs19\f2\fs20\insrsid5050096 .PATH.c}{
\insrsid5050096  macro, whose value is \'93}{\cs19\f2\fs20\insrsid5050096 .;e:\\make\\release}{\insrsid5050096 \'94, specifies that }{\cs19\f2\fs20\insrsid5050096 .c}{\insrsid5050096  files should be looked for first in \'93}{\cs19\f2\fs20\insrsid5050096 
.}{\insrsid5050096 \'94 (the current directory) then in \'93}{\cs19\f2\fs20\insrsid5050096 e:\\make\\release}{\insrsid5050096 \'94. Make will try each directory in order when it looks for }{\cs19\f2\fs20\insrsid5050096 .c}{\insrsid5050096 
 files. Likewise for }{\cs19\f2\fs20\insrsid5050096 .PATH.h}{\insrsid5050096 . Search directories only apply for target names that don't have a directory component. 
\par Make also supports an extensionless }{\cs19\f2\fs20\insrsid5050096 .PATH}{\insrsid5050096  macro which applies to all files that do not have a specific }{\cs19\f2\fs20\insrsid5050096 .PATH}{\insrsid5050096 .}{\i\insrsid5050096 ext}{\insrsid5050096 
. If there is no }{\cs19\f2\fs20\insrsid5050096 .PATH}{\insrsid5050096 .}{\i\insrsid5050096 ext}{\insrsid5050096  and no }{\cs19\f2\fs20\insrsid5050096 .PATH}{\insrsid5050096 , Make looks for files only in the current directory. 
\par \~
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\ul\insrsid5050096 
{\*\bkmkstart Recursive_Making}Recursive Making}{\insrsid5050096 {\*\bkmkend Recursive_Making} }{\field\fldedit{\*\fldinst {\insrsid5050096  HYPERLINK "http://www.opussoftware.com/tutorial/TutAdvanced.htm" \\l "Advanced Topics#Advanced Topics" }
}{\fldrslt {\cs18\fs15\ul\cf2\insrsid5050096 [Top]}}}{\insrsid5050096 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
Assume now that we want to compile the sources for two different MS-DOS memory models. The easiest way to do this is to create subdirectories under this direct
ory and compile the sources from this directory and the production directory to produce the different memory models. For maintainability, it is preferable to use only one makefile. 
\par One way to do this is to have Make call itself recursively. Here is our example makefile again, modified to maintain subdirectories called }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  and }{\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096 
: 
\par }\pard\plain \s20\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs19\insrsid5050096 .PATH.c = ..;e:\\make\\release
\par .PATH.h = ..;e:\\make\\release
\par OBJS = main.obj io.obj
\par CC = bcc
\par CFLAGS = \endash m$(MODEL)}{\insrsid5050096  
\par }{\cs19\insrsid5050096 all : small compact # `all' is the default target }{\insrsid5050096 
\par }{\cs19\insrsid5050096 small .MAKE .ALWAYS .MISER :
\par \tab ( cd small ; make $(MFLAGS) \endash f ../$(INPUTFILE) MODEL=s project.exe )}{\insrsid5050096  
\par }{\cs19\insrsid5050096 compact .MAKE .ALWAYS .MISER :
\par \tab %chdir $(.TARGET)
\par \tab make $(MFLAGS) \endash f ../$(INPUTFILE) MODEL=c project.exe
\par \tab %chdir $(MAKEDIR)}{\insrsid5050096  
\par }{\cs19\insrsid5050096 project.exe : $(OBJS)
\par \tab tlink c0$(MODEL) $(OBJS), $(.TARGET),, c$(MODEL) /Lf:\\bc\\lib}{\insrsid5050096  
\par }{\cs19\insrsid5050096 $(OBJS) : incl.h}{\insrsid5050096  
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 There are many ideas in this makefile: 
\par Start with the }{\cs19\f2\fs20\insrsid5050096 all}{\insrsid5050096  target. It has two sources, }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  and }{\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096 
, which are the names of the subdirectories. When no targets are specified on the command line the first target in the makefile, }{\cs19\f2\fs20\insrsid5050096 all}{\insrsid5050096 , gets made. This causes the sources of }{\cs19\f2\fs20\insrsid5050096 all
}{\insrsid5050096 , the targets }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  and }{\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096 , to be made first. 
\par Look at the shell line after the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  dependency line: 
\par }{\cs19\f2\fs20\insrsid5050096 ( cd small ; make $(MFLAGS) \endash f ../makefile MODEL=s project.exe )}{\insrsid5050096  
\par There are }{\i\insrsid5050096 two}{\insrsid5050096  commands on the same shell line with \'93}{\cs19\f2\fs20\insrsid5050096 ;}{\insrsid5050096 \'94 separating the commands. The first command changes directory into }{\cs19\f2\fs20\insrsid5050096 small}{
\insrsid5050096 . The second command executes a }{\b\insrsid5050096 recursive make}{\insrsid5050096  with the current command-line flags (the value of the }{\cs19\f2\fs20\insrsid5050096 MFLAGS}{\insrsid5050096  macro); this makefile (accessed by }{
\cs19\f2\fs20\insrsid5050096 ../$(INPUTFILE)}{\insrsid5050096  because the recursive make is in the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  subdirectory); a command-line macro definition, }{\cs19\f2\fs20\insrsid5050096 MODEL=s}{
\insrsid5050096 ; and a command-line target, }{\cs19\f2\fs20\insrsid5050096 project.exe}{\insrsid5050096 . 
\par The \'93}{\cs19\f2\fs20\insrsid5050096 cd small}{\insrsid5050096 \'94 and the \'93}{\cs19\f2\fs20\insrsid5050096 make ...}{\insrsid5050096 \'94 command are together in a so-called }{\b\insrsid5050096 multiple-command shell line}{\insrsid5050096  (}{
\i\insrsid5050096 cf.}{\insrsid5050096  Page ) because Make starts each shell line in the current directory. If the \'93}{\cs19\f2\fs20\insrsid5050096 cd}{\insrsid5050096 \'94 and \'93}{\cs19\f2\fs20\insrsid5050096 make}{\insrsid5050096 \'94
 were on separate shell lines, the \'93}{\cs19\f2\fs20\insrsid5050096 cd}{\insrsid5050096 \'94 would be \'93forgotten\'94 and the \'93}{\cs19\f2\fs20\insrsid5050096 make}{\insrsid5050096 \'94 would be executed from the current directory. 
\par The command-line macro definition }{\cs19\f2\fs20\insrsid5050096 MODEL=s}{\insrsid5050096  supplies the memory model. The command-line target, }{\cs19\f2\fs20\insrsid5050096 project.exe}{\insrsid5050096 
, names the target to be made and is given because we don't want Make to make the default target, }{\cs19\f2\fs20\insrsid5050096 all}{\insrsid5050096 , again. 
\par Look at the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  dependency line. The target name is followed by the words: }{\cs19\f2\fs20\insrsid5050096 .MAKE}{\insrsid5050096 , }{\cs19\f2\fs20\insrsid5050096 .ALWAYS}{\insrsid5050096  and }{
\cs19\f2\fs20\insrsid5050096 .MISER}{\insrsid5050096 . These are called }{\b\insrsid5050096 target attributes}{\insrsid5050096  and are covered in detail on Page . 
\par The }{\cs19\f2\fs20\insrsid5050096 .MAKE}{\insrsid5050096  attribute overrides the \'93\endash n\'94 (no execute) command-line flag, which is used to show but not execute the shell lines. The }{\cs19\f2\fs20\insrsid5050096 .MAKE}{\insrsid5050096  attr
ibute causes the command: 
\par }{\cs19\f2\fs20\insrsid5050096 make -n small}{\insrsid5050096  
\par to not just show, but to actually execute: 
\par }{\cs19\f2\fs20\insrsid5050096 ( cd small ; make \endash n \endash f ../$(INPUTFILE) MODEL=s project.exe )}{\insrsid5050096  
\par The }{\cs19\f2\fs20\insrsid5050096 .ALWAYS}{\insrsid5050096  attribute tells Make that the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  target should be updated always. We need this because }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096 
 is an existing target (a directory) without dependents. Make normally thinks that kind of target doesn't need updating. 
\par The }{\cs19\f2\fs20\insrsid5050096 .MISER}{\insrsid5050096  attribute tells Make to swap itself out of memory (for MS-DOS only) before executing the shell line. 
\par Look at the }{\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096  dependency line. This shows another way to change into a subdirectory to do a recursive make. The }{\b\insrsid5050096 directive}{\insrsid5050096 : 
\par }{\cs19\f2\fs20\insrsid5050096 %chdir compact}{\insrsid5050096  
\par changes Make's current directory to the }{\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096  subdirectory. The: 
\par }{\cs19\f2\fs20\insrsid5050096 make $(MFLAGS) \endash f ../makefile MODEL=s project.exe}{\insrsid5050096  
\par is the recursive Make. The final directive: 
\par }{\cs19\f2\fs20\insrsid5050096 %chdir $(MAKEDIR)}{\insrsid5050096  
\par changes Make's directory back to its starting directory. 
\par Finally, the }{\cs19\f2\fs20\insrsid5050096 .PATH}{\cs19\i\f2\fs20\insrsid5050096 .}{\cs19\f2\fs20\insrsid5050096 c}{\insrsid5050096  and }{\cs19\f2\fs20\insrsid5050096 .PATH.h}{\insrsid5050096  macros have been modified to point to the parent directory, 
\'93}{\cs19\f2\fs20\insrsid5050096 ..}{\insrsid5050096 \'94, and to \'93}{\cs19\f2\fs20\insrsid5050096 e:\\make\\release}{\insrsid5050096 \'94, the source-file directories relative to the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  and }{
\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096  subdirectories. 
\par How is all this used? From the current directory, execute the command: 
\par }{\cs19\f2\fs20\insrsid5050096 make}{\insrsid5050096  
\par Make reads }{\cs19\f2\fs20\insrsid5050096 makefile}{\insrsid5050096  and makes }{\cs19\f2\fs20\insrsid5050096 all}{\insrsid5050096 , which first makes }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096 . To make }{\cs19\f2\fs20\insrsid5050096 small}{
\insrsid5050096 , Make executes the shell line: 
\par }{\cs19\f2\fs20\insrsid5050096 ( cd small ; make \endash f ../makefile MODEL=s project.exe )}{\insrsid5050096  
\par This changes to the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  subdirectory and Make starts again, reading the same makefile from the parent directory. Make defines the }{\cs19\f2\fs20\insrsid5050096 MODEL}{\insrsid5050096 
 macro with the value \'93}{\cs19\f2\fs20\insrsid5050096 s}{\insrsid5050096 \'94 and builds }{\cs19\f2\fs20\insrsid5050096 project.exe}{\insrsid5050096 , compiling and linking the files for the small model. After completing this, Make builds the }{
\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096  target, with a similar procedure. 
\par Notice that \'93}{\cs19\f2\fs20\insrsid5050096 make small}{\insrsid5050096 \'94 updates only the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  directory, \'93}{\cs19\f2\fs20\insrsid5050096 make compact}{\insrsid5050096 \'94 updates only the }{
\cs19\f2\fs20\insrsid5050096 compact}{\insrsid5050096  directory, and \'93}{\cs19\f2\fs20\insrsid5050096 make}{\insrsid5050096 \'94 or \'93}{\cs19\f2\fs20\insrsid5050096 make all}{\insrsid5050096 \'94 updates them both. 
\par }\pard\plain \s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs27\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
{\*\bkmkstart Advanced_Recursive_Making}Advanced Recursive Making{\*\bkmkend Advanced_Recursive_Making} }{\field\fldedit{\*\fldinst {\insrsid5050096  HYPERLINK "http://www.opussoftware.com/tutorial/TutAdvanced.htm" \\l "Advanced Topics#Advanced Topics" }
}{\fldrslt {\cs18\fs15\ul\cf2\insrsid5050096 [Top]}}}{\insrsid5050096 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
One problem with doing recursive makes is that, as written, we can't make selective targets in the subdirectory. For example, a command like \'93}{\cs19\f2\fs20\insrsid5050096 make small/io.obj}{\insrsid5050096 \'94
 doesn't work because Make needs to treat it as \'93make }{\cs19\f2\fs20\insrsid5050096 io.obj}{\insrsid5050096  in the }{\cs19\f2\fs20\insrsid5050096 small}{\insrsid5050096  directory\'94. The following example shows how to do this. The }{
\cs19\f2\fs20\insrsid5050096 %foreach}{\insrsid5050096  directive (}{\i\insrsid5050096 cf.}{\insrsid5050096  Page ) is used to iterate over the elements of the }{\cs19\f2\fs20\insrsid5050096 MAKETARGETS}{\insrsid5050096 
 macro (the list of command-line targets). If the element specifies a pathed target Make recurses into its directory and does the recursive make on the proper target: 
\par }\pard\plain \s20\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 .PATH.c = ..;e:\\make\\release
\par .PATH.h = ..;e:\\make\\release
\par OBJS = main.obj io.obj
\par DIRS = small compact
\par MODEL = $(MAKEDIR,F,S'\\(.\\).*'\\1',LC)       # }{\cs15\i\insrsid5050096 see the discussion below}{\insrsid5050096  
\par %foreach Target $(MAKETARGETS)}{\cs19\insrsid5050096 
\par }{\insrsid5050096 % if '$\{Target,P\}' && %dir($\{Target,D\})     }{\i\insrsid5050096 # If element has path & directory exists
\par }{\insrsid5050096 $(Target) .MAKE .ALWAYS .MISER :}{\cs19\insrsid5050096                }{\i\insrsid5050096 # ... set up a recursive make}{\cs19\insrsid5050096 
\par }{\insrsid5050096 \tab ( cd $(.TARGET,D) ; make $(MFLAGS) \endash f ../$(INPUTFILE) $(.TARGET,F) )
\par % endif
\par %end 
\par all : $(DIRS) 
\par $(DIRS) .MAKE .ALWAYS .MISER :
\par \tab ( cd $(.TARGET) ; make $(MFLAGS) \endash f ../$(INPUTFILE) project.exe ) 
\par project.exe : $(OBJS)
\par \tab tlink c0$(MODEL) $(OBJS), $(.TARGET),, c$(MODEL) /Lf:\\bc\\lib 
\par $(OBJS) : incl.h 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 Now, doing \'93}{\cs19\f2\fs20\insrsid5050096 
make small/io.obj}{\insrsid5050096 \'94 executes the shell line: 
\par }\pard\plain \s20\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 ( cd small ; make \endash f ../makefile io.obj ) 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
This is what we want! One final wrinkle has been added: The }{\i\insrsid5050096 name}{\insrsid5050096  of the directory provides the MODEL macro definition! The expression: 
\par }\pard\plain \s20\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 $(MAKEDIR,F,S'\\(.\\).*'\\1',LC) 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
takes the absolute path of the directory Make starts in, as kept in the }{\cs19\f2\fs20\insrsid5050096 MAKEDIR}{\insrsid5050096  macro; applies the \'93F\'94 modifier to reduce it to the directory name; applies \'93}{\cs19\f2\fs20\insrsid5050096 S'\\(.\\)
.*'\\1'}{\insrsid5050096 \'94, a substitution modifier that evaluates to the first letter of the directory name; then applies the \'93LC\'94 modifier to change the letter to lower case. 
\par Why do we go to all this effort? One reason is to have greater simplicity! We can add support for a large memory model simply by creating a }{\cs19\f2\fs20\insrsid5050096 large}{\insrsid5050096  subdirectory and by changing the }{
\cs19\f2\fs20\insrsid5050096 DIRS}{\insrsid5050096  macro definition to \'93}{\cs19\f2\fs20\insrsid5050096 small compact large}{\insrsid5050096 \'94
. The name of the directory is automatically coordinated with the compiler model through the use of these macro modifiers and no other changes need to be made to the makefile. 
\par \~
\par }\pard\plain \s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs27\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\ul\insrsid5050096 
{\*\bkmkstart Object_Libraries}Object Libraries}{\insrsid5050096 {\*\bkmkend Object_Libraries} }{\field\fldedit{\*\fldinst {\insrsid5050096  HYPERLINK "http://www.opussoftware.com/tutorial/TutAdvanced.htm" \\l "Advanced Topics#Advanced Topics" }
}{\fldrslt {\cs18\fs15\ul\cf2\insrsid5050096 [Top]}}}{\insrsid5050096 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
An object library is a file that contains a collection of object modules and serves as a means for keeping related object modules together. Object libraries are created by object librarians, including Microsoft }{\cs19\f2\fs20\insrsid5050096 LIB}{
\insrsid5050096  (16- and 32-bit), Borland }{\cs19\f2\fs20\insrsid5050096 TLIB}{\insrsid5050096  and UNIX }{\cs19\f2\fs20\insrsid5050096 ar}{\insrsid5050096 . 
\par Make supports object libraries by being able to look inside the library for the timestamp of object modules. This is useful in two ways: 
\par It removes the need to have both the library and the object modules on disk. 
\par It makes it possible to state that a target depends on specific modules inside the library. 
\par }\pard\plain \s4\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 Building Object Libraries
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
To build a library, list the library as the target and give it the }{\cs19\f2\fs20\insrsid5050096 .LIBRARY}{\insrsid5050096  target attribute. Modules inside the library are the sources. For example: 
\par }{\cs19\f2\fs20\insrsid5050096 io.lib .LIBRARY : keyboard.obj screen.obj}{\insrsid5050096  
\par This states that }{\cs19\f2\fs20\insrsid5050096 io.lib}{\insrsid5050096  is a library dependent on modules }{\cs19\f2\fs20\insrsid5050096 keyboard.obj}{\insrsid5050096  and }{\cs19\f2\fs20\insrsid5050096 screen.obj}{\insrsid5050096 . When }{
\cs19\f2\fs20\insrsid5050096 io.lib}{\insrsid5050096  is built, }{\cs19\f2\fs20\insrsid5050096 keyboard.obj}{\insrsid5050096  and }{\cs19\f2\fs20\insrsid5050096 screen.obj}{\insrsid5050096 
 are built then added to the library. No shell lines were supplied to update }{\cs19\f2\fs20\insrsid5050096 io.lib}{\insrsid5050096  so Make uses its built-in }{\cs19\f2\fs20\insrsid5050096 %.lib}{\insrsid5050096 
 rule to update the library. The MS-DOS Make }{\cs19\f2\fs20\insrsid5050096 %.lib}{\insrsid5050096  rule is: 
\par }\pard\plain \s20\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs19\insrsid5050096 %.lib :
\par \tab $(STAMPOBJ) $(.NEWSOURCES)
\par \tab $(LIBEXE) $(LIBFLAGS) \endash \~+ $(.NEWSOURCES);}{\insrsid5050096  
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 The value of the }{
\cs19\f2\fs20\insrsid5050096 STAMPOBJ}{\insrsid5050096  macro is \'93}{\cs19\f2\fs20\insrsid5050096 stampobj}{\insrsid5050096 \'94. The }{\cs19\f2\fs20\insrsid5050096 stampobj}{\insrsid5050096 
 utility is supplied by us and is used to place a timestamp inside the object module. The value of the }{\cs19\f2\fs20\insrsid5050096 LIBEXE}{\insrsid5050096  macro is \'93}{\cs19\f2\fs20\insrsid5050096 lib}{\insrsid5050096 \'94
, the Microsoft Librarian. The }{\cs19\f2\fs20\insrsid5050096 LIBFLAGS}{\insrsid5050096  macro initially has no value but can be defined in your makefile. 
\par This }{\cs19\f2\fs20\insrsid5050096 %.li}{\insrsid5050096 b rule differs for the various operating systems supported by Opus Make and can be redefined by you to support other librarians. See Page for details. 
\par \~
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid5050096 \b\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\ul\insrsid5050096 
{\*\bkmkstart Version_Control_Systems}Version Control Systems}{\insrsid5050096 {\*\bkmkend Version_Control_Systems} }{\field\fldedit{\*\fldinst {\insrsid5050096  HYPERLINK "http://www.opussoftware.com/tutorial/TutAdvanced.htm" \\
l "Advanced Topics#Advanced Topics" }}{\fldrslt {\cs18\fs15\ul\cf2\insrsid5050096 [Top]}}}{\insrsid5050096 
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
Version control systems (VCS) store versions of a source file in an archive, maintaining an audit
 trail of changes and providing the ability to retrieve prior versions. Make supports VCS by being able to read the timestamp of any version stored in VCS archives. Make works with the following VCS: Intersolv PVCS v3.0 & up, Microsoft SourceSafe v3.0 & u
p, Burton Systems Software TLIB v4.12 & up, GNU RCS and MKS RCS and Source Integrity. 
\par One advantage of VCS support is that it is possible for Make to determine the timestamp of source files that are absent on disk, but present inside the VCS. Another advan
tage of Make's VCS support is that Make can retrieve exact, named versions, making building \'93release\'94 versions or rebuilding older versions well controlled. 
\par Here is a makefile example that supports Microsoft SourceSafe, a version control system that stores version-controlled files in a project in a database: 
\par }\pard\plain \s20\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs19\insrsid5050096 PROJECT = make
\par SSPROJECT = $$/$(PROJECT)\tab \tab # SourceSafe project name
\par SSDATA = e:\\ss\\data\tab \tab \tab # SourceSafe data directory}{\insrsid5050096  
\par }{\cs19\insrsid5050096 SRCS = $(SSPROJECT,@)\tab \tab \tab # read list of sources
\par OBJS = $(SRCS,.c=.obj)\tab \tab \tab # create list of objects}{\insrsid5050096  
\par }{\cs19\insrsid5050096 .SS_STORAGE : .c\tab \tab \tab # VCS support}{\insrsid5050096  
\par }{\cs19\insrsid5050096 $(PROJECT).exe : $(OBJS)
\par }{\cs19\i\insrsid5050096 \tab shell lines to produce }{\cs19\insrsid5050096 make.exe}{\insrsid5050096  
\par }\pard\plain \s17\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5050096 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 The project called \'93}{
\cs19\f2\fs20\insrsid5050096 make}{\insrsid5050096 \'94 is archived in SourceSafe. }{\cs19\f2\fs20\insrsid5050096 SSPROJECT}{\insrsid5050096  and }{\cs19\f2\fs20\insrsid5050096 SSDATA}{\insrsid5050096 
 are configuration macros that Make uses for the name of the SourceSafe project (}{\cs19\f2\fs20\insrsid5050096 $/make}{\insrsid5050096 ) and the location of the SourceSafe data files. The }{\cs19\f2\fs20\insrsid5050096 $(SSPROJECT,@)}{\insrsid5050096 
 expression causes Make to read the list of source files stored in the SourceSafe project }{\cs19\f2\fs20\insrsid5050096 $/make}{\insrsid5050096 . The object file list (the }{\cs19\f2\fs20\insrsid5050096 OBJS}{\insrsid5050096 
 macro) is generated from the source file list with a macro modifier that replaces the }{\cs19\f2\fs20\insrsid5050096 .c}{\insrsid5050096  in each file name with }{\cs19\f2\fs20\insrsid5050096 .obj}{\insrsid5050096 . 
\par The \'93}{\cs19\f2\fs20\insrsid5050096 .SS_STORAGE : .c}{\insrsid5050096 \'94 line enables Make's SourceSafe VCS support for the }{\cs19\f2\fs20\insrsid5050096 .c}{\insrsid5050096  file extension. If a }{\cs19\f2\fs20\insrsid5050096 .c}{\insrsid5050096 
 source file is needed in order to create an object file, and the }{\cs19\f2\fs20\insrsid5050096 .c }{\insrsid5050096 file is absent, Make can get it from SourceSafe.
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5050096 
\par }}
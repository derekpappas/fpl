What is it?
- Code coverage tools such as gcov(GNU coverage tool) are used to measure how much of the code (lines, branches, blocks) 
are covered during execution (normally during testing).

General Information:
- When testing a software package we must check the execution of each implemented feature (which translates 
into lines of code to be covered). 
- An ideal situation would be the one when, by testing, we cover 100% of the code, so that we know how it works 
on every possible situation. Off course that is not possible in practice, as an important part of the code might be 
for error detection and handling, situations that we do not find during testing. A real-life demand would be 
for 85% coverage of the code (maybe 90% for more strict conditions). It doesn't mean that if we do not have high 
values for coverage the code is badly written or inefficient, so we should maybe require values specific to a given 
application (depending on the error detection and handling or other possible situations).

Tools that we use:
- gcov (GNU coverage) - comes with the Linux distributions and works with GNU C Compiler (gcc)
- lcov (Linux Test Project Coverage) - a set of perl scripts that parse the files generated by gcov and draw html statistics

Installation:
- gcov: comes with any Linux distribution
- lcov: 
  1. download the tar.gz file, version 1.4 from: http://sourceforge.net/project/showfiles.php?group_id=3382&package_id=80148&release_id=171758
  2. Once you got the scripts on your machine, copy all .pl files into some directory 
in your shell's search path, e.g. by typing: cp *.pl /usr/local/bin

Usage: (in sequential way)
- build the entire build by typing: "ant" in projectx root directory
- start the regression script: projectx/test/parser/scripts/regress_parser.pl (the time to regress will 
increase due to the statistics that gcov is writting)
- start the script that collects statistics and builds the html pages: projectx/scripts/codeCover.pl
- look into: projectx/docs/cdom and projectx/docs/cslc for the generated webpages

Purpose:
- we use these tools to increase the coverage percentage to at least 85%, with exceptions off course

How to do it:
- check every function/class in CDOM and Verilog parser (cslc) and try to implement tests where these portions 
of code are needed (covered). For instance in cslc: try to write Verilog code to match all the rules that are 
implemented there. The same is for CDOM: try to write tests that require as many function calls and classes instantiations. 
- be very much methodical, and maybe note which features of the tested code are triggered and which are not, or are 
hard to implement: whether due to their complexity or because they we don't understand their purpose.

Links:
http://www.cs.jhu.edu/~phf/tut/gcov-tutorial.pdf
http://ltp.sourceforge.net/coverage/lcov.readme.php
http://en.wikipedia.org/wiki/Code_coverage + the links at the bottom of the page



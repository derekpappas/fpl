// Copyright FastPath Logic (2009)
// Interface Library File v1.0, this is autogenerated by FastPath Generator 2010-05-01 14:45
//----------------------------------------------------------------------
// Copyright (c) 2005-2008 Fastpathlogic
// All Rights Reserved.
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of Fastpathlogic;
// the contents of this file may not be disclosed to third parties,
// copied or duplicated in any form, in whole or in part, without the prior
// written permission of Fastpathlogic.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to
// restrictions as set forth in subdivision (c)(1)(ii) of the Rights in
// Technical Data and Computer Software clause at DFARS 252.227-7013,
// and/or in similar or succesor clauses in the FAR, DOD or NASA FAR Supplement.
// Unpublished rights reserved under the Copyright Laws of the United States
//----------------------------------------------------------------------




//------------------------------------------------------------
// Begin csl_interface declarations
//------------------------------------------------------------
csl_interface Va2r_tap_global_ifc { 
    csl_port clock ( output , wire , 1);
    csl_port reset ( output , wire , 1);
    csl_port Va2r_tap_pipe_en ( output , wire , 1);

    Va2r_tap_global_ifc() {
 }
};

csl_interface Va2r_tap_isa_master_ifc { 
    csl_port address ( input , wire , 1);
    csl_port write_data ( input , wire , 1);
    csl_port read ( input , wire , 1);
    csl_port write ( input , wire , 1);
    csl_port read_data ( output , wire , 1);
    csl_port ready ( output , wire , 1);
    csl_port error ( output , wire , 1);

    Va2r_tap_isa_master_ifc() {
 }
};

csl_interface Va2r_tap_ring_ifc { 
    csl_port grant ( input , wire , 1);
    csl_port request ( input , wire , 1);
    csl_port in ( input , wire , 1);
    csl_port aphi ( input , wire , 1);
    csl_port write ( input , wire , 1);
    csl_port read ( input , wire , 1);
    csl_port ready ( input , wire , 1);
    csl_port error ( input , wire , 1);

    Va2r_tap_ring_ifc() {
 }
};

csl_interface a2p_slave_ifc { 
    csl_port read_data ( input , wire , 32);
    csl_port ready ( input , wire , 1);
    csl_port error ( input , wire , 1);
    csl_port address ( input , wire , 20);
    csl_port data ( input , wire , 32);
    csl_port read ( input , wire , 1);
    csl_port write ( input , wire , 1);

    a2p_slave_ifc() {
 }
};

csl_interface gbl { 
    csl_port clk ( input , wire , 1);
    csl_port reset_ ( input , wire , 1);
    csl_port enable ( input , wire , 1);

    gbl() { 
    }
};

//------------------------------------------------------------
// Begin csl_unit predecalaration
//------------------------------------------------------------
csl_unit Va2r_tap;
csl_unit arm;
csl_unit cmpr;
csl_unit dsp;
csl_unit dummy_unit_synth_removes;
csl_unit eu;
csl_unit h264;
csl_unit im;
csl_unit me;
csl_unit pc;
csl_unit rf;
csl_unit ssm;
csl_unit ssm_master;
csl_unit wb;



//------------------------------------------------------------
// Begin csl_unit declarations
//------------------------------------------------------------
//------------------------------------------------------
csl_unit im {  // declaration
	// unit instances
	// interface instances
	im() { 
	}
};


//------------------------------------------------------
csl_unit ssm_master {  // declaration
	// unit instances
	// interface instances
	Va2r_tap_isa_master_ifc Va2r_tap_master_ifc; // driver interface
	gbl gbl; // receiver interface
	ssm_master() { 
	}
};


//------------------------------------------------------
csl_unit arm {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	arm() { 
	}
};


//------------------------------------------------------
csl_unit h264 {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	h264() { 
	}
};


//------------------------------------------------------
csl_unit dsp {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	dsp() { 
	}
};


//------------------------------------------------------
csl_unit wb {  // declaration
	// unit instances
	// interface instances
	wb() { 
	}
};


//------------------------------------------------------
csl_unit eu {  // declaration
	// unit instances
	// interface instances
	eu() { 
	}
};


//------------------------------------------------------
csl_unit rf {  // declaration
	// unit instances
	// interface instances
	a2p_slave_ifc Va2r_tap_slave_in_ifc; // receiver interface
	rf() { 
		Va2r_tap_slave_in_ifc.reverse();
	}
};


//------------------------------------------------------
csl_unit dummy_unit_synth_removes {  // declaration
	// unit instances
	// interface instances
	Va2r_tap_isa_master_ifc dummy1_master_ifc; // driver interface
	Va2r_tap_isa_master_ifc dummy2_master_ifc; // driver interface
	Va2r_tap_isa_master_ifc dummy3_master_ifc; // driver interface
	dummy_unit_synth_removes() { 
	}
};


//------------------------------------------------------
csl_unit Va2r_tap {  // declaration
	// unit instances
	// interface instances
	Va2r_tap_isa_master_ifc Va2r_tap_master_ifc; // receiver interface
	Va2r_tap_ring_ifc ring_out_ifc; // driver interface
	Va2r_tap_ring_ifc ring_in_ifc; // receiver interface
	a2p_slave_ifc Va2r_tap_slave_out_ifc; // driver interface
	gbl gbl; // receiver interface
	Va2r_tap() { 
		Va2r_tap_master_ifc.reverse();
		ring_in_ifc.reverse();
	}
};


//------------------------------------------------------
csl_unit pc {  // declaration
	// unit instances
	// interface instances
	pc() { 
	}
};


//------------------------------------------------------
csl_unit me {  // declaration
	// unit instances
	rf rf; // unit instance
	pc pc; // unit instance
	wb wb; // unit instance
	eu eu; // unit instance
	im im; // unit instance
	// interface instances
	gbl gbl; // receiver interface
	me() { 
	}
};


//------------------------------------------------------
csl_unit cmpr {  // declaration
	// unit instances
	me me; // unit instance
	// interface instances
	cmpr() { 
	}
};


//------------------------------------------------------
csl_unit ssm {  // declaration
	// unit instances
	arm arm; // unit instance
	dummy_unit_synth_removes dumb; // unit instance
	Va2r_tap Va2r_tap_arm; // unit instance
	dsp dsp; // unit instance
	Va2r_tap Va2r_tap_cmpr; // unit instance
	cmpr cmpr; // unit instance
	Va2r_tap Va2r_tap_dsp; // unit instance
	Va2r_tap Va2r_tap_h264; // unit instance
	ssm_master ssm_master; // unit instance
	h264 h264; // unit instance
	// interface instances
	gbl gbl; // driver interface
	ssm() { 
		ssm.ssm_master.Va2r_tap_master_ifc.connect_by_name(ssm.Va2r_tap_arm.Va2r_tap_master_ifc,master_a2p_arm);
		ssm.dumb.dummy1_master_ifc.connect_by_name(ssm.Va2r_tap_dsp.Va2r_tap_master_ifc,master_dummy1);
		ssm.dumb.dummy2_master_ifc.connect_by_name(ssm.Va2r_tap_h264.Va2r_tap_master_ifc,master_dummy2);
		ssm.dumb.dummy3_master_ifc.connect_by_name(ssm.Va2r_tap_cmpr.Va2r_tap_master_ifc,master_dummy3);
		ssm.Va2r_tap_arm.ring_out_ifc.connect_by_name(ssm.Va2r_tap_dsp.ring_in_ifc,ring_arm_dsp);
		ssm.Va2r_tap_dsp.ring_out_ifc.connect_by_name(ssm.Va2r_tap_h264.ring_in_ifc,ring_dsp_h264);
		ssm.Va2r_tap_h264.ring_out_ifc.connect_by_name(ssm.Va2r_tap_cmpr.ring_in_ifc,ring_h264_cmpr);
		ssm.Va2r_tap_cmpr.ring_out_ifc.connect_by_name(ssm.Va2r_tap_arm.ring_in_ifc,ring_cmpr_arm);
		ssm.Va2r_tap_arm.Va2r_tap_slave_out_ifc.connect_by_name(ssm.arm.me.rf.Va2r_tap_slave_in_ifc,slave_Va2r_tap_arm);
		ssm.Va2r_tap_dsp.Va2r_tap_slave_out_ifc.connect_by_name(ssm.dsp.me.rf.Va2r_tap_slave_in_ifc,slave_Va2r_tap_dsp);
		ssm.Va2r_tap_h264.Va2r_tap_slave_out_ifc.connect_by_name(ssm.h264.me.rf.Va2r_tap_slave_in_ifc,slave_Va2r_tap_h264);
		ssm.Va2r_tap_cmpr.Va2r_tap_slave_out_ifc.connect_by_name(ssm.cmpr.me.rf.Va2r_tap_slave_in_ifc,slave_Va2r_tap_cmpr);
		ssm.gbl.connect_by_name(ssm.dsp.me.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.h264.me.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.cmpr.me.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.Va2r_tap_arm.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.Va2r_tap_dsp.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.Va2r_tap_h264.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.Va2r_tap_cmpr.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.ssm_master.gbl,gbl);
		ssm.gbl.connect_by_name(ssm.arm.me.gbl,gbl);
	}
};



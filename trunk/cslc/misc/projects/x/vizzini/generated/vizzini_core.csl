// Generated by ./csl_csv_gen.pl 
// CSL library filename      = usb.ifc.lib.csl       
// Design Hierarchy filename = vizzini_core.hier
// CSL csv filename          = vizzini_core.csv       
// Generated CSL filename    = generated/vizzini_core.csl




csl_unit usb_tm_dispatcher {
  ix_bus phy_tx; // from ifc
  usb_tm_dispatcher () {
  }
};


csl_unit usb_tm_packetizer {
  ix_bus phy_rx; // to ifc
  usb_tm_packetizer () {
    phy_rx.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit usb_transaction_mgr {
  ram_bus ram_bus1; // to ifc
  fabric_ad fabric; // to ifc
  tp_bus tp_bus; // to ifc
  usb_tm_dispatcher usb_tm_dispatcher_  ; 
  usb_tm_packetizer usb_tm_packetizer_  ; 
  usb_transaction_mgr () {
    ram_bus1.reverse(); // this is an endpoint so reverse the interface
    fabric.reverse(); // this is an endpoint so reverse the interface
    tp_bus.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit usb_protocol_mgr {
  tp_bus tp_bus; // from ifc
  ram_bus ram_bus1; // to ifc
  fabric_ad fabric; // to ifc
  fifo_reg_bus fifo_reg; // to ifc
  usb_protocol_mgr () {
    ram_bus1.reverse(); // this is an endpoint so reverse the interface
    fabric.reverse(); // this is an endpoint so reverse the interface
    fifo_reg.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit fab {
  fabric_ad fabric; // from ifc
  fabric_bus fabric_out; // from ifc
  fabric_bus fabric_in; // to ifc
  fab () {
    fabric_in.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit uart_mgr {
  fifo_reg_bus fifo_reg_bus0; // from ifc
  ram_bus ram_bus1; // to ifc
  fabric_ad fabric; // to ifc
  uart_mgr () {
    ram_bus1.reverse(); // this is an endpoint so reverse the interface
    fabric.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit RAM {
  ram_bus ram_bus0; // from ifc
  ram_bus ram_bus1; // from ifc
  ram_bus ram_bus2; // from ifc
  RAM () {
  }
};


csl_unit jeff_uart {
  gpio_ifc uart_gpio_0; // from ifc
  gpio_ifc uart_gpio_1; // from ifc
  gpio_ifc uart_gpio_2; // from ifc
  gpio_ifc uart_gpio_3; // from ifc
  gpio_ifc uart_gpio_4; // from ifc
  gpio_ifc uart_gpio_5; // from ifc
  fabric_ad fabric; // to ifc
  jeff_uart () {
    fabric.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit i2c {
  fabric_ad fabric; // to ifc
  i2c () {
    fabric.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit uart {
  uart_ifc modem; // to ifc
  fabric_ad fabric; // to ifc
  uart () {
    fabric.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit usb_phy {
  ix_bus phy_rx; // from ifc
  ix_bus phy_tx; // to ifc
  usb_phy_ifc usb; // to ifc
  usb_phy () {
    phy_tx.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit fifo_regs {
  fifo_reg_bus fifo_reg_bus0; // from ifc
  fifo_reg_bus fifo_reg; // to ifc
  fifo_regs () {
    fifo_reg.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit fab_filter {
  fabric_bus fabric_out; // from ifc
  fabric_bus fabric_in; // to ifc
  fab_filter () {
    fabric_in.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit io_cell {
  gpio_ifc pad; // to ifc
  csl_port pad_pin(inout); // to port
  io_cell () {
    pad.reverse(); // this is an endpoint so reverse the interface
  }
};


csl_unit input_cell {
  input_cell () {
  }
};


csl_unit usb_analog_phy {
  usb_analog_phy () {
  }
};


csl_unit output_cell {
  output_cell () {
  }
};


csl_unit v_core {
  fab proto_fab  ; 
  usb_phy usb_phy_  ; 
  fab uart_fab_2  ; 
  i2c i2c_  ; 
  RAM RAM_  ; 
  fab fab_i2c  ; 
  fab uart_fab_0  ; 
  fifo_regs fifo_regs_  ; 
  uart uart_mod3  ; 
  uart uart_mod2  ; 
  uart_mgr uart_mgr_  ; 
  jeff_uart uart_mod0  ; 
  usb_protocol_mgr usb_protocol_mgr_  ; 
  fab fab_uart_mgr  ; 
  uart uart_mod1  ; 
  fab uart_fab_3  ; 
  fab trans_fab  ; 
  usb_transaction_mgr usb_transaction_mgr_  ; 
  fab_filter fab_filter_  ; 
  fab uart_fab_1  ; 
  v_core () {
  }
};


csl_unit v_top {
  uart_ifc uart1; // from ifc
  uart_ifc uart2; // from ifc
  uart_ifc uart3; // from ifc
  usb_phy_ifc usb; // from ifc
  csl_port gpio_a0(inout); // from port
  csl_port gpio_a1(inout); // from port
  csl_port gpio_a2(inout); // from port
  csl_port gpio_a3(inout); // from port
  csl_port gpio_a4(inout); // from port
  csl_port gpio_a5(inout); // from port
  output_cell tx_mod_0  ; 
  io_cell gpio_mod_a4  ; 
  io_cell gpio_mod_a2  ; 
  io_cell gpio_mod_a5  ; 
  usb_analog_phy usb_analog_phy_  ; 
  io_cell gpio_mod_a0  ; 
  v_core v_core  ; 
  io_cell gpio_mod_a3  ; 
  input_cell rx_mod_0  ; 
  io_cell gpio_mod_a1  ; 
  v_top () {
    v_core.uart_mod0.uart_gpio_0.connect_by_name(gpio_mod_a0.pad ,gpio_connect_a0);
    v_core.uart_mod0.uart_gpio_1.connect_by_name(gpio_mod_a1.pad ,gpio_connect_a1);
    v_core.uart_mod0.uart_gpio_2.connect_by_name(gpio_mod_a2.pad ,gpio_connect_a2);
    v_core.uart_mod0.uart_gpio_3.connect_by_name(gpio_mod_a3.pad ,gpio_connect_a3);
    v_core.uart_mod0.uart_gpio_4.connect_by_name(gpio_mod_a4.pad ,gpio_connect_a4);
    v_core.uart_mod0.uart_gpio_5.connect_by_name(gpio_mod_a5.pad ,gpio_connect_a5);
    gpio_a0.connect_by_name(gpio_mod_a0.pad_pin);
    gpio_a1.connect_by_name(gpio_mod_a1.pad_pin);
    gpio_a2.connect_by_name(gpio_mod_a2.pad_pin);
    gpio_a3.connect_by_name(gpio_mod_a3.pad_pin);
    gpio_a4.connect_by_name(gpio_mod_a4.pad_pin);
    gpio_a5.connect_by_name(gpio_mod_a5.pad_pin);
    uart1.connect_by_name(v_core.uart_mod1.modem ,u1_modem);
    uart2.connect_by_name(v_core.uart_mod2.modem ,u2_modem);
    uart3.connect_by_name(v_core.uart_mod3.modem ,u3_modem);
    v_core.RAM_.ram_bus0.connect_by_name(v_core.uart_mgr_.ram_bus1 ,ram_ufm);
    v_core.RAM_.ram_bus1.connect_by_name(v_core.usb_protocol_mgr_.ram_bus1 ,ram_upm);
    v_core.RAM_.ram_bus2.connect_by_name(v_core.usb_transaction_mgr_.ram_bus1 ,ram_utm);
    v_core.fab_uart_mgr.fabric.connect_by_name(v_core.uart_mgr_.fabric ,umf_ufm);
    v_core.uart_fab_0.fabric.connect_by_name(v_core.uart_mod0.fabric ,uf0_ut0);
    v_core.uart_fab_1.fabric.connect_by_name(v_core.uart_mod1.fabric ,uf1_ut1);
    v_core.uart_fab_2.fabric.connect_by_name(v_core.uart_mod2.fabric ,uf2_ut2);
    v_core.uart_fab_3.fabric.connect_by_name(v_core.uart_mod3.fabric ,uf3_ut3);
    v_core.fab_i2c.fabric.connect_by_name(v_core.i2c_.fabric ,fic_i2c);
    v_core.proto_fab.fabric.connect_by_name(v_core.usb_protocol_mgr_.fabric ,prf_upm);
    v_core.trans_fab.fabric.connect_by_name(v_core.usb_transaction_mgr_.fabric ,trf_utm);
    v_core.trans_fab.fabric_out.connect_by_name(v_core.proto_fab.fabric_in ,trf_prf);
    v_core.proto_fab.fabric_out.connect_by_name(v_core.fab_filter_.fabric_in ,prf_ffl);
    v_core.fab_filter_.fabric_out.connect_by_name(v_core.fab_uart_mgr.fabric_in ,ffl_umf);
    v_core.fab_uart_mgr.fabric_out.connect_by_name(v_core.fab_i2c.fabric_in ,umf_fic);
    v_core.fab_i2c.fabric_out.connect_by_name(v_core.uart_fab_0.fabric_in ,fic_uf0);
    v_core.uart_fab_0.fabric_out.connect_by_name(v_core.uart_fab_1.fabric_in ,uf0_uf1);
    v_core.uart_fab_1.fabric_out.connect_by_name(v_core.uart_fab_2.fabric_in ,uf1_uf2);
    v_core.uart_fab_2.fabric_out.connect_by_name(v_core.uart_fab_3.fabric_in ,uf2_uf3);
    v_core.uart_fab_3.fabric_out.connect_by_name(v_core.trans_fab.fabric_in ,uf3_trf);
    v_core.uart_mgr_.fifo_reg_bus0.connect_by_name(v_core.fifo_regs_.fifo_reg ,ufm_ffr);
    v_core.fifo_regs_.fifo_reg_bus0.connect_by_name(v_core.usb_protocol_mgr_.fifo_reg ,ffr_upm);
    v_core.usb_protocol_mgr_.tp_bus.connect_by_name(v_core.usb_transaction_mgr_.tp_bus);
    v_core.usb_phy_.phy_rx.connect_by_name(v_core.usb_transaction_mgr_.usb_tm_packetizer_.phy_rx);
    v_core.usb_transaction_mgr_.usb_tm_dispatcher_.phy_tx.connect_by_name(v_core.usb_phy_.phy_tx);
    usb.connect_by_name(v_core.usb_phy_.usb);
  }
};

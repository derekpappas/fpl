{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier{\*\falt Courier};}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\fdecor\fcharset2\fprq2 ZapfDingbats;}{\f13\fnil\fcharset2\fprq2 Marlett;}{\f14\fswiss\fcharset238\fprq2 Arial CE;}{\f15\fswiss\fcharset204\fprq2 Arial CYR;}
{\f16\fswiss\fcharset161\fprq2 Arial Greek;}{\f17\fswiss\fcharset162\fprq2 Arial TUR;}{\f18\fswiss\fcharset186\fprq2 Arial Baltic;}{\f19\fmodern\fcharset238\fprq1 Courier New CE;}{\f20\fmodern\fcharset204\fprq1 Courier New CYR;}
{\f21\fmodern\fcharset161\fprq1 Courier New Greek;}{\f22\fmodern\fcharset162\fprq1 Courier New TUR;}{\f23\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f24\fmodern\fcharset0\fprq1 Lucida Console;}{\f25\froman\fcharset238\fprq2 Times New Roman CE;}
{\f26\froman\fcharset204\fprq2 Times New Roman CYR;}{\f27\froman\fcharset161\fprq2 Times New Roman Greek;}{\f28\froman\fcharset162\fprq2 Times New Roman TUR;}{\f29\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f30\fnil\fcharset2\fprq2 Wingdings;}
{\f31\fswiss\fcharset0\fprq2 Verdana;}{\f32\fswiss\fcharset0\fprq2 Arial Black;}{\f33\fscript\fcharset0\fprq2 Comic Sans MS;}{\f34\froman\fcharset0\fprq2 Georgia;}{\f35\fswiss\fcharset0\fprq2 Franklin Gothic Medium;}
{\f36\froman\fcharset0\fprq2 Palatino Linotype;}{\f37\fswiss\fcharset0\fprq2 Tahoma;}{\f38\fswiss\fcharset0\fprq2 Trebuchet MS;}{\f39\froman\fcharset2\fprq2 Webdings;}{\f40\fscript\fcharset1\fprq2 Estrangelo Edessa;}{\f41\fnil\fcharset1\fprq2 Gautami;}
{\f42\fnil\fcharset1\fprq2 Latha;}{\f43\fnil\fcharset1\fprq2 Mangal;}{\f44\fnil\fcharset1\fprq2 MV Boli;}{\f45\fnil\fcharset1\fprq2 Raavi;}{\f46\fnil\fcharset1\fprq2 Shruti;}{\f47\fnil\fcharset1\fprq2 Tunga;}{\f48\froman\fcharset0\fprq2 Sylfaen;}
{\f49\fswiss\fcharset0\fprq2 Microsoft Sans Serif;}{\f50\fswiss\fcharset0\fprq2 Arial Narrow;}{\f51\fdecor\fcharset0\fprq2 Curlz MT;}{\f52\froman\fcharset0\fprq2 Engravers MT;}{\f53\fswiss\fcharset0\fprq2 Franklin Gothic Book;}
{\f54\fswiss\fcharset0\fprq2 Franklin Gothic Demi Cond;}{\f55\fswiss\fcharset0\fprq2 Franklin Gothic Heavy;}{\f56\fswiss\fcharset0\fprq2 Franklin Gothic Medium Cond;}{\f57\fswiss\fcharset0\fprq2 Century Gothic;}
{\f58\fscript\fcharset0\fprq2 Edwardian Script ITC;}{\f59\fdecor\fcharset0\fprq2 Jokerman;}{\f60\fdecor\fcharset0\fprq2 Juice ITC;}{\f61\fswiss\fcharset0\fprq2 Lucida Sans Unicode;}{\f62\fscript\fcharset0\fprq2 Mistral;}
{\f63\fmodern\fcharset0\fprq2 OCR A Extended;}{\f64\froman\fcharset0\fprq2 Rockwell;}{\f65\froman\fcharset2\fprq2 Wingdings 2;}{\f66\froman\fcharset2\fprq2 MT Extra;}{\f67\fswiss\fcharset0\fprq2 Impact;}{\f68\fmodern\fcharset2\fprq1 MS LineDraw;}
{\f69\fdecor\fcharset0\fprq2 Algerian;}{\f70\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}{\f71\froman\fcharset0\fprq2 Bookman Old Style;}{\f72\fdecor\fcharset0\fprq2 Braggadocio;}{\f73\fswiss\fcharset0\fprq2 Britannic Bold;}
{\f74\fscript\fcharset0\fprq2 Brush Script MT;}{\f75\fdecor\fcharset0\fprq2 Colonna MT;}{\f76\fdecor\fcharset0\fprq2 Desdemona;}{\f77\froman\fcharset0\fprq2 Footlight MT Light;}{\f78\fdecor\fcharset0\fprq2 Kino MT;}
{\f79\froman\fcharset0\fprq2 Wide Latin;}{\f80\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f81\fdecor\fcharset0\fprq2 Playbill;}{\f82\fnil\fcharset0\fprq2 OpenSymbol;}{\f83\fswiss\fcharset2\fprq2 WP Phonetic;}
{\f84\fnil\fcharset2\fprq2 WP MathExtendedB;}{\f85\fmodern\fcharset0\fprq1 WP BoxDrawing;}{\f86\fnil\fcharset2\fprq2 WP IconicSymbolsB;}{\f87\fnil\fcharset2\fprq2 WP Greek Helve;}{\f88\fnil\fcharset2\fprq2 WP MathExtendedA;}
{\f89\froman\fcharset2\fprq2 WP CyrillicA;}{\f90\fnil\fcharset2\fprq2 WP Japanese;}{\f91\fnil\fcharset2\fprq2 WP MathB;}{\f92\fnil\fcharset2\fprq2 WP IconicSymbolsA;}{\f93\fnil\fcharset2\fprq2 WP Arabic Sihafa;}
{\f94\froman\fcharset2\fprq2 WP MultinationalA Roman;}{\f95\fnil\fcharset0\fprq2 WP CyrillicB;}{\f96\fnil\fcharset2\fprq2 WP MultinationalB Roman;}{\f97\fmodern\fcharset2\fprq1 WP Greek Courier;}{\f98\fnil\fcharset2\fprq2 WP MathA;}
{\f99\fnil\fcharset2\fprq2 WP ArabicScript Sihafa;}{\f100\fnil\fcharset2\fprq2 WP Greek Century;}{\f101\fnil\fcharset2\fprq2 WP TypographicSymbols;}{\f102\fnil\fcharset2\fprq2 WP Hebrew David;}{\f103\fnil\fcharset2\fprq2 WP MultinationalA Helve;}
{\f104\fnil\fcharset2\fprq2 WP MultinationalB Helve;}{\f105\fmodern\fcharset2\fprq1 WP MultinationalA Courier;}{\f106\fmodern\fcharset2\fprq1 WP MultinationalB Courier;}{\f107\fscript\fcharset0\fprq2 Ribbon131 Bd BT;}
{\f108\froman\fcharset0\fprq2 Humanst521 Lt BT;}{\f109\froman\fcharset0\fprq2 GeoSlab703 Lt BT;}{\f110\fswiss\fcharset0\fprq2 Swis721 BlkEx BT;}{\f111\fswiss\fcharset0\fprq2 Humanst521 Cn BT;}{\f112\fdecor\fcharset0\fprq2 Onyx BT;}
{\f113\fdecor\fcharset0\fprq2 CaslonOpnface BT;}{\f114\fswiss\fcharset0\fprq2 EngraversGothic BT;}{\f115\fscript\fcharset0\fprq2 ShelleyVolante BT;}{\f116\froman\fcharset0\fprq2 BernhardMod BT;}{\f117\froman\fcharset0\fprq2 Arrus BT;}
{\f118\fscript\fcharset0\fprq2 OzHandicraft BT;}{\f119\fnil\fcharset0\fprq2 Sydnie;}{\f120\froman\fcharset255\fprq2 Roman;}{\f121\fscript\fcharset255\fprq2 Script;}{\f122\fmodern\fcharset255\fprq2 Modern;}{\f123\fswiss\fcharset0\fprq1 MS Dialog;}
{\f124\fmodern\fcharset0\fprq0 Elite;}{\f125\fmodern\fcharset0\fprq0 Prestige;}{\f126\fswiss\fcharset0\fprq0 Letter Gothic;}{\f127\fmodern\fcharset0\fprq0 GothicPS;}{\f128\fmodern\fcharset0\fprq0 CubicPS;}{\f129\fmodern\fcharset0\fprq0 LinePrinter;}
{\f130\fmodern\fcharset0\fprq0 AvantGarde;}{\f131\fswiss\fcharset0\fprq0 Helvetica-Narrow;}{\f132\fmodern\fcharset0\fprq0 Metro;}{\f133\fswiss\fcharset0\fprq0 Presentation;}{\f134\fmodern\fcharset0\fprq0 APL;}{\f135\fmodern\fcharset0\fprq0 OCRA;}
{\f136\fmodern\fcharset0\fprq0 OCRB;}{\f137\froman\fcharset0\fprq0 Bookman;}{\f138\froman\fcharset0\fprq0 Madaleine;}{\f139\froman\fcharset0\fprq0 ZapfHumanist;}{\f140\froman\fcharset0\fprq0 Classic;}{\f141\froman\fcharset0\fprq0 Roman f;}
{\f142\froman\fcharset0\fprq0 Roman g;}{\f143\froman\fcharset0\fprq0 Roman h;}{\f144\froman\fcharset0\fprq0 NewCenturySchlbk;}{\f145\froman\fcharset0\fprq0 Palatino;}{\f146\froman\fcharset0\fprq0 Souvenir;}{\f147\froman\fcharset0\fprq0 Garamond;}
{\f148\froman\fcharset0\fprq0 Caledonia;}{\f149\froman\fcharset0\fprq0 Bodini;}{\f150\froman\fcharset0\fprq0 University;}{\f151\fscript\fcharset0\fprq0 ScriptPS;}{\f152\fscript\fcharset0\fprq0 Script c;}{\f153\fscript\fcharset0\fprq0 Script d;}
{\f154\fscript\fcharset0\fprq0 Commercial Script;}{\f155\fscript\fcharset0\fprq0 Park Avenue;}{\f156\fscript\fcharset0\fprq0 Coronet;}{\f157\fscript\fcharset0\fprq0 Script h;}{\f158\fscript\fcharset0\fprq0 Greek;}{\f159\froman\fcharset0\fprq0 Kana;}
{\f160\froman\fcharset0\fprq0 Hebrew;}{\f161\froman\fcharset0\fprq0 Roman s;}{\f162\froman\fcharset0\fprq0 Russian;}{\f163\froman\fcharset0\fprq0 Roman u;}{\f164\froman\fcharset0\fprq0 Roman v;}{\f165\froman\fcharset0\fprq0 Roman w;}
{\f166\fdecor\fcharset0\fprq0 Narrator;}{\f167\fdecor\fcharset0\fprq0 Emphasis;}{\f168\fdecor\fcharset0\fprq0 ZapfChancery;}{\f169\fdecor\fcharset0\fprq0 Decor d;}{\f170\fdecor\fcharset0\fprq0 Old English;}{\f171\fdecor\fcharset0\fprq0 Decor f;}
{\f172\fdecor\fcharset0\fprq0 Decor g;}{\f173\fdecor\fcharset0\fprq0 Cooper Black;}{\f174\fnil\fcharset0\fprq0 Math7;}{\f175\fnil\fcharset0\fprq0 Math8;}{\f176\fnil\fcharset0\fprq0 EAN;}{\f177\fnil\fcharset0\fprq0 PCline;}
{\f178\fnil\fcharset0\fprq0 Tech h;}{\f179\fmodern\fcharset0\fprq0 Courier Bold{\*\falt Courier};}{\f180\fmodern\fcharset0\fprq0 Courier Oblique{\*\falt Courier};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f4\fs20 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\tqc\tx4320\tqr\tx8640 \f4\fs20 \sbasedon0\snext15 header;}{\s16\tqc\tx4320\tqr\tx8640 \f4\fs20 \sbasedon0\snext16 
footer;}}{\info{\author Nicholas L. Pappas, Ph.D.}{\creatim\yr1910\mo2\dy1}{\revtim\yr1910\mo2\dy1}{\version1}{\edmins1}{\nofpages0}{\nofwords0}{\nofchars0}{\vern49203}}\margl1440\margr1008\margt720\margb720 
\facingp\ftnbj\aenddoc\ftnrestart\pgnstart333\notabind\noextrasprl\sprsspbf\brkfrm\hyphcaps0 \fet0\sectd \psz1\sbknone\pgnrestart\pgnstarts333\linex576\footery475\endnhere {\headerl \pard\plain \qj\li-1440\ri-1008\sl-240\slmult0 \f4\fs20 {\f3\fs24 
                                Computer Architecture and Design
\par }}{\headerr \pard\plain \qj\li-1440\ri-1008\sl-240\slmult0 \f4\fs20 {\f3\fs24                                 Computer Architecture and Design
\par }}{\footerl \pard\plain \qj\li-1440\ri-1008\sl-240\slmult0 \f4\fs20 {\f3\fs24 (C) Copyright 1991 Nicholas L. Pappas, PhD.     910331       \chpgn 
\par }}{\footerr \pard\plain \qj\li-1440\ri-1008\sl-240\slmult0 \f4\fs20 {\f3\fs24 (C) Copyright 1991 Nicholas L. Pappas, PhD.     910331       \chpgn 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \sl-240\slmult0 \f4\fs20 {\b\f3\fs24 3.4 Microinstructions}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
The process that created the RISC uData Path was dominated by the RISC goal: one mI per RISC uI.  As the process evolved the four CISC mI were modified to suit that goal.  The mBR mI was eliminated by adding the adr and jmp_to fields to the RISC mI_word. 
 A third source operand, s3, was added to the mALU mI.  And, the mop operand was added to the mMOV mI.  The following set of three mI and one mI_word resulted.  The mI_word details are found in Table 3.5.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab mALU op sx sy s3 dz rw
\par \tab mMOV mop s dz rw
\par \tab mNOP
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
The number of bits in the CISC mI word was reduced to 32 because we chose to have different mI_words for each type of mI (table 2.11).  This time we choose to use the same mI_word for all of the RISC mI.  The price paid is an increased number of RISC mI_w
ord bits.  The gain is in a simplified mDecoder.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 3.5 Micro Data Path}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
The micro data path is the source of the control lines that set up the user data path to execute uI.  The micro data path we choose for the RISC computer is shown in figure 3.10.  This is a modified copy of the CISC micro data path (figure 2.13).
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The modifications primarily stem from the use of the absolute address jmp_to field instead of the relative address moff field.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 In figure 3.10 note how adr selects the next address source from jmp_to or mI_start bits.  Observe how the jmp_to s
ource replaces the CISC mpc+1 and mpc+moff sources shown in figure 2.13.  Also observe that ir bits from the uData Path are mControl inputs.  Like CISC the RISC opcode field is the source for the mI_start address.  The RISC uI fields for r}{\f3\fs24\dn60 
x}{\f3\fs24 , r}{\f3\fs24\dn60 y}{\f3\fs24 , and r}{\f3\fs24\dn60 z}{\f3\fs24  are routed from the ir outputs to the register file inputs.  The RISC uI m, which includes n, field is routed to the program control logic.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 3.6 Micro Control}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 One mI per uI implies in a not very obvious way that hard wired logic can be used in lieu of microc
ode.  This other form of microcontroller does not use microprograms.  The flexible, changeable microcode is replaced by hardwired logic circuits.  This important and complex form is considered in a separate chapter.  In this chapter we use the mPC\_mROM\_
mI
R microcontroller form (figure 3.10).  As before, each mI field activates a subset of user data path control lines.  The lines activated by the mI_word bits set up the user data path.  The mI executes its functions when the mCtrl ASM steps through its sta
tes (figure 3.11).  The ASM executes one mI at a time.
\par \page }{\b\f3\fs24 Figure 3.10  RISC mControl - mData Path and mCTRL
\par }\pard {\b\f3\fs24 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 \page Figure 3.11  RISC mControl - Elementary ASM Chart for mCTRL
\par }\pard {\b\f3\fs24 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 \page 3.7 Microprograming}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 RISC computer microassembly language programming is eas
ier than CISC computer microassembly language programming because mI lists for RISC uI reduce to one or two mI.  A RISC microassembler translates uI into mI.  On the other hand the RISC microprogramming process is more difficult because the hardware is mo
re complex.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 A microassembler translates mI into mI_words.  In what follows both translations are shown: uI to mI, mI to mI_word.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Fetching the next uI requires two mI (the fetch_uI mI list).  This unavoidable overhead in effect represents a serious degra
dation of performance.  With most RISC uI implemented by one mI the overhead is about two-thirds of the user's program elapsed time for execution.  However, pipelining reduces the elapsed time occupied by overhead mI.  [Pipelining is discussed in another 
chapter.]
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 3.7.1 mI Fields}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
The microinstruction word uses jmp_to and adr fields to set up and control the RISC mControl mData Path in figure 3.10 for the next mI address.  These mControl fields are not found in Table 3.4 because they are not part of the uD
ata Path.  These mControl fields are additions to the mI_word.  The need for an mBR mI is eliminated when the jmp_to and adr fields are part of all mI words.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
Each mI field activates a subset of user data path control lines.  The lines activated by the mI_word bits set up the user data path.  The mI executes its functions when the mCtrl ASM steps through its states (figure 3.11).  The ASM executes one mI at a t
ime.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Microprogramming is the business of filling in the bit patterns of 1's and 0's in the fiel
ds of mI-words stored in the mROM (figure 3.10).  When a field's bit pattern is not encoded each bit corresponds to one user data path control line.  Clearly no encoding results in the largest number of bits in the mI word.  Also this choice results in a 
minimum number of mI in the mROM.  This code is wide and short.  This code is called horizontal microcode.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Encoding narrows the mI word by reducing the number of bits.  The price paid is the need for mDecoder circuits with their propagation delays.  Cost
 reduction is one motivation for encoding because mROM bits generate more system costs than decoders.  The bits of a field encode or do not encode the set of control lines they control.  Field encoding reduces the number of field bits.  
\par }\pard {\f3\fs24 
\par Furthermore, we can reduce the mI word bit count by encoding the fields themselves.  This tall and narrow mI coding is known as vertical microcode.  We choose the middle road encoding only the fields of bits, and not encoding the fields into master-fields
.
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 Table 3.7  Micro Assembly Language for Micro Instructions }{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24     }{\b\f3\fs24 mALU  op    sx    sy    s3\tab dz    rw   }{\f3\fs24 
\par           nop   nop   nop   nop\tab nop   nop
\par           add   k           mcc_rpt\tab  r
\par           addc  mem   mem   addn\tab mar   w
\par           +1    r0    r0\tab \tab \tab mbr
\par           \_1    rx    ry           rz
\par           neg   con   con
\par           sub   int   int          int
\par           subc  pc    pc           pc
\par           subr  
\par           subrc                    ir
\par           not
\par           \_one (all ones)
\par           zero (all zeros)
\par           and
\par           or
\par           xor
\par \tab \tab subz (special operator for BZ n.  See 3.7.9)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24           rotl  (shifts)
\par           sll
\par           sra
\par           srl
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24    }{\b\f3\fs24 mMOV\tab mop\tab   s     dz    rw   }{\f3\fs24 
\par \tab \tab nop    nop   nop   nop
\par \tab \tab incpc              r
\par \tab \tab const+ mem   mar   w
\par \tab \tab const- r0    mbr
\par \tab \tab consth rx    rz
\par \tab \tab rypc   ry
\par \tab \tab r0pc   int   int
\par \tab \tab addm\tab   pc    pc
\par \tab \tab \tab \tab    ir
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 Table 3.8  mI_word Fields Specified by mI Operands }{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab \tab \tab |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par                     nop   nop     nop nop   nop  nop   nop   nop
\par                     add   rotl     r                         incpc
\par                     addc  sll      w  mar        mem   mem   const+
\par                     +1    sra         mbr        r0    r0    const-
\par                     -1    srl         r}{\f3\fs24\dn60 z}{\f3\fs24          r}{\f3\fs24\dn60 y}{\f3\fs24     r}{\f3\fs24\dn60 x}{\f3\fs24     consth
\par                     neg                          con   con   rypc
\par                     sub               int        int   int   r0pc
\par                     subc              pc         pc    pc    addm
\par                     subr                                     addn
\par                     subrc             ir                 mcc_report
\par \tab \tab \tab      not
\par \tab \tab \tab      -one (all ones)
\par \tab \tab \tab      zero (all zeros)
\par \tab \tab \tab      and
\par \tab \tab \tab      or
\par \tab \tab \tab      xor
\par \tab \tab \tab \tab subz
\par }\pard {\f3\fs24 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 Table 3.9  Control Lines for mI_Word Fields}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab \tab \tab |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  (1)     (2)        (3)   (3) (4),nop nop   nop  nop   nop   nop
\par                                    r  ldir  saz              incpc
\par                                    w  ldmar sxz  smemy smemx skir
\par                                       ldmbr syz  sr0y  sr0x  scon+
\par                                       ldrz  sbz  sryy  srxx  scon-
\par                                             scz  scony sconx sconh
\par                                       ldint      sinty sintx sn
\par                                       ldpc       spcy  spcx    
\par                                                              fillb0
\par \tab \tab \tab                                               fillbm
\par \tab \tab \tab                                               fillh0
\par \tab \tab \tab                                               fillhm
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                                                              ldmbrqy
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab  addn
\par                                                              addm
\par                                                              rypc
\par \tab \tab \tab                                               r0pc
\par (1)  Enter absolute address to jump to.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 (2)\tab }{\f3\fs24\ul adr\tab selected address source}{\f3\fs24 
\par \tab 0\tab jmp_to   
\par \tab 1\tab mI_start 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 (3)  See Table 3.10
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 (4)  See Table 3.2
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 subz assembles sub and the z mcc.
\par srlb assembles srl, sbz, fillb0
\par srab assembles sra, sbz, fillbm
\par srlh assembles srl, sbz, fillh0
\par srah assembles sra, sbz, fillhm
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Important Note: each fill-- asserts skmar.
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 marmbr assembles sll, ldmar, ldmbrqy
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Important Note: ldmbrqy asserts sn and skmar.
\par }\pard {\f3\fs24 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 Table 3.10  mALU operation codes}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 code      aluop     definition
\par \_\_\_\_\_\_\_\_  \_\_\_\_\_\_\_\_  \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\par 01001101  add       y plus x                 (y = 181 a, x = 181 b)
\par 01001111  addc      y plus x plus c (carry)
\par 00000011  +1        y plus 1
\par 01111101  \_1        y minus 1
\par 00000010  neg       \_y = y'+ 1 (2's complement)
\par 00110011  sub       y minus x = y + x'+ 1
\par 00110111  subc      y minus x with borrow = y + x'+ c
\par 01001010  subr      x minus y = x + y'+ 1
\par 01001110  subrc     x minus y with borrow = x + y'+ c
\par 10000101  not       y' (1's complement of y input)
\par 11100101  \_one      all 1's out, ignore alu inputs
\par 10011101  zero      all 0's out, ignore alu inputs
\par 11011101  and       y and x
\par 11110101  or        y or x
\par 10110101  xor       y xor x
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When shifting x: aluop = 11010001.  
\par When shifting y: aluop = 11111001.
\par 000       nop       when performing non shifting aluop
\par 001       rotl      shift left 1 bit,  msb to lsb, msb to c
\par 010       sll       shift left 1 bit,  0 to lsb,   msb to c 
\par 011       sra       shift right 1 bit, msb to msb, lsb to c
\par 111       srl       shift right 1 bit, 0 to msb,   lsb to c
\par }\pard {\f3\fs24 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.2 mI used as Fetch_uI Control cI}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Control instructions fetch the next uI in the program.  The fetch uI memory access is implemented with two RISC mI at the fetch_uI mROM (arbitrarily chosen) addresses 0000000}{\f3\fs24\dn60 2}{\f3\fs24  and 0000001}{
\f3\fs24\dn60 2}{\f3\fs24 .
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
The mControl multiplexer (figure 3.10) selects the jmp_to field as the next mI address when the adr field is 0 (Table 3.5).  When adr is 1 the mI_start address from the uI code in the ir is selected as the next mI address and the jmp_to field becomes a do
n't care.  We will put the mI_start label in the jmp_to field when adr is 1 to emphasize a jump to a new uI mI list.  This is done because we do not know the mI_start address.  We do not know the mI_start address because we cannot predict which uI is next
 in a user program.  Furthermore, we will put the fetch_uI label (instead of address 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ) in the jmp_to field when adr is 0 to emphasize a jump to the fetch_uI mI list.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI (figure 3.12) in the fetch_uI list has three active operands: pc, mar, and r.  
\par \tab mMOV nop   pc  mar r          
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand pc assembles spcy, and syz.  
\par \tab Operand mar assembles ldmar. 
\par \tab Operand r assembles r.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the mI is executed by the ASM the pc moves to the mar and r activates a read access.  The jmp_to address is 0000001}{\f3\fs24\dn60 2}{\f3\fs24 
.  The next mI executed is the second mI in the fetch_uI list.  The second mI has three active operands: incpc, mem, and ir.
\par \tab mMOV incpc mem ir  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand mem assembles nothing. 
\par \tab Operand ir assembles ldir. 
\par   \tab Operand incpc assembles incpc.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
The special bus from the memory q-output to the ir d-input eliminates the need for mem to assemble smemy and syz.  When the second mI is executed by the ASM the memory data representing the uI most recently fetched moves to the ir.  The next mI executed i
s the first mI in the mI list for the most recently fetched uI.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.12  Fetch_uI Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24          (mMOV mop   s   dz  rw)
\par addr0     mMOV nop   pc  mar r          
\par     1     mMOV incpc mem ir  nop
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0000001 0          nop   nop nop  r  ldmar syz  spcy  nop   nop
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-\_|
\par mI_start 1          nop   nop nop nop ldir  nop  nop   nop   incpc
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.3 Arithmetic and Logical Operators}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Microcoding arithmetic and logical operators is straightforward except, perhaps, for the immediate word operand n (figure 3.13). 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI (figure 3.13) has four active operands: add, r}{\f3\fs24\dn60 x}{\f3\fs24 , r}{\f3\fs24\dn60 y}{\f3\fs24 , and r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 ADD r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  r}{\f3\fs24\dn60 x}{\f3\fs24   r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand r}{\f3\fs24\dn60 x}{\f3\fs24   assembles srxx.
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24   assembles sryy.
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24   assembles ldrz. 
\par \tab Operand add assembles add and saz.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the mALU mI is executed by the ASM the sum of the contents of r}{\f3\fs24\dn60 x}{\f3\fs24  and r}{\f3\fs24\dn60 y}{\f3\fs24  is loaded into r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The second mI has four active operands: add, con, r}{\f3\fs24\dn60 y}{\f3\fs24 , and r}{\f3\fs24\dn60 z}{\f3\fs24 . 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 ADD n  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  con r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand con assembles sn, sconx, and sxz
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24   assembles sryy.
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24   assembles ldrz. 
\par \tab Operand add assembles add and saz.\tab (saz replaces sxz)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
The sn (figure 3.5) forms a signed number whose lower 16 bits are represented by n in the uI code.  The signed number has copies of n's msb in the upper 16 bits (figure 3.5).  Therefore when the mALU mI is executed by the ASM the sum of n and the contents
 of r}{\f3\fs24\dn60 y}{\f3\fs24  is loaded into r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The jmp_to address is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ) in both mI.  The next mI executed is the first mI in the fetch_uI list.
\par }\pard {\f3\fs24 
\par 
\par 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.13  Arithmetic and Logical Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 uI           \_\_\_> mALU op   sx  sy s3  dz rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 ADD r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  r}{\f3\fs24\dn60 x}{\f3\fs24   r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par ADD n  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  con r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  fetch_uI 0         add   nop nop nop ldrz  saz  sryy  srxx  nop
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-\_|
\par  fetch_uI 0         add   nop nop nop ldrz  saz  sryy  sconx sn
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.4 Shift Operators}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Microcoding shifts (figure 3.14) is not obvious because the r}{\f3\fs24\dn60 x}{\f3\fs24  or k operands specify the five bit number k.  The five lsb of n in register r}{\f3\fs24\dn60 x}{\f3\fs24 
 represent k (figure 3.3).  The number k programs the barrel shifter to shift k bits.  The skir control line selects k from the ir's five lsb.  When skir is not active the k source is r}{\f3\fs24\dn60 x}{\f3\fs24 
's five lsb.  This is why a field entry is not required when r}{\f3\fs24\dn60 x}{\f3\fs24  is the operand.  SLL is the example shown in figure 3.14.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI (figure 3.14) has four active operands: sll, r}{\f3\fs24\dn60 x}{\f3\fs24 , r}{\f3\fs24\dn60 y}{\f3\fs24 , and r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SLL r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sll r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand r}{\f3\fs24\dn60 x}{\f3\fs24   assembles srxx.\tab 
\par \tab (srxx puts rx on the x bus which not used.)
\par \tab (r}{\f3\fs24\dn60 x}{\f3\fs24 [4..0] provides the k number.)
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24   assembles sryy. 
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24   assembles ldrz. 
\par \tab Operand sll assembles sll and sbz.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the mALU mI is executed by the ASM the contents of r}{\f3\fs24\dn60 y}{\f3\fs24  shifted k bits by the k number in r}{\f3\fs24\dn60 x}{\f3\fs24  is loaded into r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The second mI has four active operands: sll, k, r}{\f3\fs24\dn60 y}{\f3\fs24 , and r}{\f3\fs24\dn60 z}{\f3\fs24 . 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SLL k  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sll k  r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand k   assembles skir.
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24   assembles sryy. 
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24   assembles ldrz. 
\par \tab Operand sll assembles sll and sbz. 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the mALU mI is executed by the ASM the contents of r}{\f3\fs24\dn60 y}{\f3\fs24  shifted k bits by the k number in the ir is loaded into r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The jmp_to address is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ) in both forms of SLL.  The next mI executed is the first mI in the fetch_uI list.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.14  Shift Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 uI           \_\_\_> mALU op  sx sy s3  dz rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SLL r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sll r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par SLL k  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sll k  r}{\f3\fs24\dn60 y}{\f3\fs24  nop r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par fetch_uI 0          nop   sll nop nop ldrz  sbz  sryy  srxx  nop
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par fetch_uI 0          nop   sll nop nop ldrz  sbz  sryy  nop   skir
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.5 CONST }{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
Microcoding CONST+, CONST-, or CONSTH is a matter of selecting the correct misc field code (figures 3.5 and 3.15).  The mI for CONST- and CONSTH assemble microcode just like CONST+ does.  The only difference is found in the misc field entry.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI (figure 3.15) has three active operands: scon+. con, and r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 CONST+ n r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mMOV  const+ con r}{\f3\fs24\dn60 z}{\f3\fs24  nop      Constant = 0^16##n
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand con    assembles sn, sconx, and sxz
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24      assembles ldrz.
\par \tab Operand const+ assembles scon+.\tab (scon+ replaces sn)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Scon+ replaces the previously assembled sn.  Scon+ forms the \tab  constant.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the mMOV mI is executed by the ASM the postive constant formed from n is loaded into r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The jmp_to address is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ) in all CONST uI.  The next mI executed is the first mI in the fetch_uI list.
\par }\pard {\f3\fs24 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.15  CONST Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 uI          \_\_\_> mMOV  mop   s   dz rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 CONST+ n r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mMOV  const+ con r}{\f3\fs24\dn60 z}{\f3\fs24  nop      Constant = 0^16##n
\par CONST\_ n r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mMOV  const\_ con r}{\f3\fs24\dn60 z}{\f3\fs24  nop      Constant = 1^16##n
\par CONSTH n r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mMOV  consth con r}{\f3\fs24\dn60 z}{\f3\fs24  nop      Constant = n##0^16
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par fetch_uI 0          nop   nop nop nop ldrz  sxz  nop   sconx scon+
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par fetch_uI 0          nop   nop nop nop ldrz  sxz  nop   sconx scon\_
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par fetch_uI 0          nop   nop nop nop ldrz  sxz  nop   sconx sconh
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.6 Scc}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
Microcoding Scc is complicated by two processes proceeding in parallel.  One process performs subtraction and sets condition codes implementing a comparison function.  The parallel process places the mcc_report on the z bus and stores it in r}{
\f3\fs24\dn60 z}{\f3\fs24 .
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI (figure 3.16) has five active operands: sub, r}{\f3\fs24\dn60 x}{\f3\fs24 , r}{\f3\fs24\dn60 y}{\f3\fs24 , mcc_report, and r}{\f3\fs24\dn60 z}{\f3\fs24 .  SZ is Scc where cc = Z.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SZ r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sub r}{\f3\fs24\dn60 x}{\f3\fs24   r}{\f3\fs24\dn60 y}{\f3\fs24  mcc_report r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand sub assembles sub and saz.
\par \tab Operand r}{\f3\fs24\dn60 x}{\f3\fs24   assembles srxx.
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24   assembles sryy. 
\par \tab Operand mcc_report assembles the cc z, and scz. 
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24   assembles ldrz. \tab \tab \tab (scz replaces saz)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the mI is executed by the ASM the difference r}{\f3\fs24\dn60 y}{\f3\fs24  - r}{\f3\fs24\dn60 x}{\f3\fs24  sets status bits.  The mcc_report is placed on the z bus and then it is loaded into r}{\f3\fs24\dn60 z}{
\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The second mI has five active operands: sub, con, r}{\f3\fs24\dn60 y}{\f3\fs24 , mcc_report, and r}{\f3\fs24\dn60 z}{\f3\fs24 . \tab 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SZ n  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sub con r}{\f3\fs24\dn60 y}{\f3\fs24  mcc_report r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand sub assembles sub and saz.
\par \tab Operand con assembles sn, sconx, and sxz.\tab (sxz replaces saz)
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24   assembles sryy. 
\par \tab Operand mcc_report assembles the cc z, and scz.
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24   assembles ldrz. \tab \tab \tab \tab (scz replaces sxz)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the mI is executed by the ASM the difference r}{\f3\fs24\dn60 y}{\f3\fs24  - n sets status bits.  The mcc_report is placed on the z bus and then it is loaded into r}{\f3\fs24\dn60 z}{\f3\fs24 .  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The jmp_to address is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ).  The next mI executed is the first mI in the fetch_uI list.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.16  Scc Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 uI          \_\_\_> mALU op  sx  sy s3         dz rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SZ r}{\f3\fs24\dn60 x}{\f3\fs24  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sub r}{\f3\fs24\dn60 x}{\f3\fs24   r}{\f3\fs24\dn60 y}{\f3\fs24  mcc_report r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par SZ n  r}{\f3\fs24\dn60 y}{\f3\fs24  r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU sub con r}{\f3\fs24\dn60 y}{\f3\fs24  mcc_report r}{\f3\fs24\dn60 z}{\f3\fs24  nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par fetch_uI 0   0      sub   nop z   nop ldrz  scz  sryy  srxx  nop
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par fetch_uI 0   0      sub   nop z   nop ldrz  scz  sryy  sconx sn
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-\_\_|
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.7 Load}{\f3\fs24 
\par }\pard {\f3\fs24 
\par Load is jargon for data transfers from memory to registers.  The uI LB, LH, and LW transfer 1, 2,
 and 4 bytes respectively.  In all cases the bytes transferred fill the destination register starting from the lsb bit 00.  Word transfers are straightforward because register and memory words are 32 bits wide.  However byte and halfword transfers need al
ignment to register bit 00 when the two address lsb are not 00.  We say the two address lsb represent the in_word byte address (figure 3.6).  Two bit in_word byte addresses 01, 10, 11 require 8, 16, and 24 bit shift right logical (srl) operations to align
 the byte(s) read from memory.  And, register bits not receiving transferred bits are set to 0.  In this way the data transferred is filled as well as shifted.  
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 
Special shift ops srlh and srlb (Table 3.5) specify operations to shift and fill the unsigned data word with zeros (figure 3.7, 3.17).  Special shift ops srah and srab (Table 3.5) specify operations on the signed data to shift and fill the signed data wor
d with msb's (figures 3.7 and 3.17). In turn the fill commands also assert skmar.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI (figure 3.17) has five active operands: add, con, r}{\f3\fs24\dn60 y}{\f3\fs24 , mar, and r.  The first mI fetches the data from memory.  [A review of the *r}{\f3\fs24\dn60 y}{\f3\fs24 
(n) address mode definition may be in order.]
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 LB *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  con r}{\f3\fs24\dn60 y}{\f3\fs24   nop mar r
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand con assembles sn, sconx, and sxz.
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24   assembles sryy.
\par \tab Operand mar assembles ldmar. 
\par \tab Operand r   assembles r.
\par \tab Operand add assembles add and saz.\tab \tab (saz replaces sxz)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI jmp_to entry is mPC+1.  This points to the second mI in the list.  The second mI (figure 3.17) has three active operands: srab, mem, and r}{\f3\fs24\dn60 z}{\f3\fs24 
.  The second mI stores the aligned data in r}{\f3\fs24\dn60 z}{\f3\fs24 .
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand mem  assembles smemx.
\par \tab Operand r}{\f3\fs24\dn60 z}{\f3\fs24    assembles ldr}{\f3\fs24\dn60 z}{\f3\fs24 .
\par \tab Operand srab assembles sra, sbz, and fillbm.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The second mI jmp_to entry is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ).  When the two mI are executed by the ASM the data stored at address r}{\f3\fs24\dn60 y}{\f3\fs24 +n is loaded into r}{\f3\fs24\dn60 z}{
\f3\fs24 .  The next mI executed is the first mI in the fetch_uI list.  The only assembled field differences are as follows.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab \tab \tab \tab }{\f3\fs24\ul sh\tab misc   }{\f3\fs24 
\par LB  *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24  \tab \tab sra\tab fillbm
\par LBU *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24   \tab srl  fillb0
\par LH  *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24  \tab \tab sra  fillhm 
\par LHU *ry(n) rz \tab \tab srl  fillh0
\par LW  *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24  \tab \tab 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The data read by the LW uI does not need alignment.  This is why  mMOV is used to transfer data from mem to r}{\f3\fs24\dn60 z}{\f3\fs24  (figure 3.19).
\par \page }{\b\f3\fs24 Figure 3.17  LB (Load Byte) Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mALU op   sx  sy  s3  dz  rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 LB *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  con r}{\f3\fs24\dn60 y}{\f3\fs24   nop mar r
\par                   mALU srab nop mem nop r}{\f3\fs24\dn60 z}{\f3\fs24   nop
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  mPC+1   0          add   nop nop  r  ldmar saz  sryy  sconx sn
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par  0       0          nop   sra nop nop ldrz  sbz  smemy nop   fillbm
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-\_|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.18  LH (Load Halfword) Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mALU op   sx  sy  s3  dz  rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 LH *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  con r}{\f3\fs24\dn60 y}{\f3\fs24   nop mar r
\par                   mALU srah nop mem nop r}{\f3\fs24\dn60 z}{\f3\fs24   nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  mPC+1   0          add   nop nop  r  ldmar saz  sryy  sconx sn
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par  0       0          nop   sra nop nop ldrz  sbz  smemy nop   fillhm
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.19  LW (Load Word) Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mALU op   sx  sy  s3  dz  rw
\par                   mMOV mop  s   dz  rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 LW *r}{\f3\fs24\dn60 y}{\f3\fs24 (n) r}{\f3\fs24\dn60 z}{\f3\fs24  \_\_\_> mALU add  con r}{\f3\fs24\dn60 y}{\f3\fs24   nop mar r
\par                   mMOV nop  mem r}{\f3\fs24\dn60 z}{\f3\fs24   nop 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  mPC+1   0          add   nop nop  r  ldmar saz  sryy  sconx sn
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par  0       0          nop   nop nop nop ldrz  syz  smemy nop   nop
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.8 Store}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
Store is an alias for writing data from registers to memory.  The uI SB, SH, and SW transfer 1, 2, and 4 bytes respectively.  In all cases bytes transferred fill the destination memory bytes according to the in_word byte address (figure 3.6).  Word transf
ers are strai
ghtforward because register and memory words are 32 bits wide.  However byte and halfword transfers need alignment to the in_word byte address when the two address lsb are not 00.  In_word byte addresses of binary 01, 10, 11 require 8, 16, and 24 bit shif
t left logical (sll) operations to align and mask the transferred byte(s).  
\par If SB (figure 3.20) is executing and in_word address is 01 an 8 bit shift left logical is implemented.  The shift operation drops off 8 high bits and shifts in 8 zeros.  Now only t
he byte at the in_word address has meaning.  The entire word is put on the data bus but the zeros shifted in and the high byte bits are ignored because they are not written to memory.  This is so because only w}{\f3\fs24\dn60 1}{\f3\fs24 
 is activated by the uI SB in combination with in_word address 01 (figure 3.8).  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Emphasis: When storing a byte the left shift is 0, 8, 16, or 24 bits according to the byte position in the word.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The mI implementing SB (figure 3.20) has five active operands: add, r}{\f3\fs24\dn60 x}{\f3\fs24 , con, marmbr, and w.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SB r}{\f3\fs24\dn60 y}{\f3\fs24  *r}{\f3\fs24\dn60 x}{\f3\fs24 (n) \_\_\_> mALU add r}{\f3\fs24\dn60 x}{\f3\fs24  con nop marmbr w
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand con assembles sn, scony, and syz.
\par \tab Operand r}{\f3\fs24\dn60 x}{\f3\fs24  assembles srxx.
\par \tab Operand marmbr assembles sll, ldmar, ldmbrqy. 
\par \tab Operand w assembles w.\tab \tab \tab \tab (ldmbrqy replaces sn)
\par \tab Operand add assembles add and saz.\tab \tab (saz replaces syz)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The jmp_to address is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ) in all store uI.  The next mI executed is the first mI in the fetch_uI list.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 When the uI is executed by the ASM the data in r}{\f3\fs24\dn60 y}{\f3\fs24  is stored at address r}{\f3\fs24\dn60 x}{\f3\fs24 +n.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The SH and SW uI are executed by the same microcode that executes SB (figures 3.21 and 3.22).  The correct value of mar[1..0]LLL implements SH or SW instead of SB (figure 3.8).
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 Figure 3.20  SB (Store Byte) Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mALU op  sx sy  s3  dz     rw
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 SB r}{\f3\fs24\dn60 y}{\f3\fs24  *r}{\f3\fs24\dn60 x}{\f3\fs24 (n) \_\_\_> mALU add r}{\f3\fs24\dn60 x}{\f3\fs24  con nop marmbr w
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          add   sll nop  w  ldmar saz  scony srxx ldmbrqy
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.21  SH (Store Halfword) Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mALU op  sx sy  s3  dz     rw
\par SH r}{\f3\fs24\dn60 y}{\f3\fs24  *r}{\f3\fs24\dn60 x}{\f3\fs24 (n) \_\_\_> mALU add r}{\f3\fs24\dn60 x}{\f3\fs24  con nop marmbr w
\par                   
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          add   sll nop  w  ldmar saz  scony srxx ldmbrqy
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.22  Store Word Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mALU op  sx sy  s3  dz     rw
\par 1 mI code:
\par SW r}{\f3\fs24\dn60 y}{\f3\fs24  *r}{\f3\fs24\dn60 x}{\f3\fs24 (n) \_\_\_> mALU add r}{\f3\fs24\dn60 x}{\f3\fs24  con nop marmbr w
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          add   sll nop  w  ldmar saz  scony srxx ldmbrqy
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 3.7.9 Program Control}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 
Program control uses the special operators addn, addm, rypc, r0pc to activate the program control adder (figure 3.9).  This adder forms the approprate branch_to address in parallel with the data path alu executing the sub operation and setting the status 
bits.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Depending on which mI is executed the pc is loaded with the branch_to address r}{\f3\fs24\dn60 y}{\f3\fs24 , or zero unconditionally.  Or the addresses pc+n or pc+m if the mcc_report is true (figure 3.9).
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 BZ n r}{\b\f3\fs24\dn60 y}{\b\f3\fs24 :}{\f3\fs24   The mI implementing BZ (figure 3.23) has four active operands: sub, r0, r}{\f3\fs24\dn60 y}{\f3\fs24 , and addn.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 BZ n r}{\f3\fs24\dn60 y}{\f3\fs24  \_\_\_> mALU sub r0 r}{\f3\fs24\dn60 y}{\f3\fs24  addn nop nop    
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand r0   assembles sr0x.
\par \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24    assembles sryy.
\par \tab Operand addn assembles addn.
\par \tab Operand subz assembles sub and z.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The jmp_to address is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ).  The next mI executed is the first mI in the fetch_uI list.  If the cc is false the next }{\b\f3\fs24 uI}{\f3\fs24 
 fetched is the uI addressed by pc+4.  If the cc is true the  next }{\b\f3\fs24 uI}{\f3\fs24  fetched is the uI addressed by pc+n.  
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.23  Branch Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mALU op  sx sy s3   dz  rw
\par BZ n r}{\f3\fs24\dn60 y}{\f3\fs24       \_\_\_> mALU sub r0 r}{\f3\fs24\dn60 y}{\f3\fs24  addn nop nop    
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          sub   nop z   nop nop   nop  sryy  sr0x  addn
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 JMP  r}{\b\f3\fs24\dn60 y}{\b\f3\fs24 :}{\f3\fs24   The unconditional JMP r}{\f3\fs24\dn60 y}{\f3\fs24  (figure 3.24) puts a copy of r}{\f3\fs24\dn60 y}{\f3\fs24  in the pc.  
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The first mI implementing JMP r}{\f3\fs24\dn60 y}{\f3\fs24  (figure 3.24) has two active operands: r}{\f3\fs24\dn60 y}{\f3\fs24  and pc.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand r}{\f3\fs24\dn60 y}{\f3\fs24  assembles sryy and syz. 
\par \tab Operand pc assembles ldpc.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 The second mI implementing JMP r}{\f3\fs24\dn60 y}{\f3\fs24  (figure 3.24) has one active operand: rypc.  See figure 3.9.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand rypc assembles rypc.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 In both mI the jmp_to address is fetch_uI (= 0000000}{\f3\fs24\dn60 2}{\f3\fs24 ).  The next mI executed is the first mI in the fetch_uI list.  
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 JMP m: }{\f3\fs24  In the unconditional JMP m microcode (figure 3.25) special operator addm (figure 3.9) forms pc+m and loads it into the pc.   
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \tab Operand addm assembles addm.
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.24  Jump ry Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mMOV mop  s   dz  rw
\par      JMP  r}{\f3\fs24\dn60 y}{\f3\fs24  \_\_\_> mMOV nop  r}{\f3\fs24\dn60 y}{\f3\fs24   pc  nop
\par or   JMP  r}{\f3\fs24\dn60 y}{\f3\fs24  \_\_\_> mMOV rypc nop nop nop\tab \tab (alternate)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_-\_|
\par  0       0          nop   nop un  nop ldpc  syz  sryy  nop   nop |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par or the alternate
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par  0       0          nop   nop un  nop nop   nop  nop   nop   rypc
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.25  Jump m Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mMOV mop  s   dz  rw
\par   JMP m      \_\_\_> mMOV addm nop nop nop
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          nop   nop un  nop nop   nop  nop   nop   addm
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 CALL m and CALL r}{\b\f3\fs24\dn60 y}{\b\f3\fs24 :}{\f3\fs24 
  In the unconditional CALL m microcode (figure 3.26) special operator addm (figure 3.9) forms pc+m and loads it into the pc in parallel with the move from the pc to r}{\f3\fs24\dn60 31}{\f3\fs24 .
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 In the unconditional CALL r}{\f3\fs24\dn60 y}{\f3\fs24  microcode (figure 3.26) special operator rypc (figure 3.9) loads r}{\f3\fs24\dn60 y}{\f3\fs24  into the pc in parallel with the move from the pc to r}{\f3\fs24\dn60 
31}{\f3\fs24 .
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.26  Call m Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mMOV mop  s  dz  rw
\par  CALL m      \_\_\_> mMOV addm pc r}{\f3\fs24\dn60 31}{\f3\fs24  nop
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          nop   nop un  nop ldrz  syz  spcy  nop   addm 
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.27  Call r}{\b\f3\fs24\dn60 y}{\b\f3\fs24  Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mMOV mop  s  dz  rw
\par      CALL ry \_\_\_> mMOV rypc pc r}{\f3\fs24\dn60 31}{\f3\fs24  nop
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          nop   nop un  nop ldrz  syz  spcy  nop   rypc
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 TRAP:}{\f3\fs24   For TRAP (figure 3.28) special operator r0pc loads zero into the pc (fig 3.8) in parallel with the move from the pc to int.  The RET microcode is straightforward (figure 3.29).
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.28  Trap Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mMOV mop  s  dz  rw
\par         TRAP \_\_\_> mMOV r0pc pc int nop
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          nop   nop un  nop ldint syz  spcy  nop   r0pc
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\b\f3\fs24 Figure 3.29  Return Microcode}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24                   mMOV mop  s   dz rw
\par          RTE \_\_\_> mMOV nop  int pc nop
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par |jmp_to |adr|      |aluop|sh |mcc |rw|ldz  |selz|sely |selx |misc |
\par |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_-|
\par  0       0          nop   nop un  nop ldpc  sxz  nop   sintx nop
\par |\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_-|
\par }\pard {\f3\fs24 
\par 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 Exercises 3:}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 Use RISC uI (Table 3.1 p302) to write user programs implementing the CISC uI (Table 2.1 p211) in the following exercises.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.1  ABS ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.2  ADDC *rx ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.3  BTST rx *\_ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.4  CLR *ry+
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.5  CMP *rx *ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.6  DEC *ry(n)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.7  DIVS rx ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.8  DIVU rx ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.9  MULS rx ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.10 MULU rx ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.11 NEG *ry(n)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.12 Scc *rx *ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.13 SUB *\_rx *ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.14 AND *rx ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.14 OR  *rx(n) *ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.15 XOR addr_abs rx
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.16 SLL addr_abs *ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.17 ADD *rx addr_abs 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.18 DEC addr_abs
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.19 EXCH ry addr_abs
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.20 MOV *rx ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.21 MOV *rx *ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.22 MOV rx ry
\par \page 3.23 PUSH ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.24 POP ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.25 JMP addr_abs
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.26 JRcc n
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.27 CALL target
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.28 CALL ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.29 RET
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.30 GETPC ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.31 EXCH pc *ry(n)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.32 Reference fig 3.4.  Design a circuit with outputs sc1, sc0.
\par      
\par      Asserted Low Inputs:   scon+ scon\_ sconh sn
\par      Asserted High Outputs: sc1   sc0
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.33 Reference fig 3.5.  Explain why byte and halfword data loaded from memory must be shifted right so that data bit 0 is placed in destination register bit 0.
\par      
\par 3.34 Reference fig 3.6.  Design a circuit with outputs L2, L1, L0.
\par      
\par      Asserted Low Inputs:   snop srlh srah srlb srab
\par      Asserted High Outputs: L2   L1   L0
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.35 Reference fig 3.10.  Design the mCTRL state machine and output circuits.
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page In problems 3.40 through 3.84 use mROM addresses 3 and up.  Figure 3.11 places the cI at address
es 0 and 1.  In each problem show a two line answer. Line 1 is microcode using names as in figure 3.11.  Line 2 is microcode using code numbers from Table 3.6.  Use copies of Form 1 which is found below.
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.40 Microcode RISC uI ADD rx ry rz 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.41 Microcode RISC uI ADD n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.42 Microcode RISC uI ADDC rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.43 Microcode RISC uI ADDC n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.44 Microcode RISC uI SUB rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.45 Microcode RISC uI SUB n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.46 Microcode RISC uI SUBC rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.47 Microcode RISC uI SUBC n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.48 Microcode RISC uI SUBR rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.49 Microcode RISC uI SUBR n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.50 Microcode RISC uI AND rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.51 Microcode RISC uI AND n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.52 Microcode RISC uI OR rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.53 Microcode RISC uI OR n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.54 Microcode RISC uI XOR rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.55 Microcode RISC uI XOR n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.56 Microcode RISC uI SLL rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.57 Microcode RISC uI SLL n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.58 Microcode RISC uI SRA rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.59 Microcode RISC uI SRA n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.60 Microcode RISC uI SRL rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.61 Microcode RISC uI SRL n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page 3.62 Microcode RISC uI CONST+ n rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.63 Microcode RISC uI CONST\_ n rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.64 Microcode RISC uI CONSTH n rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.65 Microcode RISC uI Scc rx ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.66 Microcode RISC uI Scc n  ry rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.67 Microcode RISC uI LBU *ry(n) rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.68 Microcode RISC uI LB  *ry(n) rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.69 Microcode RISC uI LHU *ry(n) rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.70 Microcode RISC uI LH  *ry(n) rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.71 Microcode RISC uI LW  *ry(n) rz
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.72 Microcode RISC uI SB  rx *ry(n)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.73 Microcode RISC uI SH  rx *ry(n)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.74 Microcode RISC uI SW  rx *ry(n)
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.75 Microcode RISC uI BZ  n ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.76 Microcode RISC uI BNZ n ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.77 Microcode RISC uI JMP m
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.78 Microcode RISC uI JMP ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.79 Microcode RISC uI CALL m
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.80 Microcode RISC uI CALL ry
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.81 Microcode RISC uI TRAP
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.82 Microcode RISC uI RTE
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.83 Microcode RISC uI HALT
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 3.84 Microcode RISC uI NOP
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24 \page }{\b\f3\fs24 Form 1 for microcoding exercises 3.40 to 3.84.}{\f3\fs24 
\par }\pard {\f3\fs24 
\par }\pard \sl-240\slmult0 {\f3\fs24      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |jmp_to |adr|aluop|sh |mcc |rw |ldz  |selz|sely |selx |misc|
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par names|       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par codes|       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |jmp_to |adr|aluop|sh |mcc |rw |ldz  |selz|sely |selx |misc|
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |jmp_to |adr|aluop|sh |mcc |rw |ldz  |selz|sely |selx |misc|
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |jmp_to |adr|aluop|sh |mcc |rw |ldz  |selz|sely |selx |misc|
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par }\pard {\f3\fs24 
\par 
\par }\pard \sl-240\slmult0 {\f3\fs24      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |jmp_to |adr|aluop|sh |mcc |rw |ldz  |selz|sely |selx |misc|
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par      |       |   |     |   |    |   |     |    |     |     |    |
\par      |\_\_\_\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_|\_\_\_\_|\_\_\_|\_\_\_\_\_|\_\_\_\_|\_\_\_\_\_|\_\_\_\_\_|\_\_\_\_|
\par }\pard {\f3\fs24 
\par }}
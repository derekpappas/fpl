csl_enum yk {
	uo,
	lf,
	xi,
	pu,
	jv,
	ly,
	mu,
	la,
	kq
};
csl_enum mb {
	cj,
	ss,
	wn,
	eb,
	bf,
	mv,
	va
};
csl_enum dt {
	js,
	ou,
	qb,
	uf,
	vg,
	fi,
	as
};
csl_isa_instruction_format gv{
    gv( ){
     set_width( 3);
     generate_decoder( nrjs);
  }
}
;
csl_isa vq{
    vq( ){
     set_decoder_name( "vl");
     set_decoder_out_name_prefix( "jl");
     set_decoder_out_name_suffix( "mt");
     generate_decoder( nrjs);
     print( isa.txt);
  }
}
;
csl_fifo pl{
   pl( ){
     add_logic( programable_depth, 9);
     add_logic( priority_bypass);
     add_logic( depth_extend, 9);
     add_logic( parallel_input, all);
     add_logic( rd_words, 0);
     add_logic( stall_rd_side);
  }
}
;
csl_memory_map_page oo{
    oo( ){
     add_address_range( 9, 5);
     set_address_increment( 6);
     get_address_increment( );
     set_next_address( 0);
     get_next_address( );
     get_lower_bound( );
     set_data_word_width( 9);
     get_data_word_wodth( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page ou{
  oo qt;
  oo un;
    ou( ){
     add_address_range( 3, 5);
     add_reserved_address_range( 6, 0);
     add( oo);
     get_upper_bound( );
     get_aligment( );
  }
}
;
csl_memory_map_page hl{
  oo ga;
  ou dk;
    hl( ){
     set_next_address( 6);
     get_upper_bound( );
     set_data_word_width( 5);
     get_data_word_wodth( );
     get_endianess( );
  }
}
;
csl_memory_map by{
  ou uu;
  oo rc;
  ou tv;
  hl eu;
  oo kk;
  ou wu;
    by( ){
     auto_gen_memory_map( );
     set_top_unit( nrfxjsmq);
     set_type( hierach);
     set_data_word_width( 3);
     get_data_word_width( );
     set_prefix( ft);
     set_suffix( tc);
  }
}
;
csl_register qw{
    qw( ){
     add_logic( gray_output);
     set_count_amount( 9);
  }
}
;
csl_register lp{
    lp( ){
     set_width( 1);
     get_width( );
     set_depth( 0);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

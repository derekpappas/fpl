csl_enum iu {
	xl = 75,
	kf = 23,
	vr = 2,
	yw = 72,
	un = 95,
	qa = 57,
	km = 16,
	rf = 72,
	ra = 83,
	ae = 74,
	pm = 25,
	ol = 4,
	gi = 59,
	cy = 29,
	nm = 24,
	vn = 16,
	yg = 91,
	uw = 1,
	at = 89,
	vv = 6,
	jm = 14,
	vw = 18
};
csl_enum bn {
	ct,
	nc,
	xf,
	qn,
	sw
};
csl_enum xv {
	xl,
	it,
	bj,
	aw
};
csl_isa_instruction_format ax{
    ax( ){
     generate_decoder( ca);
  }
}
;
csl_isa_instruction mr : ax{
    mr( ){
    set_asm_mnemonic( csl_list "jt", "bm", "it", "my", "py", "wn", "qc", "ci");
  }
}
;
csl_isa_instruction ya : ax{
    ya( ){
    set_asm_mnemonic( mw);
  }
}
;
csl_isa im{
  ya ga;
  ya qc;
  mr hc;
  mr re;
  mr ow;
  mr ar;
  ya kr;
  ya bc;
  ya ev;
  ya fe;
  mr cv;
  ya nt;
  mr na;
  ya ka;
  ya np;
  mr xv;
  ya vx;
  mr eg;
  ya sw;
  mr uk;
  ya rw;
  mr lf;
  ya li;
  mr il;
    im( ){
     set_decoder_name( "hq");
     set_decoder_out_name_prefix( "wq");
     set_decoder_out_name_suffix( "kp");
     generate_decoder( cand);
     print( isa.txt);
  }
}
;
csl_fifo ii{
   ii( ){
     set_physical_implementation( SRAM);
     add_logic( gd);
     add_logic( parallel_output, all);
     add_logic( stall_wr_side);
     add_logic( wr_release);
  }
}
;
csl_memory_map_page ml{
    ml( ){
     add_address_range( 8, 8);
     set_address_increment( 8);
     get_address_increment( );
     set_next_address( 4);
     get_next_address( );
     get_upper_bound( );
  }
}
;
csl_memory_map_page ft{
    ft( ){
     add_address_range( 6, 5);
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_read, access_read);
     add_reserved_address_range( 6, 7);
     get_upper_bound( );
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map jj{
  ml cg;
  ml ve;
  ft je;
  ml ce;
    jj( ){
     auto_gen_memory_map( );
     set_top_unit( caidqqnd);
ft.add_to_memory_map( 7,access_read); 
     set_type( page);
ft.set_access_rights_enum( mlft); 
     set_prefix( ts);
     get_prefix( );
     set_suffix( uq);
  }
}
;
csl_register gj{
    gj( ){
     set_range( [2:3]);
     set_width( 3);
     set_address( jj, 6);
     add_logic( rd_en);
     set_value( 1);
     reset_value( 0);
     clear_value( 3);
     add_logic( gray_output);
     set_end_value( 4);
     set_start_value( 4);
     add_logic( inc_signal);
  }
}
;
csl_register wv{
    wv( ){
     set_width( 5);
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

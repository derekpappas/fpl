csl_enum ur {
	lj,
	rn,
	ah,
	nj,
	jv,
	di,
	pl,
	ok,
	kv,
	pv,
	pm,
	ob,
	cc,
	pm,
	nm
};
csl_enum gy {
	wx,
	oy,
	ff,
	ko,
	dn
};
csl_isa_instruction_format vu{
    vu( ){
  }
}
;
csl_isa ir{
    ir( ){
     set_decoder_name( "jn");
     print( isa.txt);
  }
}
;
csl_memory_map_page pf{
    pf( ){
  }
}
;
csl_memory_map_page qg{
  pf qs;
    qg( ){
     add_address_range( 9, 4);
     set_address_increment( 5);
     set_access_rights( access_read, access_write);
     add_reserved_address_range( 7, 5);
     get_data_word_wodth( );
     set_aligment( 3);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page hc{
    hc( ){
     set_access_rights( access_write, access_write);
     get_lower_bound( );
     set_aligment( 8);
     get_aligment( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map xr{
  pf ro;
  qg jv;
  hc mo;
  qg ba;
  pf xg;
  qg pr;
  hc bn;
    xr( ){
     auto_gen_memory_map( );
     set_top_unit( qdtodg);
     set_type( hierach);
pf.set_access_rights_enum( hc); 
     set_data_word_width( 4);
     get_data_word_width( );
     set_prefix( mp);
     set_suffix( xq);
     get_suffix( );
  }
}
;
csl_register wj{
    wj( ){
     set_atribute( write);
     constant( 6);
     add_logic( neg_output);
     add_logic( serial_input);
     add_logic( serial_output);
     init_value( 8);
     reset_value( 2);
     clear_value( 0);
     set_lock_enable_bit( 2);
     get_lock_enable_bit( );
     add_logic( gray_output);
     stop_at_end_value( );
  }
}
;
csl_register uj{
    uj( ){
     set_width( 5);
     get_width( );
     set_depth( 0);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 5);
  }
}
;

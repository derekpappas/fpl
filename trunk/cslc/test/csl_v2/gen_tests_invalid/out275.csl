csl_enum sk {
	lw,
	et,
	lo,
	go,
	jt,
	ke,
	mt,
	mh,
	km,
	xt,
	de,
	iv,
	xe,
	sj,
	il,
	ww
};
csl_enum id {
	sv,
	sy,
	me,
	sa
};
csl_enum ii {
	tx = 84,
	re = 34,
	kq = 91,
	ap = 98,
	wl = 31,
	ow = 35,
	pj = 92,
	jb = 13
};
csl_isa_instruction_format bx{
    bx( ){
     set_width( 2);
     generate_decoder( hdrb);
  }
}
;
csl_isa io{
    io( ){
     set_decoder_out_name_prefix( "lj");
     set_decoder_out_name_suffix( "vf");
     generate_decoder( hdmp);
  }
}
;
csl_fifo nb{
   nb( ){
     add_logic( rd_words, 9);
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page si{
    si( ){
     add_address_range( 7, 4);
     set_address_increment( 9);
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_read_write, access_read);
     add_reserved_address_range( 3, 6);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_endianess( big_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page tf{
  si go;
    tf( ){
     add_address_range( 6, 8);
     set_address_increment( 7);
     get_next_address( );
     set_access_rights( access_read_write, access_read_write);
     add_reserved_address_range( 2, 6);
     add( nb, "jk");
     get_upper_bound( );
     set_data_word_width( 4);
     get_data_word_wodth( );
     set_aligment( 1);
     get_aligment( );
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map be{
    be( ){
     auto_gen_memory_map( );
     set_top_unit( hdmpic);
tf.set_access_rights_enum( tf); 
     set_data_word_width( 8);
     set_prefix( yy);
     get_prefix( );
     set_suffix( eu);
  }
}
;
csl_register xk{
    xk( ){
     init_value( 6);
     set_value( 1);
     add_logic( gray_output);
     add_logic( dec_signal);
  }
}
;
csl_register ok{
    ok( ){
     set_width( 1);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 4);
  }
}
;

csl_enum fa {
	eo,
	xu
};
csl_enum xa {
	sa = 72,
	hx = 93,
	xd = 1,
	ja = 85,
	ms = 50
};
csl_enum yp {
	ie = 58,
	uu = 79,
	qc = 41,
	aa = 78
};
csl_isa_instruction_format wh{
    wh( ){
     generate_decoder( tk);
  }
}
;
csl_isa_instruction ft : wh{
    ft( ){
    set_asm_mnemonic( );
  }
}
;
csl_fifo wy{
   wy( ){
     add_logic( programable_depth, 2);
     add_logic( rd_words, 5);
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page bo{
    bo( ){
     set_address_increment( 7);
  }
}
;
csl_memory_map_page bp{
  bo kg;
    bp( ){
     set_address_increment( 1);
     get_address_increment( );
     set_access_rights( access_read, none);
     get_lower_bound( );
     get_aligment( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page ke{
  bo vo;
  bp io;
  bp nn;
    ke( ){
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_read_write, access_write);
     add_reserved_address_range( 5, 9);
     add( wy, "yc");
     add( bobp);
     get_upper_bound( );
     set_data_word_width( 7);
     set_endianess( little_endianlittle_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map ly{
  bo qs;
  bp pn;
  bp bt;
  ke hx;
  bo xq;
  bp ow;
  ke qg;
    ly( ){
     set_top_unit( aptk);
     set_type( flat);
bobp.set_access_rights_enum( bo); 
     set_data_word_width( 8);
     set_suffix( en);
     get_suffix( );
  }
}
;
csl_register gx{
    gx( ){
     set_range( {[6:3], [4:8], [4:7], [8:1], [4:0], [0:7], [9:4]});
     constant( 0);
     add_logic( neg_output);
     add_logic( wr_en);
     init_value( 0);
     set_value( 8);
     reset_value( 6);
     set_count_amount( 6);
     add_logic( inc_signal);
  }
}
;
csl_register gp{
    gp( ){
     set_width( 2);
     set_depth( 0);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 7);
     add_logic( bypass);
  }
}
;

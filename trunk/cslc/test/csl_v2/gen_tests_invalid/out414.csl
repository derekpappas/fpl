csl_enum mi {
	cm,
	ar,
	jl,
	vj,
	bi
};
csl_enum qy {
	cj = 83,
	aa = 90,
	rr = 30,
	pe = 18,
	gj = 10,
	jv = 33,
	wa = 92,
	dv = 35,
	cs = 69,
	hh = 99,
	hh = 49,
	bs = 96,
	sw = 95
};
csl_enum ct {
	fs = 15,
	uk = 68,
	ev = 43,
	kw = 68,
	nc = 80,
	bv = 51,
	mn = 8
};
csl_isa_instruction_format cy{
    cy( ){
     set_width( 1);
  }
}
;
csl_isa nn{
    nn( ){
     set_decoder_out_name_prefix( "fj");
     set_decoder_out_name_suffix( "fi");
     generate_decoder( vnbkch);
     print( isa.txt);
  }
}
;
csl_fifo oq{
   oq( ){
     add_logic( parallel_output, all);
     add_logic( flow);
  }
}
;
csl_memory_map_page bf{
    bf( ){
     add_address_range( 8, 4);
     get_address_increment( );
     set_next_address( 6);
     get_next_address( );
     get_lower_bound( );
     set_aligment( 2);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page to{
    to( ){
     get_next_address( );
     set_data_word_width( 4);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page im{
    im( ){
     get_address_increment( );
     add_reserved_address_range( 1, 1);
     get_upper_bound( );
     set_endianess( little_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map ta{
  bf hf;
  to gl;
  bf dx;
  to ow;
    ta( ){
     auto_gen_memory_map( );
     set_top_unit( vnwwch);
to.add_to_memory_map( access_read); 
to.set_access_rights_enum( bfto); 
     set_data_word_width( 6);
     get_data_word_width( );
     set_prefix( ck);
     set_suffix( gu);
  }
}
;
csl_register nt{
    nt( ){
     add_logic( wr_en);
  }
}
;
csl_register om{
    om( ){
     set_width( 7);
     set_depth( 0);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

csl_enum yl {
	tt,
	bb,
	xo,
	oe,
	ft,
	my,
	wt,
	eh
};
csl_enum lv {
	yl,
	tn,
	vo,
	ko,
	yd,
	wx,
	oq,
	rs,
	ts,
	jl,
	wo,
	hk,
	pf,
	gw,
	or,
	so
};
csl_enum go {
	cc = 72,
	do = 44,
	qc = 80,
	sn = 58,
	dj = 36,
	hu = 90,
	ed = 43,
	nn = 9,
	on = 63,
	ew = 53,
	au = 90
};
csl_isa_instruction_format kx{
    kx( ){
     set_width( 4);
     generate_decoder( ck);
  }
}
;
csl_isa_instruction tg : kx{
    tg( ){
    set_asm_mnemonic( csl_list "dn", "xq", "uy", "sl", "sh", "qg", "gl", "ad");
  }
}
;
csl_isa_instruction au : kx{
    au( ){
    set_asm_mnemonic( csl_list "tg", "gr", "we", "tr", "pm", "bj", "uh", "ux");
  }
}
;
csl_isa ng{
    ng( ){
     set_decoder_name( "yh");
     set_decoder_out_name_prefix( "wm");
     generate_decoder( qgsg);
     print( isa.txt);
  }
}
;
csl_fifo xe{
   xe( ){
     set_dimension( 4, 5);
     add_logic( priority_bypass);
     add_logic( rd_words, 8);
     add_logic( wr_words, 9);
  }
}
;
csl_memory_map_page gd{
    gd( ){
     add_address_range( 4, 8);
     set_address_increment( 0);
     get_data_word_wodth( );
  }
}
;
csl_memory_map_page ke{
  gd lj;
  gd om;
    ke( ){
     set_next_address( 0);
     get_next_address( );
     set_data_word_width( 2);
     set_endianess( little_endian);
     get_endianess( );
  }
}
;
csl_memory_map_page ic{
  gd yd;
    ic( ){
     set_next_address( 9);
     get_lower_bound( );
     get_data_word_wodth( );
     set_aligment( 8);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map te{
    te( ){
     auto_gen_memory_map( );
  }
}
;
csl_register xf{
    xf( ){
     set_range( [2:7]);
     add_logic( neg_output);
     init_value( 8);
     set_value( 3);
     add_logic( gray_output);
     add_logic( cnt_dir_signal);
  }
}
;
csl_register qa{
    qa( ){
     set_width( 8);
     get_width( );
     set_depth( 1);
     add_logic( read_valid);
     add_logic( bypass);
  }
}
;

csl_enum uk {
	nm,
	ck
};
csl_enum bt {
	vr = 12,
	ql = 70,
	pg = 51,
	hp = 13,
	ge = 20,
	hj = 19,
	ty = 97,
	aq = 80,
	qh = 76
};
csl_enum sx {
	ui,
	ep,
	ut,
	ew,
	hh,
	sd
};
csl_isa_instruction_format tc{
    tc( ){
     set_width( 1);
     generate_decoder( te);
  }
}
;
csl_isa he{
    he( ){
     set_decoder_name( "ri");
     set_decoder_out_name_prefix( "wx");
     set_decoder_out_name_suffix( "fh");
     generate_decoder( te);
     print( isa.txt);
  }
}
;
csl_fifo fd{
   fd( ){
     add_logic( rd_credit);
  }
}
;
csl_memory_map_page cd{
    cd( ){
     set_address_increment( 9);
     set_next_address( 2);
     add( fd, "px");
     set_data_word_width( 7);
     get_aligment( );
     set_endianess( big_endianbig_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page na{
    na( ){
     set_address_increment( 2);
     get_address_increment( );
     get_next_address( );
     set_access_rights( none, access_read_write);
     add( cd);
     get_upper_bound( );
     set_data_word_width( 9);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page pv{
  cd av;
  na rt;
  cd lb;
  na ve;
    pv( ){
     set_access_rights( none, none);
     get_lower_bound( );
     get_upper_bound( );
     set_endianess( big_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map at{
    at( ){
     set_top_unit( tefh);
     set_suffix( kf);
  }
}
;
csl_register tf{
    tf( ){
     set_atribute( read_write);
     constant( 8);
     get_atributes( );
     add_logic( serial_input);
     add_logic( rd_en);
     add_logic( wr_en);
     set_value( 7);
     reset_value( 4);
     clear_value( 6);
     set_count_amount( 5);
     add_logic( inc_signal);
     add_logic( dec_signal);
  }
}
;
csl_register pg{
    pg( ){
     set_width( 9);
     set_depth( 2);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

csl_enum oy {
	wq,
	uh,
	wv
};
csl_enum rx {
	fi
};
csl_enum fx {
	ew,
	la,
	fp,
	wm,
	ky,
	yj,
	xk,
	il,
	ry,
	ko,
	ph
};
csl_isa_instruction_format mp{
    mp( ){
     set_width( 5);
     generate_decoder( pvtldk);
  }
}
;
csl_isa_instruction mn : mp{
    mn( ){
    set_asm_mnemonic( );
  }
}
;
csl_isa pt{
  mn iv;
  mn ta;
  mn ed;
  mn sc;
  mn mi;
  mn dt;
  mn kl;
  mn ub;
  mn wn;
  mn dh;
    pt( ){
     set_decoder_name( "oh");
     set_decoder_out_name_prefix( "lm");
     set_decoder_out_name_suffix( "qb");
     generate_decoder( dy);
     print( isa.txt);
  }
}
;
csl_fifo no{
   no( ){
     set_physical_implementation( SRAM);
     add_logic( rd_words, 8);
     add_logic( wr_words, 4);
     add_logic( almost_empty, 0);
  }
}
;
csl_memory_map_page dh{
    dh( ){
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_read, access_read);
     set_endianess( big_endianbig_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page kt{
    kt( ){
     set_access_rights( access_read, access_read_write);
     get_upper_bound( );
     get_aligment( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page qg{
  dh cp;
    qg( ){
     set_address_increment( 3);
     get_next_address( );
     set_access_rights( access_read, access_read);
     add_reserved_address_range( 1, 9);
     add( dh);
     get_lower_bound( );
     set_data_word_width( 7);
     get_data_word_wodth( );
     set_aligment( 5);
     get_aligment( );
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map mu{
  dh hh;
  kt we;
  dh gv;
  kt gx;
  qg gj;
    mu( ){
     set_type( flat);
dh.set_access_rights_enum( qg); 
     set_data_word_width( 0);
     get_data_word_width( );
     set_suffix( yq);
  }
}
;
csl_register sv{
    sv( ){
     set_type( STATIC);
     set_width( 0);
     index_data_pair( mu, 5);
     constant( 9);
     get_atributes( );
     set_lock_enable_bit( 5);
     set_count_direction( 2);
     add_logic( dec_signal);
  }
}
;
csl_register ha{
    ha( ){
     set_width( 5);
     get_width( );
     set_const_value( 7);
     add_logic( bypass);
  }
}
;

csl_enum js {
	ds = 50,
	qe = 72,
	uk = 77,
	gw = 56,
	pu = 79,
	fo = 77,
	fq = 93,
	vf = 64,
	lv = 10,
	pi = 26,
	tr = 33,
	by = 4
};
csl_enum cw {
	fw = 15,
	co = 56,
	pf = 33,
	jj = 55,
	me = 61
};
csl_enum ts {
	dj = 8,
	ni = 33,
	at = 63,
	bv = 95,
	bp = 50,
	tt = 49
};
csl_isa_instruction_format on{
    on( ){
     set_width( 4);
     generate_decoder( pt);
  }
}
;
csl_isa_instruction md : on{
    md( ){
    set_asm_mnemonic( csl_list "jl", "gs", "nq", "xp", "pj", "yc", "fu", "yy");
  }
}
;
csl_isa ug{
    ug( ){
     set_decoder_out_name_prefix( "qv");
     set_decoder_out_name_suffix( "sw");
     generate_decoder( pt);
     print( isa.txt);
  }
}
;
csl_fifo we{
   we( ){
     set_physical_implementation( FFA);
     add_logic( pushback);
     add_logic( string_through, 6);
     add_logic( output_rd_addr);
     add_logic( flow);
  }
}
;
csl_memory_map_page eg{
    eg( ){
     set_address_increment( 8);
     get_address_increment( );
     add( we, "ki", 6);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 8);
  }
}
;
csl_memory_map_page gg{
  eg wk;
  eg br;
    gg( ){
     add_address_range( 7, 0);
     set_next_address( 5);
     get_next_address( );
     set_access_rights( access_write, none);
     get_upper_bound( );
     set_aligment( 3);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page bm{
  eg tc;
  gg hd;
  eg gt;
  gg xn;
  eg ri;
  gg lo;
    bm( ){
     set_address_increment( 2);
     set_next_address( 4);
     get_next_address( );
     set_access_rights( access_read, access_write);
     get_upper_bound( );
     set_data_word_width( 8);
     set_aligment( 4);
     get_aligment( );
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_register gu{
    gu( ){
     set_range( {[9:6], [8:9], [1:4], [7:3]});
     set_width( 9);
     constant( 4);
     get_atributes( );
     add_logic( neg_output);
     add_logic( serial_output);
     clear_value( 2);
     set_lock_enable_bit( 4);
     set_count_direction( 5);
     set_end_value( 9);
     stop_at_end_value( );
     get_cnt_dir_signal( );
     add_logic( inc_signal);
     add_logic( dec_signal);
  }
}
;
csl_register yj{
    yj( ){
     set_width( 0);
     get_width( );
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 6);
     add_logic( bypass);
  }
}
;

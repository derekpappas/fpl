csl_enum pw {
	gp,
	ys,
	km,
	nu,
	af,
	ly,
	jc,
	je,
	sa
};
csl_enum qq {
	vp = 55,
	ke = 77,
	mu = 25
};
csl_enum rr {
	cj,
	pi,
	bq,
	do
};
csl_isa_instruction_format xc{
    xc( ){
  }
}
;
csl_isa_instruction wa : xc{
    wa( ){
    set_asm_mnemonic( yl);
  }
}
;
csl_isa_instruction tl : xc{
    tl( ){
    set_asm_mnemonic( );
  }
}
;
csl_isa_instruction lo : xc{
    lo( ){
  }
}
;
csl_isa_instruction nl : xc{
    nl( ){
    set_asm_mnemonic( csl_list "fa", "ax", "fc", "dy");
  }
}
;
csl_isa dh{
    dh( ){
     set_decoder_name( "bp");
     set_decoder_out_name_prefix( "ex");
     set_decoder_out_name_suffix( "nh");
     print( isa.txt);
  }
}
;
csl_fifo ib{
   ib( ){
     add_logic( depth_extend, 6);
     add_logic( kx);
     add_logic( credit);
  }
}
;
csl_memory_map_page pg{
    pg( ){
  }
}
;
csl_memory_map_page lb{
    lb( ){
     add_address_range( 3, 3);
     get_lower_bound( );
     set_aligment( 8);
  }
}
;
csl_memory_map_page kl{
  pg ms;
  lb by;
  pg sx;
  lb ne;
  lb fx;
    kl( ){
     add_address_range( 1, 0);
     set_data_word_width( 8);
     get_data_word_wodth( );
     set_aligment( 4);
     get_aligment( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map qs{
    qs( ){
     set_top_unit( jskmjrqo);
lbkl.set_access_rights_enum( lb); 
  }
}
;
csl_register rp{
    rp( ){
     set_range( {[2:8], [5:4], [9:8], [6:0], [1:8]});
     set_type( INT);
     set_address( qs, 6);
     set_atribute( write);
     add_logic( serial_output);
     set_count_amount( 2);
     set_count_direction( 9);
     set_end_value( 6);
     stop_at_end_value( );
     get_cnt_dir_signal( );
     add_logic( inc_signal);
  }
}
;
csl_register bl{
    bl( ){
     set_width( 5);
     get_width( );
     set_depth( 1);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

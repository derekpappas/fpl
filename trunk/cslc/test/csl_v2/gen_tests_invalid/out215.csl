csl_enum uu {
	qa,
	sl,
	ug,
	fm,
	wc,
	lt,
	ao,
	vm,
	vi,
	pu
};
csl_enum sn {
	my,
	on,
	vj,
	rt,
	hi,
	va
};
csl_enum vq {
	ib,
	eg,
	gr,
	ai,
	hx
};
csl_isa_instruction_format sa{
    sa( ){
     set_width( 0);
     generate_decoder( lugj);
  }
}
;
csl_isa mc{
    mc( ){
     set_decoder_name( "vl");
     set_decoder_out_name_prefix( "rh");
     set_decoder_out_name_suffix( "jy");
     generate_decoder( ag);
     print( isa.txt);
  }
}
;
csl_fifo vd{
   vd( ){
     add_logic( output_rd_addr);
     add_logic( wr_credit);
  }
}
;
csl_memory_map_page fx{
    fx( ){
     add_address_range( 5, 9);
     get_address_increment( );
     set_next_address( 1);
     set_data_word_width( 5);
     get_aligment( );
     get_endianess( );
  }
}
;
csl_memory_map_page nv{
  fx qv;
    nv( ){
     add_address_range( 3, 3);
     set_address_increment( 0);
     get_address_increment( );
     set_next_address( 0);
     get_next_address( );
     add_reserved_address_range( 1, 6);
     add( fx);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 3);
     get_data_word_wodth( );
     set_aligment( 3);
     set_endianess( big_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page nd{
    nd( ){
     get_address_increment( );
     set_access_rights( access_read, access_read_write);
     set_endianess( little_endian);
     get_symbol_lenght( );
  }
}
;
csl_memory_map gf{
  nv dm;
  nd ks;
  fx wp;
  nd ek;
  nv yx;
    gf( ){
fxnv.set_access_rights_enum( fxnv); 
     set_data_word_width( 6);
     get_data_word_width( );
     set_prefix( yv);
  }
}
;
csl_register oc{
    oc( ){
     set_address( gf, );
     init_value( 4);
     set_value( 5);
     set_lock_enable_bit( 3);
  }
}
;
csl_register kv{
    kv( ){
     create_rtl_module( );
  }
}
;

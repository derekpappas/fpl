csl_enum di {
	fh = 88,
	mr = 83,
	os = 80
};
csl_enum nd {
	qk,
	wb,
	kd,
	gt,
	tw,
	ad
};
csl_enum rq {
	jl = 62,
	tr = 41,
	mj = 20,
	vr = 98,
	ud = 22,
	yh = 85,
	up = 21
};
csl_isa_instruction_format le{
    le( ){
     set_width( 1);
     generate_decoder( ujqhpw);
  }
}
;
csl_isa cj{
    cj( ){
     set_decoder_name( "jh");
     set_decoder_out_name_prefix( "ff");
     set_decoder_out_name_suffix( "kl");
     generate_decoder( uj);
     print( isa.txt);
  }
}
;
csl_fifo ss{
   ss( ){
     add_logic( wr_words, 8);
     add_logic( string_through, 1);
     add_logic( almost_empty, 1);
  }
}
;
csl_memory_map_page aa{
    aa( ){
     set_address_increment( 6);
     set_access_rights( access_read, access_read);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_endianess( little_endianlittle_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page cn{
  aa xo;
    cn( ){
     add_address_range( 2, 3);
     set_address_increment( 6);
     get_address_increment( );
     add( aa);
     get_lower_bound( );
     get_upper_bound( );
     set_aligment( 4);
     set_endianess( big_endianbig_endian);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page ps{
  aa my;
  aa rf;
  cn gf;
  aa ge;
    ps( ){
     add_reserved_address_range( 3, 6);
     set_data_word_width( 0);
  }
}
;
csl_memory_map yy{
    yy( ){
.     set_data_word_width( 2);
     set_prefix( nb);
     set_suffix( gy);
     get_suffix( );
  }
}
;
csl_register hk{
    hk( ){
     set_type( INT);
     set_width( 4);
     set_address( yy, 7);
     add_logic( serial_output);
     set_value( 7);
     reset_value( 3);
     clear_value( 7);
     set_start_value( 4);
  }
}
;
csl_register fj{
    fj( ){
     set_depth( 0);
     add_logic( read_valid);
     add_logic( bypass);
  }
}
;

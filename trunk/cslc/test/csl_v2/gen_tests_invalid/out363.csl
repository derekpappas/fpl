csl_enum ip {
	jn,
	ol,
	tq,
	fj,
	xh,
	qq,
	sh,
	is,
	rc
};
csl_enum vr {
	uo,
	et,
	qx,
	hh,
	aq,
	xk,
	go,
	vb,
	hb
};
csl_enum mh {
	ld,
	be,
	lj,
	wd,
	lu,
	ui,
	jc,
	ca,
	ak
};
csl_isa_instruction_format ix{
    ix( ){
     set_width( 0);
     generate_decoder( drdb);
  }
}
;
csl_isa gy{
    gy( ){
     set_decoder_out_name_prefix( "sl");
     generate_decoder( dbjc);
  }
}
;
csl_fifo xp{
   xp( ){
     add_logic( async_fifo);
     add_logic( pushback);
     add_logic( string_through, 9);
     add_logic( rd_credit);
  }
}
;
csl_memory_map_page ci{
    ci( ){
     set_address_increment( 7);
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_write, none);
     add_reserved_address_range( 2, 5);
     add( xp, "cl", 6);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 3);
     get_aligment( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page dl{
    dl( ){
     set_address_increment( 2);
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_read_write, access_read);
     add( xp, "vq", 1);
     get_lower_bound( );
     get_upper_bound( );
     set_endianess( little_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page et{
    et( ){
     set_next_address( 8);
     get_next_address( );
     get_aligment( );
  }
}
;
csl_memory_map yy{
    yy( ){
     set_data_word_width( 1);
     set_suffix( qd);
  }
}
;
csl_register xl{
    xl( ){
     set_width( 3);
     set_atribute( read);
     constant( 1);
     add_logic( serial_output);
     set_end_value( 7);
     add_logic( cnt_dir_signal);
  }
}
;
csl_register iq{
    iq( ){
     set_const_value( 8);
     add_logic( bypass);
  }
}
;

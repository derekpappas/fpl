csl_enum uc {
	wc,
	ob,
	hl,
	vq,
	uo,
	qw
};
csl_enum db {
	hf,
	vw
};
csl_enum gc {
	jy = 27,
	ho = 48,
	wb = 31,
	ly = 7,
	hg = 8
};
csl_isa_instruction_format qg{
    qg( ){
     set_width( 3);
     generate_decoder( kdfi);
  }
}
;
csl_isa io{
    io( ){
     set_decoder_name( "al");
     set_decoder_out_name_prefix( "jl");
     set_decoder_out_name_suffix( "nu");
     generate_decoder( kdfi);
     print( isa.txt);
  }
}
;
csl_fifo sj{
   sj( ){
     set_physical_implementation( SRAM);
     add_logic( bj);
     add_logic( rd_words, 7);
     add_logic( almost_full, 6);
     add_logic( rd_credit);
     add_logic( wr_credit);
  }
}
;
csl_memory_map_page av{
    av( ){
     set_next_address( 0);
     get_next_address( );
     set_access_rights( access_write, access_write);
     get_upper_bound( );
     set_data_word_width( 1);
     get_aligment( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page nc{
    nc( ){
     add_address_range( 3, 7);
     set_address_increment( 8);
     set_next_address( 9);
     set_access_rights( none, access_read);
     get_upper_bound( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page ce{
    ce( ){
     set_next_address( 0);
     get_lower_bound( );
     set_aligment( 7);
     get_aligment( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map wp{
  av dh;
  nc kg;
  av bf;
  nc fi;
  av vq;
    wp( ){
     auto_gen_memory_map( );
     set_top_unit( finf);
     set_prefix( xe);
     get_prefix( );
     set_suffix( kl);
  }
}
;
csl_register vm{
    vm( ){
     set_width( 3);
     add_logic( serial_output);
     add_logic( wr_en);
     reset_value( 5);
     set_count_amount( 4);
     add_logic( inc_signal);
  }
}
;
csl_register ew{
    ew( ){
     set_width( 9);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 5);
     add_logic( bypass);
  }
}
;

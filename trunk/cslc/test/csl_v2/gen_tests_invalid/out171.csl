csl_enum bj {
	no = 23,
	oh = 54,
	vp = 69,
	ue = 59,
	mp = 22,
	tw = 58,
	cq = 66,
	pe = 59,
	oc = 99,
	ur = 76,
	qn = 1,
	ss = 43,
	cy = 62,
	ty = 21,
	iw = 14,
	ix = 46
};
csl_enum ny {
	fl,
	rb,
	pe,
	sl
};
csl_enum eu {
	dt = 63,
	br = 47,
	xv = 36,
	ko = 31,
	mf = 37,
	hq = 18,
	fe = 84,
	pp = 97,
	da = 81,
	nt = 5,
	bv = 15,
	fs = 12,
	wx = 32,
	ar = 24,
	je = 52,
	om = 62
};
csl_isa_instruction_format os{
    os( ){
     set_width( 0);
     generate_decoder( cadu);
  }
}
;
csl_isa_instruction gg : os{
    gg( ){
    set_asm_mnemonic( csl_list "gi", "jy", "fm", "co", "qv", "gw", "mi", "au");
  }
}
;
csl_isa sl{
    sl( ){
     set_decoder_out_name_prefix( "vv");
     set_decoder_out_name_suffix( "ur");
  }
}
;
csl_fifo gy{
   gy( ){
     set_dimension( 9, 1);
     add_logic( parallel_input, all);
  }
}
;
csl_memory_map_page vl{
    vl( ){
     add_address_range( 8, 8);
     set_address_increment( 7);
     set_next_address( 6);
     set_access_rights( none, access_read_write);
     get_lower_bound( );
     set_data_word_width( 0);
     get_data_word_wodth( );
     get_aligment( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page yi{
    yi( ){
     set_address_increment( 9);
     get_address_increment( );
     get_next_address( );
     set_access_rights( access_write, none);
     get_lower_bound( );
     set_data_word_width( 0);
     get_data_word_wodth( );
     set_aligment( 2);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page ft{
    ft( ){
     add_address_range( 5, 7);
     set_address_increment( 0);
     set_access_rights( access_read_write, access_write);
     get_upper_bound( );
     get_endianess( );
  }
}
;
csl_memory_map yw{
  vl ey;
  ft pn;
  vl sv;
    yw( ){
     set_type( flat);
vlft.set_access_rights_enum( yi); 
     set_prefix( ru);
     get_prefix( );
  }
}
;
csl_register ip{
    ip( ){
     set_type( CTL);
     set_address( yw, 5);
     set_atribute( write);
     constant( 9);
     add_logic( wr_en);
     init_value( 9);
     clear_value( 5);
     set_lock_enable_bit( 4);
     get_lock_enable_bit( );
     add_logic( gray_output);
     set_count_direction( 7);
     stop_at_end_value( );
     add_logic( dec_signal);
  }
}
;
csl_register ga{
    ga( ){
     set_width( 0);
     get_width( );
     set_depth( 8);
     create_rtl_module( );
     set_const_value( 6);
     add_logic( bypass);
  }
}
;

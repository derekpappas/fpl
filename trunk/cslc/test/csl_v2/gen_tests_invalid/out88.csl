csl_enum wf {
	dh,
	ym,
	xk,
	ty,
	gc,
	ar,
	lt,
	db,
	iu,
	am,
	uc,
	el,
	ke,
	my,
	hj,
	fk,
	rg,
	wr,
	sr,
	sa,
	ts
};
csl_enum th {
	pa,
	ka
};
csl_enum um {
	op,
	rt,
	bc,
	xq,
	ef,
	al,
	pr,
	rn,
	lm,
	he,
	md
};
csl_isa_instruction_format mv{
    mv( ){
     set_width( 7);
     generate_decoder( smml);
  }
}
;
csl_isa xf{
    xf( ){
     set_decoder_out_name_prefix( "wd");
     set_decoder_out_name_suffix( "it");
     generate_decoder( sm);
  }
}
;
csl_fifo ep{
   ep( ){
     add_logic( wr_words, 4);
     add_logic( stall);
     add_logic( stall_wr_side);
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page ao{
    ao( ){
     get_lower_bound( );
     set_data_word_width( 8);
     get_endianess( );
  }
}
;
csl_memory_map_page kx{
  ao uw;
  ao pd;
    kx( ){
     set_address_increment( 0);
     set_next_address( 1);
     set_access_rights( access_read, access_read);
     add( ep, "ky", 9);
     get_lower_bound( );
     set_endianess( little_endian);
     get_endianess( );
  }
}
;
csl_memory_map_page wn{
  kx id;
    wn( ){
     add_address_range( 6, 4);
     get_address_increment( );
     set_next_address( 3);
     get_upper_bound( );
     set_data_word_width( 2);
     get_data_word_wodth( );
     set_aligment( 5);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map ib{
    ib( ){
     auto_gen_memory_map( );
     set_top_unit( tp);
     set_type( hierach);
kx.set_access_rights_enum( kx); 
     set_data_word_width( 3);
     get_data_word_width( );
     set_prefix( fd);
     set_suffix( iy);
  }
}
;
csl_register ga{
    ga( ){
     add_logic( neg_output);
     add_logic( serial_output);
     add_logic( rd_en);
     init_value( 0);
     set_value( 1);
     reset_value( 3);
     add_logic( gray_output);
     set_count_amount( 6);
     stop_at_end_value( );
     add_logic( cnt_dir_signal);
     add_logic( inc_signal);
  }
}
;
csl_register si{
    si( ){
     set_width( 4);
     get_width( );
     set_depth( 1);
     add_logic( read_valid);
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

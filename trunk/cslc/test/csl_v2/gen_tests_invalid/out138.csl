csl_enum ek {
	sd,
	pq,
	tr,
	oe,
	eu,
	dc,
	rn
};
csl_enum ua {
	tw,
	oj,
	la,
	ih,
	rt,
	ue,
	cb,
	ow
};
csl_enum ge {
	na,
	xe,
	gc,
	yj,
	ht,
	yc,
	ts,
	bj
};
csl_isa_instruction_format on{
    on( ){
     set_width( 1);
  }
}
;
csl_isa_instruction ur : on{
    ur( ){
    set_asm_mnemonic( vw);
  }
}
;
csl_isa_instruction ds : on{
    ds( ){
  }
}
;
csl_isa kp{
    kp( ){
     set_decoder_name( "mf");
     set_decoder_out_name_prefix( "cr");
     set_decoder_out_name_suffix( "lh");
     print( isa.txt);
  }
}
;
csl_fifo eq{
   eq( ){
     add_logic( wr_release);
  }
}
;
csl_memory_map_page hj{
    hj( ){
     set_address_increment( 7);
     get_address_increment( );
     set_next_address( 6);
     set_data_word_width( 2);
     set_aligment( 9);
     get_aligment( );
  }
}
;
csl_memory_map_page ch{
    ch( ){
     get_next_address( );
     get_lower_bound( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map rx{
  ch cd;
  hj os;
  ch qs;
  hj rc;
    rx( ){
     set_prefix( le);
  }
}
;
csl_register gr{
    gr( ){
     set_range( {[0:3], [2:1]});
     set_address( rx, 9);
     index_data_pair( rx);
     set_atribute( read_write);
     add_logic( wr_en);
     set_lock_enable_bit( 6);
     add_logic( gray_output);
     set_count_amount( 4);
     set_count_direction( 3);
     set_start_value( 7);
  }
}
;
csl_register jt{
    jt( ){
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 6);
     add_logic( bypass);
  }
}
;

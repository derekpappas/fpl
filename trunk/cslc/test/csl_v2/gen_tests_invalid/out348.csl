csl_enum vl {
	hi = 96,
	hx = 93
};
csl_enum ta {
	ty,
	ff,
	km,
	qm,
	hc,
	fv,
	pt
};
csl_enum eh {
	ol,
	iv
};
csl_isa_instruction_format xc{
    xc( ){
  }
}
;
csl_isa_instruction oj : xc{
    oj( ){
    set_asm_mnemonic( );
  }
}
;
csl_isa ua{
  oj sr;
  oj lm;
  oj cr;
  oj vk;
  oj pb;
  oj db;
  oj xt;
  oj sx;
  oj yd;
  oj ki;
  oj nw;
  oj wu;
  oj ph;
    ua( ){
     set_decoder_name( "qr");
     set_decoder_out_name_prefix( "dh");
     set_decoder_out_name_suffix( "pm");
     generate_decoder( vmjc);
     print( isa.txt);
  }
}
;
csl_fifo yo{
   yo( ){
     add_logic( almost_empty, 5);
  }
}
;
csl_memory_map_page sg{
    sg( ){
     set_address_increment( 5);
     get_address_increment( );
     get_endianess( );
  }
}
;
csl_memory_map_page ta{
  sg hj;
    ta( ){
     add_address_range( 0, 7);
  }
}
;
csl_memory_map_page bh{
    bh( ){
     add_address_range( 0, 4);
     get_next_address( );
     set_access_rights( access_read_write, access_read_write);
     add( sgta);
     get_lower_bound( );
     set_data_word_width( 8);
     get_data_word_wodth( );
     set_endianess( little_endian);
     get_endianess( );
  }
}
;
csl_memory_map xw{
  sg md;
  ta yq;
  sg mr;
  ta vt;
  bh fx;
  ta rt;
  bh uo;
    xw( ){
     set_top_unit( vmjcdc);
     set_type( flat);
     set_data_word_width( 2);
     set_prefix( ln);
     get_prefix( );
  }
}
;
csl_register hm{
    hm( ){
     add_logic( serial_output);
     add_logic( wr_en);
     init_value( 3);
     add_logic( gray_output);
     stop_at_end_value( );
     add_logic( cnt_dir_signal);
  }
}
;
csl_register yu{
    yu( ){
  }
}
;

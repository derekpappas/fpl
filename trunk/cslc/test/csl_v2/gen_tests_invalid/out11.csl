csl_enum fa {
	yh,
	ev,
	nc,
	oe,
	yv,
	ee,
	im,
	ua,
	rd,
	km,
	qy,
	sq,
	ni,
	mo,
	qr,
	rp
};
csl_enum yx {
	nm,
	ac,
	tb,
	xx,
	fg
};
csl_enum nc {
	jf = 85,
	gt = 17,
	ty = 88,
	un = 23,
	pk = 24,
	xc = 0,
	ao = 65,
	vr = 0,
	gx = 42
};
csl_isa_instruction_format fl{
    fl( ){
     set_width( 0);
     generate_decoder( hmhp);
  }
}
;
csl_isa qn{
    qn( ){
     set_decoder_name( "tw");
     set_decoder_out_name_prefix( "tl");
     set_decoder_out_name_suffix( "js");
     generate_decoder( cypihm);
  }
}
;
csl_fifo qt{
   qt( ){
     add_logic( wr_words, 4);
  }
}
;
csl_memory_map_page ts{
    ts( ){
     set_address_increment( 8);
     set_next_address( 6);
     get_next_address( );
     set_access_rights( access_read, none);
     add_reserved_address_range( 4, 8);
     add( qt, "lw", 6);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 3);
     get_data_word_wodth( );
     set_aligment( 8);
     get_aligment( );
     set_endianess( little_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page mx{
  ts lp;
  ts et;
    mx( ){
     set_address_increment( 5);
     get_address_increment( );
     set_next_address( 1);
     get_lower_bound( );
     get_data_word_wodth( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page fb{
  ts qq;
  mx kr;
  ts ma;
  ts ha;
  mx ps;
    fb( ){
     add_address_range( 6, 2);
     set_next_address( 4);
     add_reserved_address_range( 2, 6);
     add( qt, "bu");
     get_lower_bound( );
     set_data_word_width( 2);
     set_aligment( 7);
     get_aligment( );
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map ot{
    ot( ){
     auto_gen_memory_map( );
     set_top_unit( hmhp);
tsmxfb.set_access_rights_enum( mx); 
     set_data_word_width( 9);
     get_data_word_width( );
     set_prefix( mg);
     set_suffix( qo);
  }
}
;
csl_register jr{
    jr( ){
     set_atribute( write);
     add_logic( neg_output);
     add_logic( serial_input);
     add_logic( wr_en);
     clear_value( 8);
     add_logic( gray_output);
     set_count_amount( 4);
     stop_at_end_value( );
     add_logic( cnt_dir_signal);
  }
}
;
csl_register dv{
    dv( ){
     set_depth( 5);
     get_depth( );
     create_rtl_module( );
     add_logic( bypass);
  }
}
;

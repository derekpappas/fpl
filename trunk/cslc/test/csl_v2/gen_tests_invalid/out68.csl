csl_enum nf {
	xs = 31,
	xf = 84,
	ve = 50,
	gf = 52,
	nl = 82,
	af = 67,
	rp = 12,
	ji = 13,
	ag = 15,
	sx = 52
};
csl_enum jj {
	bh = 69,
	cw = 74,
	pn = 0,
	hd = 7,
	uh = 95,
	vu = 29,
	nt = 37,
	bv = 1,
	yp = 63,
	jc = 50,
	ud = 77,
	rg = 47,
	ot = 88,
	ph = 60,
	ry = 14,
	ts = 73,
	gx = 64
};
csl_isa_instruction_format wj{
    wj( ){
     set_width( 1);
     generate_decoder( psdpjs);
  }
}
;
csl_isa_instruction jq : wj{
    jq( ){
    set_asm_mnemonic( sw);
  }
}
;
csl_isa qj{
    qj( ){
     set_decoder_name( "tp");
     set_decoder_out_name_prefix( "cc");
     set_decoder_out_name_suffix( "dq");
     print( isa.txt);
  }
}
;
csl_fifo fq{
   fq( ){
  }
}
;
csl_memory_map_page up{
    up( ){
     set_address_increment( 6);
     set_access_rights( none, access_write);
     add_reserved_address_range( 1, 3);
     get_lower_bound( );
     get_upper_bound( );
     get_aligment( );
     set_endianess( big_endian);
  }
}
;
csl_memory_map_page om{
  up hi;
    om( ){
     add_address_range( 6, 0);
     get_address_increment( );
     set_next_address( 8);
     set_access_rights( access_write, none);
     add_reserved_address_range( 2, 8);
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 0);
     get_data_word_wodth( );
     set_aligment( 4);
     get_aligment( );
     set_endianess( little_endian);
  }
}
;
csl_memory_map_page xs{
  up qx;
  om kf;
  up gj;
  up og;
  om fr;
    xs( ){
     add_address_range( 6, 4);
     set_address_increment( 5);
     get_address_increment( );
     get_next_address( );
     get_lower_bound( );
     set_data_word_width( 0);
     get_data_word_wodth( );
     set_aligment( 1);
     get_aligment( );
     set_endianess( big_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map kd{
  up kv;
  xs er;
  xs ly;
  up pv;
    kd( ){
     auto_gen_memory_map( );
     set_top_unit( psdpjs);
     set_type( hierach);
     set_prefix( lv);
  }
}
;
csl_register rs{
    rs( ){
     set_type( DFF);
     set_width( 5);
     set_atribute( read);
     constant( 8);
     add_logic( neg_output);
     add_logic( serial_input);
     set_value( 5);
     add_logic( gray_output);
     set_start_value( 59);
     stop_at_end_value( );
     add_logic( cnt_dir_signal);
  }
}
;
csl_register dk{
    dk( ){
     set_width( 8);
     get_width( );
     set_depth( 2);
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 5);
     add_logic( bypass);
  }
}
;

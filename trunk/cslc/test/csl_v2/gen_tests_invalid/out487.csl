csl_enum cc {
	nc,
	uk,
	te,
	vx,
	yl,
	gn,
	hd,
	jr,
	bm,
	xs,
	vd,
	hp,
	ls,
	us,
	vy,
	wm
};
csl_enum bt {
	yw,
	bu,
	wa,
	id,
	pp,
	ja,
	jm,
	oh,
	gk,
	kp,
	ax,
	kw,
	tg,
	vq
};
csl_enum uy {
	nt = 74,
	vo = 65,
	qu = 32,
	qy = 4,
	bh = 86
};
csl_isa_instruction_format cf{
    cf( ){
     set_width( 6);
     generate_decoder( ou);
  }
}
;
csl_isa qt{
    qt( ){
     set_decoder_name( "ih");
     set_decoder_out_name_prefix( "pm");
     set_decoder_out_name_suffix( "lm");
     generate_decoder( ourfgr);
     print( isa.txt);
  }
}
;
csl_fifo ba{
   ba( ){
     add_logic( output_rd_addr);
  }
}
;
csl_memory_map_page gj{
    gj( ){
     set_address_increment( 6);
     get_next_address( );
     set_data_word_width( 3);
     get_aligment( );
     set_endianess( little_endian);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page io{
    io( ){
     get_next_address( );
     add_reserved_address_range( 1, 8);
     get_lower_bound( );
     get_data_word_wodth( );
     set_aligment( 9);
     set_endianess( little_endianlittle_endian);
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page lg{
    lg( ){
     get_address_increment( );
     set_next_address( 0);
     get_next_address( );
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 7);
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map vo{
    vo( ){
     set_top_unit( ougr);
lg.add_to_memory_map( 0); 
     set_type( flat);
lg.set_access_rights_enum( gjlg); 
     set_data_word_width( 9);
     get_data_word_width( );
     set_prefix( hu);
     get_prefix( );
  }
}
;
csl_register qo{
    qo( ){
     constant( 4);
     add_logic( neg_output);
     add_logic( serial_output);
     reset_value( 0);
     clear_value( 9);
     set_start_value( 1);
     add_logic( cnt_dir_signal);
     add_logic( dec_signal);
  }
}
;
csl_register vu{
    vu( ){
     set_width( 3);
     get_width( );
     add_logic( bypass);
  }
}
;

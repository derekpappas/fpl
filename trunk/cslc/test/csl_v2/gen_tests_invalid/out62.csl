csl_enum mn {
	fp,
	yl,
	xt,
	yn,
	qs,
	xd,
	gx,
	sy,
	lq,
	qr,
	nm,
	uv,
	tp,
	bn,
	up,
	dc,
	fc
};
csl_enum nd {
	vm = 6,
	so = 78,
	ir = 35,
	uo = 98,
	pn = 89,
	pd = 81,
	gh = 28
};
csl_enum uu {
	vs = 55,
	sq = 10,
	it = 57,
	gf = 22,
	jk = 41
};
csl_isa_instruction_format du{
    du( ){
     set_width( 5);
  }
}
;
csl_isa_instruction fp : du{
    fp( ){
    set_asm_mnemonic( csl_list "xg", "fx", "lj", "su", "to", "hw");
  }
}
;
csl_isa vp{
  fp rx;
  fp me;
  fp xv;
  fp vy;
  fp we;
  fp bp;
  fp tm;
  fp gn;
    vp( ){
     set_decoder_name( "fx");
     set_decoder_out_name_prefix( "th");
     set_decoder_out_name_suffix( "vs");
     generate_decoder( mwrw);
     print( isa.txt);
  }
}
;
csl_fifo cc{
   cc( ){
     add_logic( depth_extend, 8);
     add_logic( credit);
     add_logic( flow);
  }
}
;
csl_memory_map_page qb{
    qb( ){
     add_address_range( 3, 1);
     get_address_increment( );
     set_next_address( 2);
     get_next_address( );
     get_upper_bound( );
     set_endianess( little_endianbig_endian);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page jd{
  qb me;
    jd( ){
     add_address_range( 3, 4);
     set_address_increment( 9);
     get_address_increment( );
     set_next_address( 6);
     get_next_address( );
     get_lower_bound( );
     get_upper_bound( );
     set_data_word_width( 5);
     set_aligment( 1);
     get_aligment( );
     set_endianess( little_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page cs{
  qb ug;
  qb hw;
  jd kp;
  jd xs;
    cs( ){
     add_address_range( 7, 8);
     get_address_increment( );
     add_reserved_address_range( 6, 1);
     add( jd);
     get_lower_bound( );
     set_data_word_width( 7);
     set_aligment( 8);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map uf{
  qb fi;
  cs wm;
    uf( ){
     auto_gen_memory_map( );
     set_top_unit( tgmwjh);
cs.add_to_memory_map( 7); 
     set_type( hierach);
cs.set_access_rights_enum( qbcs); 
     set_suffix( xo);
     get_suffix( );
  }
}
;
csl_register pu{
    pu( ){
     set_width( 4);
     set_atribute( write);
     add_logic( neg_output);
     add_logic( serial_input);
     init_value( 5);
     reset_value( 7);
     add_logic( gray_output);
     add_logic( cnt_dir_signal);
     add_logic( dec_signal);
  }
}
;
csl_register qv{
    qv( ){
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 9);
     add_logic( bypass);
  }
}
;

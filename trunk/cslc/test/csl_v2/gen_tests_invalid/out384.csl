csl_enum jl {
	ya,
	vd,
	kd,
	uo,
	sb,
	lj,
	jo
};
csl_enum wi {
	on = 81
};
csl_enum ll {
	xu,
	ax,
	cg
};
csl_isa_instruction_format mf{
    mf( ){
     generate_decoder( xe);
  }
}
;
csl_isa ml{
    ml( ){
  }
}
;
csl_fifo vw{
   vw( ){
     add_logic( programable_depth, 4);
     add_logic( parallel_input, all);
     add_logic( pushback);
     add_logic( string_through, 4);
     add_logic( almost_empty, 5);
     add_logic( output_wr_addr);
  }
}
;
csl_memory_map_page fx{
    fx( ){
     add_address_range( 6, 4);
     set_address_increment( 3);
     get_next_address( );
     set_access_rights( access_read, access_read_write);
     add_reserved_address_range( 9, 3);
     add( vw, "as");
     get_lower_bound( );
     get_data_word_wodth( );
     set_aligment( 3);
     get_aligment( );
     get_endianess( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page pm{
    pm( ){
     add_address_range( 9, 7);
     set_next_address( 9);
     add_reserved_address_range( 2, 8);
     get_upper_bound( );
     set_data_word_width( 4);
     set_endianess( big_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
     get_symbol_lenght( );
  }
}
;
csl_memory_map_page dr{
    dr( ){
     add_address_range( 7, 5);
     add( fx);
     get_lower_bound( );
     set_data_word_width( 9);
     get_data_word_wodth( );
     set_endianess( little_endianlittle_endian);
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map wk{
    wk( ){
     set_prefix( ob);
     get_prefix( );
     set_suffix( fs);
     get_suffix( );
  }
}
;
csl_register hi{
    hi( ){
     add_logic( serial_input);
     init_value( 5);
     add_logic( cnt_dir_signal);
  }
}
;
csl_register qu{
    qu( ){
     set_width( 3);
     set_depth( 6);
     get_depth( );
     add_logic( read_valid);
     create_rtl_module( );
     set_const_value( 8);
  }
}
;

csl_enum tg {
	ic,
	bo,
	qf,
	mm,
	eq,
	jo,
	sn,
	du,
	lq,
	vk,
	un
};
csl_enum xl {
	fc
};
csl_enum gk {
	qc = 1,
	qb = 84,
	fu = 10,
	px = 34,
	ce = 76,
	kg = 98,
	ut = 85,
	wp = 13,
	kb = 86,
	kx = 98,
	tg = 1
};
csl_isa_instruction_format un{
    un( ){
     set_width( 3);
     generate_decoder( nech);
  }
}
;
csl_isa uf{
    uf( ){
     set_decoder_name( "nk");
     set_decoder_out_name_prefix( "sy");
     print( isa.txt);
  }
}
;
csl_fifo gb{
   gb( ){
     set_physical_implementation( SRAM);
     add_logic( rd_credit);
  }
}
;
csl_memory_map_page dc{
    dc( ){
     set_address_increment( 7);
     get_endianess( );
  }
}
;
csl_memory_map_page gv{
    gv( ){
     add_address_range( 0, 7);
     set_next_address( 5);
     get_next_address( );
     set_access_rights( access_read_write, none);
     add_reserved_address_range( 2, 6);
     get_lower_bound( );
     set_data_word_width( 2);
     get_data_word_wodth( );
     set_aligment( 3);
     set_endianess( big_endianlittle_endian);
     get_endianess( );
     set_symbol_max_lenght( );
  }
}
;
csl_memory_map_page iu{
    iu( ){
     add_address_range( 6, 4);
     set_address_increment( 9);
     add_reserved_address_range( 3, 5);
     get_lower_bound( );
     get_upper_bound( );
     get_data_word_wodth( );
     set_aligment( 0);
     get_aligment( );
     get_endianess( );
  }
}
;
csl_memory_map pj{
    pj( ){
.add_to_memory_map( 9,access_read_write); 
     set_type( hierach);
     set_prefix( fp);
     get_prefix( );
  }
}
;
csl_register pm{
    pm( ){
     set_width( 3);
     set_atribute( read);
     get_atributes( );
     add_logic( neg_output);
     add_logic( rd_en);
     add_logic( wr_en);
     set_start_value( 7);
     add_logic( inc_signal);
  }
}
;
csl_register od{
    od( ){
     set_width( 3);
     set_depth( 2);
     add_logic( read_valid);
     add_logic( bypass);
  }
}
;

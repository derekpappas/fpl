#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "calea catre testele generate este : $path"."conn_units_mem_fifo_reg_rf_invalid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

sub word {
    my $val = $_[0];
    my @alpha = ('a'..'z','A'..'Z');
    my @alphanumeric = ('a'..'z','A'..'Z','0'..'9');
    my $ret = $alpha[rand @alpha];
    for(my $i=1;$i < $val; ++$i){
        $ret = $ret.$alphanumeric[rand @alphanumeric];
    }
    return $ret;
}

my @units = ("fifo","register","register_file");#,"memory");
foreach my $unit(@units){
    foreach(my $i = 1; $i <= 4; $i++) {
        my @map1 = ("ua0","ua1");
        my @map2 = ("ua0","ub0","ub1");
        my @map3 = ("ud0","ud1","uc0");
        my @map4 = ("ub0","ub1");
        my @map5 = ("ud0","ud1");
        my @map7 = ("ud0","ud1","uc0","uc1");
        my @map10 = ("ud0","ue2","ue0","ue1");
        my $it1;
        my $it2;
        my $it3 = "";
        my $it4 = "";
        my ($it5,$it6);
        if($i <= 2){
            foreach $it1 (@map1) {
                foreach $it2 (@map2){
                    if($it1 ne $it2){
                        if($i == 1){
                            foreach $it3 (@map3){
                                foreach $it4 (@map4){
                                    if($it3 ne $it4){
                                        &main($i,$it1,$it2,$it3,$it4,$unit);
                                    }
                                }
                            }
                        }
                        else{
                            foreach $it5 (@map5){
                                foreach $it6 (@map4){
                                    if($it5 ne $it6){
                                        &main($i,$it1,$it2,$it5,$it6,$unit);
                                    }       
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            foreach $it1 (@map7) {
                foreach $it2 (@map2){
                    if($it1 ne $it2){
                        if($i == 3){
                            foreach $it3 (@map10){
                                foreach $it4 (@map1){
                                    if($it3 ne $it4){
                                        &main($i,$it1,$it2,$it3,$it4,$unit);
                                    }
                                }
                            }
                        }
                        else{
                            foreach $it5 (@map10){
                                foreach $it6 (@map4){
                                    if($it5 ne $it6){
                                        &main($i,$it1,$it2,$it5,$it6,$unit);
                                    }       
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

sub main {
    my ($i,$it1,$it2,$it3,$it4,$unit) = @_;
    my $test_name;
    $test_name = "conn_units_".$unit."_".$i."_".$it1."_".$it2."_".$it3."_".$it4."_illegal.csl";
    &createCslFile($test_name, $i,$it1,$it2,$it3,$it4,$unit);
}
sub createCslFile {
    my($test_name, $i,$it1,$it2,$it3,$it4,$unit) = @_;
    
    my $val1 = int(rand(30)) + 1;
    my $val2 = int(rand(30)) + 1;
    my $val3 = int(rand(30)) + 1;
    my $val4 = int(rand(30)) + 1;
    my $val5 = int(rand(30)) + 1;
    my $word = &word($val1);
    my $word1 = &word($val2);
    my $word2 = &word($val1);
    my $word3 = &word($val2);
    my $word4 = &word($val3);
    my $word5 = &word($val4);
    my $word6 = &word($val5);
    &mkDir("$path/conn_units_mem_fifo_reg_rf_invalid");
    open(FH,">$path/conn_units_mem_fifo_reg_rf_invalid/$test_name");
    
    print FH "//Generated by Petronela\n";
    print FH "//testing the command connect_units for invalid connections memory to memory ,fifo to fifo,register to register and register_file to register_file --illegal \n\n";
    print FH "csl_$unit ua {\n";
    print FH "  ua(){\n";
    print FH "    set_width($val4);\n";
    if($unit ne "register"){
        print FH "    set_depth($val1);\n";
    }
    else{
        print FH "    set_type(register);\n";
    }   
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit ub {\n";
    print FH "  ub(){\n";
    print FH "    set_width($val4);\n";
    if($unit ne "register"){
        print FH "    set_depth($val1);\n";
    }
    else{
        print FH "    set_type(register);\n";
    }  
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit uc {\n";
    print FH "  uc(){\n";
    print FH "    set_width($val4);\n";
    if($unit ne "register"){
        print FH "    set_depth($val1);\n";
    }
    else{
        print FH "    set_type(register);\n";
    }   
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit ud {\n";
    print FH "  ud(){\n";
    print FH "    set_width($val4);\n";
    if($unit ne "register"){
        print FH "    set_depth($val1);\n";
    }
    else{
        print FH "    set_type(register);\n";
    }   
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_$unit ue {\n";
    print FH "  ue(){\n";
    print FH "    set_width($val4);\n";
    if($unit ne "register"){
        print FH "    set_depth($val1);\n";
    }
    else{
        print FH "    set_type(register);\n";
    }   
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_unit a {\n";
    print FH "  ua ua0;\n";
    print FH "  ua ua1;\n";
    print FH "  csl_port p_data(input,$val1);\n"; 
    print FH "  csl_port p_addr(output,$val1);\n";
    print FH "  csl_port p_data1(input,$val1);\n";
   
    if($i > 2) {
       print FH "  ua ua2;\n"; 
    }
    print FH "  a() {\n";        
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    if($i >= 3){
        print FH "csl_unit f {\n";
        print FH "  ua ua0;\n";
        print FH "  ua ua1;\n";
        print FH "  ub ub0;\n";
        print FH "  csl_port p_data(input,$val1);\n"; 
        print FH "  csl_port p_addr(output,$val1);\n";
        print FH "  csl_signal s_data($val2);\n"; 
        print FH "  csl_signal s_addr($val2);\n";
        print FH "  f() {\n";    
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    print FH "csl_unit b {\n";  
    if($i <= 2){
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  ub ub0;\n";
        print FH "  ub ub1;\n";
        print FH "  ua ua0;\n";
    }
    else {
        print FH "  f f0;\n";
        print FH "  f f1;\n";
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  a a2;\n";
        print FH "  ub ub0;\n";
        print FH "  ua ub1;\n";
        print FH "  ub ub2;\n";
        print FH "  ua ua0;\n";
    }
      
    print FH "  csl_port p_data(output,$val1);\n";
    print FH "  csl_port p_addr(output,$val1);\n";
    if($i > 2) {
        print FH "  csl_signal s_data($val2);\n"; 
        print FH "  csl_signal s_addr($val2);\n";
        print FH "  csl_signal s_data1($val2);\n";
    }
    print FH "  b() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i <= 2){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
    }
    else {
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  b b2;\n";
        print FH "  a a0;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
        print FH "  ub ub0;\n";
    }
   
    print FH "  csl_port p_data(input,$val1);\n";
    print FH "  csl_port p_addr(input,$val1);\n";
    print FH "  csl_port p(input,$val1);\n";
    if($i > 2 ) {
        print FH "  csl_signal s_data($val2);\n"; 
        print FH "  csl_signal s_addr($val2);\n";
    }
    print FH "  c() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i <= 2){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  uc uc0;\n";
    }
    else {
        print FH "  f f0;\n";
        print FH "  f f1;\n";
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
        print FH "  uc uc0;\n";
        print FH "  uc uc1;\n";
    }
    
    print FH "  csl_port p_data(output,$val1);\n"; 
    print FH "  csl_port p_addr(input,$val1);\n";
    print FH "  csl_port p(input,$val1);\n";
    if($i > 2) {        
        print FH "  csl_signal s_data($val2);\n"; 
        print FH "  csl_signal s_addr($val2);\n";
        print FH "  csl_signal s_data1($val2);\n";
        print FH "  csl_signal s_addr1($val2);\n";
    }
    print FH "  d() {\n";
    if($i <= 2) {
        print FH "    b0.a0.$it1.connect_units(c0.b1.$it2);\n";
        print FH "    c1.b1.$it2.connect_units(b0.a1.$it1);\n";
    }
    elsif($i > 2) {
        print FH "    $it1.connect_units(b0.$it2);\n";
        print FH "    $it1.connect_units(c0.b2.$it2);\n";
    }
 
    
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    

    print FH "csl_unit e {\n";  
    if($i <= 2){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  ue ue0;\n";
        print FH "  ue ue1;\n";
        print FH "  ud ud0;\n";
        print FH "  ud ud1;\n";
    }
    elsif($i > 2) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  c c2;\n";
        print FH "  ue ue0;\n";
        print FH "  ue ue1;\n";
        print FH "  ud ue2;\n";
        print FH "  ud ud0;\n";
    }
    
    print FH "  csl_port p_data(input,$val1);\n"; 
    print FH "  csl_port p_addr(output,$val1);\n";   
    print FH "  csl_port p_data1(output,$val1);\n";
    
    if($i > 2) {
        print FH "  csl_signal s_data($val2);\n"; 
        print FH "  csl_signal s_addr($val2);\n";
    }
    print FH "  e() {\n";
    if($i == 1) {
        print FH "    d0.$it3.connect_units(c0.b0.$it4);\n";
        print FH "    d1.$it3.connect_units(d0.c0.b1.$it4);\n";
    }
    elsif($i == 3) {
        print FH "    $it3.connect_units(c1.b0.a1.$it4);\n";
        print FH "    d0.b1.a0.$it4.connect_units($it3);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i <=2){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  d d2;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
    }
    elsif($i > 2) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
        print FH "  e e2;\n";
        print FH "  a a0;\n";
    }
  
    print FH "  csl_port ptop(input,$val1);\n";
    print FH "  csl_port p(input,$val1);\n";
    
    
    print FH "  top(){\n";
    if($i == 2) {
        print FH "    d0.$it3.connect_units(e2.d0.b1.$it4);\n";
        print FH "    e1.d1.$it3.connect_units(d0.b0.$it4);\n";
        print FH "    d1.c1.b0.a1.ua1.connect_units(d2.$it3);\n";
    }
    elsif($i == 4) {
        print FH "    e0.$it3.connect_units(d0.b0.$it4);\n";
        print FH "    d1.b1.$it4.connect_units(e2.$it3);\n";
        print FH "    d1.b0.$it4.connect_units(e2.d1.c1.uc0);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

#!/usr/bin/perl

#oanab
#assign with part select

use strict;

print "Generated tests path : test/csl_test_gen/assign_part_sel_invalid5/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 300; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "assign_part_sel".$i."_illegal.csl";
   	&createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(20)) + 2;
    my $val2 = int(rand(100)) + 3;
    my $val3 = int(rand(100)) + 4;
    my $l = int(rand(3))+1;
    my $m = $k + int(rand(10)) + 1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/assign_part_sel_valid");
        open(FH,">$path/assign_part_sel_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/assign_part_sel_invalid5"); 
        open(FH,">$path/assign_part_sel_invalid5/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#bitranges and fields
    print FH "csl_bitrange br1($val1);\n";
    print FH "csl_bitrange br2($val2);\n";
    print FH "csl_bitrange br3($val3);\n";
    print FH "csl_bitrange br4(".($val2+$val3).");\n";
    print FH "csl_bitrange br5(".($val1+2*$val2).");\n\n";
    print FH "csl_field f2($val2);\n\n";

#ifc k
    if($i > 100 && $i <= 150 || $i > 200 && $i <= 300) {
	print FH "csl_interface ifc$k {\n";
	print FH "  csl_port p_a$i(input,br3);\n";
	print FH "  csl_port p_b$i(output,$val2);\n";
	print FH "  csl_port p_c$i(input,br1);\n";
	print FH "  csl_port p_d$i(output,br4);\n";
	print FH "  ifc$k () {}\n";
	print FH "};\n\n";
    }
    

#ifc m
    if($i > 100 && $i <= 150 || $i > 200 && $i <= 300) {
	print FH "csl_interface ifc$m {\n";
	print FH "  csl_port p_x$i(input,br3);\n";
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  ifc$k ifc$k\_$two;\n";
	print FH "  ifc$m () {}\n";
	print FH "};\n\n";
    }

#sg k
    if($i <= 300) {
	print FH "csl_signal_group sg$k {\n";
	print FH "  csl_signal s_a$i(f2);\n";
	print FH "  csl_signal s_b$i(br3);\n";
	print FH "  csl_signal s_c$i($val2);\n";
	print FH "  csl_signal s_d$i(br4);\n";
	print FH "  sg$k () {}\n";
	print FH "};\n\n";
    }
    

#sg m
    if($i <= 300) {
	print FH "csl_signal_group sg$m {\n";
	print FH "  csl_signal s_x$i(br2);\n";
	print FH "  csl_signal s_y$i(br3);\n";
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  sg$m () {}\n";
	print FH "};\n\n";
    }

    
#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 100) {
	print FH "  csl_signal s_x$i(".(2+$val2).");\n";
	print FH "  csl_port p_a$i(input,br4);\n";
	print FH "  csl_port p_b$i(input,br4);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  ifc$m ifc$m\_$zero;\n";
	print FH "  csl_signal s_a$i(f2);\n";
	print FH "  csl_signal s_b$i(br4);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  csl_signal s_a$i(br1);\n";
	print FH "  sg$m sg$m\_$one;\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  ifc$k ifc$k\_$one;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  csl_signal s_x$i(br2);\n";
	print FH "  csl_signal s_y$i(br4);\n";
    }
    print FH "  a$k () {\n";
#Invalid assign between op expr and sig
    if($i <= 50) {
	print FH "    p_a$i\[".($val2+$val3)."\-\:".($val2)."\] & p_b$i\[4\] = s_x$i; // Invalid assign between op expr and sig\n";
    }
#Invalid assign between op expr and sig.ps
    elsif($i > 50 && $i <= 100) {
	print FH "    p_a$i\[".($val2+$val3)."\:".($val3)."\] & p_b$i\[4\] = s_x$i\[".($val2)."\:".($val2-2)."\]; // Invalid assign between op expr and sig.ps\n";
    }
#Invalid assign between op expr and sg, op expr and ifc.ifc
    elsif($i > 100 && $i <= 150) {
	print FH "    s_a$i\[".($val2)."\:".($val2)."\] | s_b$i\[".($val2+$val3)."\:".($val3)."\] = sg$k\_$zero;  // Invalid assign between op expr and sg\n";
	print FH "    s_a$i\[".($val2)."\:".($val2-2)."\] & s_b$i\[".($val2+$val3)."\:".($val2)."\] = ifc$m\_$zero.ifc$k\_$one;  // Invalid assign between op expr and ifc.ifc\n";
    }
#Invalid assign between concat expr and sig, concat expr and sg.sg.sig (with nums)
    elsif($i > 150 && $i <= 200) {
	print FH "    {2'b10\[1\],3'b101\[2\]} = s_a$i;  // Invalid assign between concat expr and sig\n";
	print FH "    {4'b1010\[".(3)."\:".(1)."\],3'b101\[1\]} = sg$m\_$one.sg$k\_$zero.s_c$i;  // Invalid assign between concat expr and sg.sg.sig\n";
    }
#Invalid assign between concat expr and sg, concat expr and ifc (with nums)
    elsif($i > 200 && $i <= 250) {
	print FH "    {3'b010\[".(2)."\:".(1)."\],3'b101\[1\]} = sg$k\_$one;  // Invalid assign between concat expr and sg\n";
	print FH "    {2'b10\[0\],4'b1101\[3\]} = ifc$k\_$one;  // Invalid assign between concat expr and ifc\n";
    }
#Invalid assign between concat expr and ifc, concat expr and ifc
    elsif($i > 250 && $i <= 300) {
	print FH "    {s_x$i\[3\],s_y$i\[".($val2+$val3)."\:".($val2)."\]} = ifc$k\_$zero;  // Invalid assign between concat expr and ifc\n";
	print FH "    {s_x$i\[".($val2)."\:".($val2-2)."\],s_y$i\[".($val2+$val3)."\-\:".($val2)."\]} = sg$k\_$zero;  // Invalid assign between concat expr and ifc\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i <= 50) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  csl_signal s_x$i(br3);\n";
	print FH "  csl_signal s_y$i($val1);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  csl_signal s_x$i(br4);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  csl_port p_c$i(input,".($val1-1).");\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  csl_signal s_x$i(br4);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  csl_port p_a$i(input,br1);\n";
	print FH "  csl_port p_b$i(input,".($val2+2*$val1).");\n";
    }
    print FH "  b$k () {\n";
#Invalid assign between op expr and sg.sg.sig
    if($i <= 50) {
	print FH "    s_x$i\[2\] | s_y$i\[".($val1)."\:".($val1-2)."\] = sg$m\_$zero.sg$k\_$zero.s_c$i;  // Invalid assign between op expr and sg.sg.sig\n";
    }
#Invalid assign between op expr and sg.sig.ps
    elsif($i > 50 && $i <= 100) {
	print FH "    ~ s_x$i\[".($val2+$val3)."\-\:".($val3)."\] = sg$k\_$zero.s_d$i\[".($val2+$val3)."\:".($val2)."\];  // Invalid assign between op expr and sg.sig.ps\n";
    }
#Invalid assign between op expr and sg.sg
    elsif($i > 100 && $i <= 150) {
	print FH "    ~ p_c$i\[".$val1."\] = sg$m\_$zero.sg$k\_$zero;  // Invalid assign between op expr and sg.sg\n";
    }
#Invalid assign between concat expr and sg.sig, concat expr and sig.ps (with nums)
    elsif($i > 150 && $i <= 200) {
	print FH "    {2'b10\[0\],4'b1101\[3\]} = sg$k\_$one.s_b$i;  // Invalid assign between concat expr and sg.sig\n";
	print FH "    {3'b110\[2\],3'b101\[3\]} = s_x$i\[".($val2+$val3)."\:".($val2)."\];  // Invalid assign between concat expr and sig.ps\n";
    }
#Invalid assign between concat expr and ifc.ifc
    elsif($i > 200 && $i <= 250) {
	print FH "    {2'b10\[1\],3'b101\[".(2)."\-\:".(1)."\]} = ifc$m\_$zero.ifc$k\_$one;  // Invalid assign between concat expr and ifc.ifc\n";
    }
#Invalid assign between concat expr and sg.sg
    elsif($i > 250 && $i <= 300) {
	print FH "    {p_a$i\[1\],p_b$i\[".($val2+2*$val1)."\:".($val1)."\]} = sg$m\_$zero.sg$k\_$one;  // Invalid assign between concat expr and sg.sg\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    if($i <= 50) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  csl_signal s_x$i(br4);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  csl_signal s_x$i(br3);\n";
	print FH "  csl_signal s_y$i($val1);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  csl_port p_a$i(input,".($val2+20).");\n";
	print FH "  csl_port p_b$i(input,".($val2+2*$val1).");\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  sg$k sg$k\_$zero;\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  sg$m sg$m\_$one;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  ifc$m ifc$m\_$zero;\n";
	print FH "  csl_signal s_x$i(br1);\n";
	print FH "  csl_signal s_y$i(br4\[".($val2+1)."\:".($val2+$val3)."\]);\n";
    }
    print FH "  c$k () {\n";
#Invalid assign between op expr and sg.sig
    if($i <= 50) {
	print FH "    ~ s_x$i\[".($val2+$val3)."\:".($val2)."\] = sg$k\_$zero.s_d$i;  // Invalid assign between op expr and sg.sig\n";
    }
#Invalid assign between op expr and sg.sg.sig.ps
    elsif($i > 50 && $i <= 100) {
	print FH "    s_x$i\[2\] | s_y$i\[".($val1)."\:".($val1-2)."\] = sg$m\_$zero.sg$k\_$zero.s_c$i\[2\];  // Invalid assign between op expr and sg.sg.sig.ps\n";
    }
#Invalid assign between op expr and ifc
    elsif($i > 100 && $i <= 150) {
	print FH "    p_a$i\[1\] & p_b$i\[".($val2+2*$val1)."\-\:".($val1+$val2)."\] = ifc$k\_$zero;  // Invalid assign between op expr and ifc\n";
    }
#Invalid assign between concat expr and sg.sig.ps, concat expr and sg.sg.sig.ps (with nums)
    elsif($i > 150 && $i <= 200) {
	print FH "    {3'b010\[1\],2'b01\[1\]} = sg$k\_$zero.s_d$i\[".($val2+$val3)."\:".($val2)."\];  // Invalid assign between concat expr and sg.sig.ps\n";
	print FH "    {4'b1010\[".(2)."\:".(0)."\],3'b101\[1\]} = sg$m\_$zero.sg$k\_$zero.s_d$i\[".($val2+$val3)."\-\:".($val3)."\];  // Invalid assign between concat expr and sg.sg.sig.ps\n";
    }
#Invalid assign between concat expr and sig.ps
    elsif($i > 200 && $i <= 250) {
	print FH "    {3'b110\[2\],3'b101\[3\]} = sg$m\_$one.sg$k\_$one;  // Invalid assign between concat expr and sig.ps\n";
    }
#Invalid assign between concat expr and ifc.ifc
    elsif($i > 250 && $i <= 300) {
	print FH "    {s_x$i\[2\],s_y$i\[".$val3."\]} = ifc$m\_$zero.ifc$k\_$one;  // Invalid assign between concat expr and ifc.ifc\n";
    }
    print FH "  }\n";
    print FH "};\n\n";











}

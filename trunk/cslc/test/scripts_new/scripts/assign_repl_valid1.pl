#!/usr/bin/perl

#oanab
#assign with replication expressions
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

print "Generated tests path : test/csl_test_gen/assign_repl_valid1/\n";

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 150; $i++) {
    &main($i);
}

sub main {     
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; 
    $m = int(rand(20))+2; 
    $n = int(rand(20))+3; 
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "assign_repl".$i."_legal.csl";
    if($j != $m) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    else {
	&createCslFile($test_name, $i, $j+1, $m+2, $n+3, %dir);
    }
}


sub createCslFile {
    my($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100)) + 3;
    my $val2 = int(rand(100)) + 2 ;
    my $val3 = int(rand(100)) + 8;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/assign_repl_valid1");
        open(FH,">$path/assign_repl_valid1/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/assign_repl_invalid"); 
        open(FH,">$path/assign_repl_invalid/$test_name");
    }

    print FH "//Generated by oanab\n\n";

#bitranges
    print FH "csl_bitrange br1($val1);\n\n";

    print FH "csl_bitrange br2($val2);\n\n";
    
    print FH "csl_bitrange br3($val3);\n\n";

#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 50) {
	print FH "  csl_port p_b$i(output,".(3*$val2)."); \n";
	print FH "  csl_signal s_a$i(br2);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_port p_a$i(input,".($val1)."); \n";
	print FH "  csl_signal s_c$i(".(2*$val1+2*$val3).");\n";
	print FH "  csl_signal s_a$i(br3);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_parameter par(".(2*$val2).");\n";
	print FH "  csl_signal s_x$i(par);\n";
	print FH "  csl_signal s_y$i(br2);\n";
    }
    print FH "  a$k () {\n";
    if($i <= 50) {
#assign : port---repl expr (sig)
	print FH "    p_b$i = {3{s_a$i}};  // assign : port---repl expr (sig)\n";
    }
    elsif($i > 50 && $i <= 100) {
#assign : sig---concat in repl (sig,port)
	print FH "    s_c$i = {2{s_a$i,p_a$i}};  // assign : sig---concat in repl (sig,port)\n";
    }
    elsif($i > 100 && $i <= 150) {
#assign : sig---repl expr (spar)
	print FH "    s_x$i = {2{s_y$i}};  // assign : sig---repl expr (spar)\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit b
    print FH "csl_unit b$k {\n";
    if($i <= 50) {
	print FH "  a$k a$k\_$zero(.p_b$i(s_b$i\[".(4*$val2-1)."\:".($val2)."\]));\n";
	print FH "  csl_signal s_b$i(".(4*$val2).");\n";
	print FH "  csl_port p_x$i(input,br2);\n";
	print FH "  csl_port p_y$i(input,$val2);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  a$k a$k\_$zero(.p_a$i(p_b$i));\n";
	print FH "  csl_port p_b$i(input,br1);\n";
	print FH "  csl_port p_c$i(input,br2);\n";
	print FH "  csl_signal s_m$i(".(3*$val1).");\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  a$k a$k\_$zero;\n";
	print FH "  csl_signal s_a$i(".(2*$val3).");\n";
	print FH "  csl_port p_m$i(input,br3);\n";
    }
    print FH "  b$k () {\n";
    if($i <= 50) {
#assign : sig---concat in repl (port)
	print FH "    s_b$i = {2{p_x$i,p_y$i}};  // assign : sig---concat in repl (port)\n";
    }
    elsif($i > 50 && $i <= 100) {
#assign : sig---op in repl (port)
	print FH "    s_m$i = {3{p_b$i \/ p_c$i}};  // assign : sig---op in repl (port)\n";
    }
    elsif($i > 100 && $i <= 150) {
#assign : sig---repl expr (port)
	print FH "    s_a$i = {2'h2{p_m$i}};  // assign : sig---repl expr (port)\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit c
    print FH "csl_unit c$k {\n";
    if($i <= 50) {
	print FH "  b$k b$k\_$zero(.p_x$i(s_m$i\[".($val1+$val2-1)."\-\:".($val2)."\]),.p_y$i(s_n$i\[".(2*$val1+2*$val2-1)."\:".(2*$val1+$val2)."\]));\n";
	print FH "  csl_signal s_m$i(".($val1+$val2).");\n";
	print FH "  csl_signal s_n$i(".(2*$val1+2*$val2).");\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  b$k b$k\_$zero(.p_b$i(s_a$i),.p_c$i(s_b$i));\n";
	print FH "  csl_signal s_a$i(".($val1).");\n";
	print FH "  csl_signal s_b$i(br2);\n";
	print FH "  csl_signal s_c$i(".(3*($val1-1)).");\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  b$k b$k\_$zero(.p_m$i(s_c$i));\n";
	print FH "  csl_signal s_c$i(br3);\n";
    }
    print FH "  c$k () {\n";
    if($i <= 50) {
#assign : sig---repl expr (sig)
	print FH "    s_n$i = {2{s_m$i}};  // assign : sig---repl expr (sig)\n";
    }
    elsif($i > 50 && $i <= 100) {
#assign : sig---concat in repl (s.ps)
	print FH "    s_c$i = {3{s_a$i\[".($val1-1)."\-\:".($val1-2)."\],s_b$i\[".($val2-1)."\]}};  // assign : sig---concat in repl (s.ps)\n";
    }
    elsif($i > 100 && $i <= 150) {
#assign : sig---repl expr (sig)
	print FH "    s_c$i = {3{s_c$i}};  // assign : sig---repl expr (sig)\n";
    }
    print FH "  }\n";
    print FH "};\n\n";



       
    close(FH);
}

#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."conn_pattern_concat_pps_sps_minus_invalid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}


sub word {
    my $val = $_[0];
    my @alpha = ('a'..'z','A'..'Z');
    my @alphanumeric = ('a'..'z','A'..'Z','0'..'9');
    my $ret = $alpha[rand @alpha]."zz";
    for(my $i=1;$i < $val; ++$i){
        $ret = $ret.$alphanumeric[rand @alphanumeric];
    }
    return $ret;
}

my @lower = (6,12,18,24,30);
my @upper = (43,54,63,78,92);

for (my $i = 1; $i <= 5; ++$i ) {
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            &main($i,$l,$u);
        }
    }
}

sub main {
    my ($i,$l, $u) = @_;
    my $test_name = "conn_pattern_concat_pps_sps_minus$i"."_".$l."_".$u."_illegal.csl";
    &createCslFile($test_name,$i, $l, $u);
}

sub createCslFile {
    my($test_name, $i,$l, $u) = @_;
    my $w = $l;
    my $val1 = int(rand($w/2)) + 1;
    my $val2 = int(rand($w/2)) + 1;
    my $val3 = $w - $val1;
    my $val4 = $w - $val2;
    my $val5 = int(rand($w/3)) + 1;
    my $val6 = int(rand($w/3)) + 1;
    my $val7 = $w - $val5 - $val6;
    my $val8 = $u + int(rand(50)) + 1;
    my $val9 = $u + int(rand(50)) + 1;
    my $word = &word($val1);
    my $word1 = &word($val2);
    my $word2 = &word($val1);
    my $word3 = &word($val2);
    my $word4 = &word($val3);
    my $word5 = &word($val4);
    my $word6 = &word($val5);
    my $word7 = &word($val3);
    my $word8 = &word($val5);
    my $word9 = &word($val3);
    my $word10 = &word($val4);
    my $word11 = &word($val5);
    my $word12 = &word($val3);
    my $word13 = &word($val5);
    &mkDir("$path/conn_pattern_concat_pps_sps_minus_invalid");
    open(FH,">$path/conn_pattern_concat_pps_sps_minus_invalid/$test_name");
    print FH "//Generated by Petronela\n";
    print FH "//testing the cmd connect_by_pattern for connections  port[part select] ([upper-:lower]) to concat expr., signal[part select]([upper-:lower])  to concat expr.\n\n";
    print FH "csl_bitrange br($w);\n";
    print FH "csl_bitrange brt($val2);\n";
    print FH "csl_unit a {\n";
    if($i <= 2) {
        print FH "  csl_port p_a$i(input,$val1);\n"; 
        print FH "  csl_port pa(input,$val3);\n";
        print FH "  csl_port p_a_br$i(input,brt);\n";
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_signal sa($val2);\n";
        print FH "  csl_signal s_a$i($val4);\n";
    }
    elsif($i > 2 && $i <= 4) {
        print FH "  csl_port p_a$i(output,$val6);\n"; 
        print FH "  csl_port pa(input,$val5);\n";
        print FH "  csl_port p(output,$val7);\n";
        print FH "  csl_signal s_a$i($val4);\n";
        print FH "  csl_signal s_a_br$i(brt);\n";
        print FH "  csl_signal sa($val2);\n";
    }
    elsif($i > 4) {
        print FH "  csl_port p_a$i(input,$val1);\n"; 
        print FH "  csl_port p_a_br$i(input,brt);\n";
        print FH "  csl_port pa(input,$val2);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_signal s_a$i($val3);\n";
        print FH "  csl_signal sa($val2);\n";
    }
    print FH "  a() {\n";                
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_unit b {\n";  
    print FH "  a a0;\n";
    print FH "  a a1;\n";
    
    if($i == 1) {
        print FH "  csl_port p_b$i(input,$val1);\n";
        print FH "  csl_port p(input,$val3);\n";
        print FH "  csl_port pb(input,$val8);\n";
        print FH "  csl_signal s_b_br$i($val5);\n";
        print FH "  csl_signal s_b$i($val7);\n";
        print FH "  csl_signal sb($val6);\n";
    }
    elsif($i > 1 && $i <= 3) {      
        print FH "  csl_port p_b$i(output,$val8);\n";
        print FH "  csl_port pb(output,$val4);\n";
        print FH "  csl_port p_b_br$i(output,brt);\n";
        print FH "  csl_port p(output,$val2);\n";
        print FH "  csl_signal s_b$i($w);\n";
        
    }
    elsif($i > 3) {      
        print FH "  csl_port p_b$i(output,$val8);\n";
        print FH "  csl_port p_b_br$i(input,brt);\n";
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_signal s_b$i($val2);\n";
        print FH "  csl_signal s_b_br$i(br);\n";
        print FH "  csl_signal sb($val3);\n";
    }
    print FH "  b() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";  
    print FH "  b b0;\n";
    print FH "  b b1;\n";
    if($i <= 3) {
        print FH "  csl_port p_c$i(input,$val5);\n";
        print FH "  csl_port pc(input,$val6);\n";
        print FH "  csl_port p_c_br$i(output,brt);\n";
        print FH "  csl_port p(input,$val7);\n";
        print FH "  csl_signal s_c$i($val2);\n";
        print FH "  csl_signal sc($val4);\n";
    }
    elsif($i == 4) {      
        print FH "  csl_port p_c$i(output,$val2);\n";
        print FH "  csl_port p(output,$val3);\n";
        print FH "  csl_port pc(input,$val1);\n";
        print FH "  csl_signal sc($val3);\n";
        print FH "  csl_signal s_c_br$i(brt);\n";
        print FH "  csl_signal s_c$i($val2);\n";
    }
    elsif($i == 5) {      
        print FH "  csl_port pc(input,$val8);\n";
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_port p_c_br$i(input,brt);\n";
        print FH "  csl_signal s_c$i($val1);\n";
        print FH "  csl_signal sc($val3);\n";
    }
    print FH "  c() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    print FH "  a a0;\n";
    print FH "  c c1;\n";
    print FH "  c c0;\n"; 
    if($i <= 2) {
        print FH "  csl_port p_d$i(input,$w);\n"; 
        print FH "  csl_port p_d_br$i(input,br);\n";
        print FH "  csl_port p(input,$val8);\n";
        print FH "  csl_signal s_d_br$i($w);\n";
        print FH "  csl_signal s_d$i($w);\n";
    }
    elsif($i > 2 && $i <= 4) {      
        print FH "  csl_port p_d$i(output,$val1);\n";
        print FH "  csl_port p(output,$val3);\n";
        print FH "  csl_port pd(output,$w);\n";
        print FH "  csl_signal s_d$i($val9);\n";
    }
    elsif($i > 4) {      
       print FH "  csl_port p_d$i(input,$val1);\n";
       print FH "  csl_port p(input,$val3);\n";
       print FH "  csl_signal s($w);\n";
       print FH "  csl_signal s_d$i($val7);\n";
       print FH "  csl_signal s_d_br$i($val6);\n";
       print FH "  csl_signal sd($val5);\n";
    }
    print FH "  d() {\n";
    if($i <= 2) {
        print FH "    p[$u-:$l].connect_by_pattern({p_c$i,pc,p},$word2);\n";
    }
    elsif($i > 2 && $i <= 4) {
        print FH "    s_d$i"."[$u-:$l].connect_by_pattern({c0.b1.a1.pa,c0.b1.a1.p_a$i,p},$word);\n";
        print FH "    c0.b0.p_b".$i."[$u-:$l].connect_by_pattern({p,p_d$i},$word1);\n";
        print FH "    pd[$u-:$l].connect_by_pattern({c1.b1.a0.s_a$i,c1.b1.a0.s_a_br$i},$word2);\n";
    }
    elsif($i > 4) {
        print FH "    c0.pc[$u-:$l].connect_by_pattern({s_d_br$i,s_d$i,sd},$word1);\n";
    }
    
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    

    print FH "csl_unit e {\n";  
    print FH "  b b0;\n";
    print FH "  d d0;\n";
    print FH "  d d1;\n";
    if($i == 1 ) {
        print FH "  csl_port p_e$i(input,$val9);\n"; 
        print FH "  csl_port p_e_br$i(input,brt);\n";   
        print FH "  csl_port p(input,$val4);\n";
        print FH "  csl_signal s_e$i($val6);\n";
        print FH "  csl_signal se($val7);\n";
        print FH "  csl_signal s_e_br$i(br);\n";
        print FH "  csl_signal s($val5);\n";
    }
    elsif($i > 1 && $i <= 3) {      
        print FH "  csl_port p_e$i(output,$val9);\n";    
        print FH "  csl_port p(output,$val4);\n";
        print FH "  csl_port p_e_br$i(output,brt);\n";
        print FH "  csl_signal s_e$i($val8);\n";
        print FH "  csl_signal s_e_br$i($val1);\n";
    }
    elsif($i > 3) {      
        print FH "  csl_port p_e$i(input,$val1);\n";
        print FH "  csl_port p(input,$val8);\n";
        print FH "  csl_port pe(input,$val3);\n";
        print FH "  csl_signal se($w);\n";
    }
    print FH "  e() {\n";
    if($i == 1) {
        print FH "    p_e$i"."[$u-:$l].connect_by_pattern({b0.s_b$i,b0.sb,s_b_br$i},$word3);\n";
        print FH "    b0.pb[$u-:$l].connect_by_pattern({s_e$i,se,s},$word4);\n";
    }
    elsif($i > 1 && $i <= 3) {
        print FH "    p_e$i"."[$u-:$l].connect_by_pattern({d1.c1.b1.a1.s_a$i,d1.c1.b1.a1.sa},$word2);\n";
        print FH "    s_e$i"."[$u-:$l].connect_by_pattern({d0.c0.b0.p_b$i,d0.c0.b0.p_b_br$i},$word3);\n";
    }
    elsif($i > 3) {
        print FH "    p[$u-:$l].connect_by_pattern({e.b0.p_b_br$i,e.b0.p},$word2);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    print FH "  d d0;\n";
    print FH "  e e0;\n"; 
    print FH "  d d1;\n";
    print FH "  e e1;\n";
    if($i <= 2) {
        print FH "  csl_port ptop(input,$val1);\n";
        print FH "  csl_port p(input,$val2);\n";
        print FH "  csl_signal s_top$i($w);\n";
        print FH "  csl_signal stop($w);\n";
    }
    elsif($i == 3) {
        print FH "  csl_port p_top$i(output,$val3);\n";      
        print FH "  csl_port p(output,$val9);\n";
        print FH "  csl_port ptop(output,$val1);\n"; 
        print FH "  csl_signal stop($w);\n";
        print FH "  csl_signal s_top$i($w);\n";
    }
    elsif($i > 3) {
        print FH "  csl_port p_top$i(input,$val5);\n";      
        print FH "  csl_port p(input,$val7);\n";
        print FH "  csl_port ptop(input,$val6);\n";
        print FH "  csl_signal s_top$i($w);\n";
        print FH "  csl_signal s_top_br$i(br);\n";
        print FH "  csl_signal stop($w);\n";
    }
    
    print FH "  top(){\n";
    if($i <= 2) {
        print FH "    d0.p"."[$u-:$l].connect_by_pattern({e0.d0.c1.b1.a1.s_a$i,e0.d0.c1.b1.a1.sa},$word7);\n";
    }
    elsif($i == 3) {
        print FH "    p[$u-:$l].connect_by_pattern({d1.c1.s_c$i,d1.c1.sc},$word7);\n";
    }
    elsif($i > 3) {
        print FH "    d0.c0.b0.p_b$i"."[$u-:$l].connect_by_pattern({ptop,p_top$i,p},$word7);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

#!/usr/bin/perl

#Author Petronela
#modified by oanab
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."conn_pattern_param_p_ps_invalid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @lower = (10,23,31);
my @upper = (51,64,80);

sub word {
    my $val = $_[0];
    my @alpha = ('a'..'z','A'..'Z');
    my @alphanumeric = ('a'..'z','A'..'Z','0'..'9');
    my $ret = $alpha[rand @alpha]."zz";
    for(my $i=1;$i < $val; ++$i){
        $ret = $ret.$alphanumeric[rand @alphanumeric];
    }
    return $ret;
}

foreach(my $i = 1; $i <= 3; $i++) {
    my @map6 = ("b0","b2");
    my @map8 = ("a0","a1","a2");
    my @map7 = ("b0","c0","c1");
    my @map9 = ("f0","f1");
    my @map10 = ("d0","d1");
    my $it1;
    my $it2;
    my $it3 = "";
    my $it4 = "";
    my ($it5,$it6);
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            if($i == 1){
                &main($i,$l,$u,$it1,$it2,$it3,$it4);
            }
            else {
                foreach $it1 (@map7) {
                    foreach $it2 (@map8){
                        if($it1 ne $it2){
                            if($i == 2){
                                foreach $it3 (@map9){
                                    foreach $it4 (@map6){
                                        if($it3 ne $it4){
                                            &main($i,$l,$u,$it1,$it2,$it3,$it4);
                                        }
                                    }
                                }
                            }
                            else{
                                foreach $it5 (@map10){
                                    foreach $it6 (@map9){
                                        if($it5 ne $it6){
                                            &main($i,$l,$u,$it1,$it2,$it5,$it6);
                                        }       
                                    }
                                }
                            }
                        }
                    }
                }
            }
    
        }
    }
}


sub main {
    my ($i,$l,$u,$it1,$it2,$it3,$it4) = @_;
    my $test_name;
    if($i <= 1){
        $test_name = "conn_pattern_param_p_ps".$i."_".$l."_".$u."_illegal.csl";
    }
    else{
        $test_name = "conn_pattern_param_p_ps".$i."_".$l."_".$u."_".$it1."_".$it2."_".$it3."_".$it4."_illegal.csl";
    }
    &createCslFile($test_name,$i,$l,$u,$it1,$it2,$it3,$it4);
    
}

sub createCslFile {
    my($test_name,$i,$l,$u,$it1,$it2,$it3,$it4) = @_;
    
    my $val1 = $u + int(rand(100)) + 1;
    my $w = $u + $l + 1;
    my $val2 = $val1 + int(rand(100)) + 1;
    my $val3 = int(rand(30)) + 1;
    my $val4 = int(rand(30)) + 1;
    my $val5 = int(rand(30)) + 1;
    my $word = &word($val3);
    my $word1 = &word($val5);
    my $word2 = &word($val3);
    my $word3 = &word($val4);
    my $word4 = &word($val5);
    my $word5 = &word($val4);
    my $word6 = &word($val5);
    &mkDir("$path/conn_pattern_param_p_ps_invalid");
    open(FH,">$path/conn_pattern_param_p_ps_invalid/$test_name");
    
    print FH "//Generated by Petronela\n";
    print FH "//testing the command connect_by_pattern with parameter for connections port to port[ps],port[ps] to port,port[ps] to port[ps] \n\n";
    #print FH "csl_bitrange br($val2);\n";
    #print FH "csl_bitrange brt($val1);\n";
    #print FH "csl_filed f1($val3),f2($val4);\n";
    print FH "csl_unit a {\n";
    if($i < 2){
        print FH "  csl_parameter a_x($val1);\n";
        print FH "  csl_parameter a_y($val1);\n";
        print FH "  csl_parameter a_z($val1);\n";
        print FH "  csl_parameter a_u($u);\n";
        print FH "  csl_parameter a_l($l);\n"; 
#        print FH "  csl_port p_data(input,a_x);\n"; 
#        print FH "  csl_port p_addr(output,$val1);\n";
        print FH "  csl_port p_data1(input,a_z);\n";
    }
    else{
        print FH "  csl_parameter a_x($w);\n";
        print FH "  csl_parameter a_y($w);\n";
        print FH "  csl_parameter a_z($w);\n";
        print FH "  csl_parameter a_u($u);\n";
        print FH "  csl_parameter a_l($l);\n"; 
        print FH "  csl_port p_data(input,$val1);\n"; 
        print FH "  csl_port p_addr(output,a_y);\n";
        print FH "  csl_port p_data1(input,a_z);\n";
    }
    print FH "  a() {\n";
    if($i < 2){
	print FH "    gen_unique_rtl_modules();\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    if($i >= 2 ){
        print FH "csl_unit f {\n";
        print FH "  csl_parameter f_x($val1);\n";
        print FH "  csl_parameter f_y($val1);\n";
        print FH "  csl_parameter f_z($val1);\n";
        print FH "  csl_port p_data(input,f_x);\n"; 
        print FH "  csl_port p_addr(output,f_y);\n";
        print FH "  csl_port p_data1(input,$val1);\n";
        print FH "  f() {\n";  
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    print FH "csl_unit b {\n"; 
    if($i < 2){
        print FH "  a a0;\n";
#        print FH "  a a1;\n";
        print FH "  csl_parameter b_x($w);\n";
        print FH "  csl_parameter b_y($w);\n";
        print FH "  csl_parameter b_z($w);\n";
        print FH "  csl_port p_data(output,$w);\n";
        print FH "  csl_port p_addr(output,b_x);\n";
        print FH "  csl_port p_data1(input,b_y);\n";
        print FH "  csl_parameter b_u($u);\n";
        print FH "  csl_parameter b_l($l);\n"; 
    }
    else {
        print FH "  f f0;\n";
        print FH "  f f1;\n";
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  a a2;\n";
        print FH "  csl_parameter b_x($w);\n";
        print FH "  csl_parameter b_y($w);\n";
        print FH "  csl_parameter b_z($w);\n";
        print FH "  csl_parameter b_u($u);\n";
        print FH "  csl_parameter b_l($l);\n"; 
        print FH "  csl_port p_data(input,b_y);\n";
        print FH "  csl_port p_addr(output,b_z);\n";
        print FH "  csl_port p_data1(output,b_x);\n";
    }
    print FH "  b() {\n";
    if($i < 2){
	print FH "    gen_unique_rtl_modules();\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i < 2){
        print FH "  b b0(.p_data1(p_data));\n";
        print FH "  b b1(.p_data(s_data));\n";
        print FH "  csl_parameter c_x($w);\n";
        print FH "  csl_parameter c_y($val1);\n";
        print FH "  csl_parameter c_z($val1);\n";
        print FH "  csl_parameter c_u($u);\n";
        print FH "  csl_parameter c_l($l);\n";
        print FH "  csl_port p_data(input,c_x);\n";
        print FH "  csl_port p_addr(input,c_y);\n";
        print FH "  csl_port p_data1(input,$val1);\n";
	print FH "  csl_signal s_data($w);\n";
    }
    else {
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  b b2;\n";
        print FH "  a a0;\n";
        print FH "  csl_parameter c_x($w);\n";
        print FH "  csl_parameter c_y($w);\n";
        print FH "  csl_parameter c_z($w);\n";
        print FH "  csl_parameter c_u($u);\n";
        print FH "  csl_parameter c_l($l);\n";
        print FH "  csl_port p_data(input,c_x);\n";
        print FH "  csl_port p_addr(input,c_y);\n";
        print FH "  csl_port p_data1(output,c_z);\n";
    }

    print FH "  c() {\n";
    if($i < 2){
	print FH "    gen_unique_rtl_modules();\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i < 2){
        print FH "  c c0(.p_data(s_data));\n";
        print FH "  c c1(.p_data1(s_data1),.p_addr(s_data1));\n";
	print FH "  csl_signal s_data($w);\n";
	print FH "  csl_signal s_data1($val1);\n";
    }
    else {
        print FH "  f f0;\n";
        print FH "  f f1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
    }
    print FH "  csl_parameter d_x($u);\n";
    print FH "  csl_parameter d_y($u);\n";
    print FH "  csl_parameter d_z($l);\n";
    print FH "  csl_parameter d_t($l);\n";
    print FH "  csl_parameter d_w($val1);\n";
    print FH "  csl_parameter d_v($w);\n";
    print FH "  csl_port p_data(output,$w);\n"; 
    print FH "  csl_port p_addr(input,d_w);\n";
    print FH "  csl_port p_data1(input,$val1);\n";
    print FH "  d() {\n";
    if($i < 2) {
        print FH "    c0.b0.p_data[$u:$l].connect_by_pattern(c1.p_data[c_u:c_l],$word);\n";
        print FH "    c1.b1.p_addr[$u:$l].connect_by_pattern(c0.p_addr[$u:$l],$word4);\n";   
 	print FH "    gen_unique_rtl_modules();\n";
    }
    elsif($i >= 2) {
        print FH "    c0.b1.$it2.p_data[a_u:a_l].connect_by_pattern($it1.p_data1,$word4);\n";
        print FH "    c0.b1.$it2.p_addr[$u:$l].connect_by_pattern($it1.p_data,$word);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    print FH "csl_unit e {\n";  
    if($i < 2){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  csl_parameter e_x($u);\n";
        print FH "  csl_parameter e_y($u);\n";
        print FH "  csl_parameter e_z($l);\n";
        print FH "  csl_parameter e_t($l);\n";
        print FH "  csl_parameter e_w($val1);\n";
        print FH "  csl_parameter e_v($w);\n";
#        print FH "  csl_port p_data(input,e_w);\n"; 
        print FH "  csl_port p_addr(output,$val1);\n";   
#        print FH "  csl_port p_data1(output,$val1);\n";
    }
    elsif($i >= 2) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  c c2;\n";
        print FH "  csl_parameter e_x($u);\n";
        print FH "  csl_parameter e_y($u);\n";
        print FH "  csl_parameter e_z($l);\n";
        print FH "  csl_parameter e_t($l);\n";
        print FH "  csl_parameter e_w($val1);\n";
        print FH "  csl_parameter e_v($w);\n";
        print FH "  csl_port p_data(input,$val1);\n"; 
        print FH "  csl_port p_addr(output,$val1);\n";   
        print FH "  csl_port p_data1(input,e_w);\n";
    }
    print FH "  e() {\n";
    if($i < 2) {
        print FH "    d0.c0.b0.p_addr[$u:$l].connect_by_pattern(d1.p_addr[$u:$l],$word1);\n";
        print FH "    d1.c0.p_data1[c_u:c_l].connect_by_pattern(d0.p_data[$u:$l],$word5);\n";
	print FH "    gen_unique_rtl_modules();\n";
    }
    elsif($i >= 2) {
        print FH "    d0.$it3.p_data.connect_by_pattern(c1.$it4.p_data1[b_u:b_l],$word1);\n";
        print FH "    d1.$it3.p_data1.connect_by_pattern(c2.$it4.p_addr[$u:$l],$word5);\n";
    }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i < 2){
#        print FH "  d d2;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
    }
    elsif($i >= 2) {
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
        print FH "  e e2;\n";
        print FH "  a a0;\n";
    }
#    print FH "  csl_parameter top_x($u);\n";
#    print FH "  csl_parameter top_y($l);\n";
#    print FH "  csl_port ptop(input,$val1);\n";
#    print FH "  csl_port p(input,$val1);\n";
    print FH "  top(){\n";
    if($i < 2) {
        print FH "    e0.d0.c0.b1.p_data1[$u:$l].connect_by_pattern(e0.d0.p_data1[$u:$l],$word6);\n";
        print FH "    e1.d0.c1.b0.a0.p_data1[$u:$l].connect_by_pattern(e1.d1.p_data[$u:$l],$word2);\n";
        print FH "    e0.p_addr[e_x:e_y].connect_by_pattern(e1.d1.p_data1[1:1],$word3);\n"; 
    }
    elsif($i >= 2) {
        print FH "    e1.c0.b0.$it4.p_addr.connect_by_pattern($it3.p_data1[$u:$l],$word2);\n";
        print FH "    a0.p_addr[$l].connect_by_pattern($it3.p_data1[$u],$word6);\n";
        print FH "    e1.p_data1[$u:$l].connect_by_pattern($it3.p_data1[d_x:d_z],$word3);\n";
        
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}



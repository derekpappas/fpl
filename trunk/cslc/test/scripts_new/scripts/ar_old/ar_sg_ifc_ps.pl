#!/usr/bin/perl

#Author Monica
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 230; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my $test_name = "connect_sg_s_ifc_ps".$i."_legal.csl";
    &createCslFile($test_name, $i);
}
sub createCslFile {
    my($test_name, $i) = @_;
    my $path = "$ENV{WORK}/test/csl_ar_gen";
   if($i==1){
        print (" Generated path: $path/ar_connect_sg_ifc_ps_valid/\n");}
    my $val1 = int(rand(500));
    if($val1 == 0) { $val1 = 1; }
    my $val2= int(rand(200));
    if($val2== 0) { $val2= 1; }
    my $val3 = int(rand(100));
    if($val3==0) {$val3=1;}

         

    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_connect_sg_ifc_ps_valid");
        open(FH,">$path/ar_connect_sg_ifc_ps_valid/$test_name");
    }
    if( $i>0 && $i<=230){
  
if($i>0 && $i<=200){
    print FH "//Generated by Monica\n";
    print FH "//Connect SG.signal--IFC.port[part_select]\n\n";
    print FH "// TEST $i;\n";                                  
        
    if($i >0  && $i <=50){             
           my $val_ps1=int(rand($val1));
           my $val_ps2=int(rand($val1));        
          print FH "csl_bitrange br1($val1);\n";
          print FH "csl_bitrange br2(br1);\n\n";
                                                    
           print FH "csl_interface ifc_b {\n";   
    
    if($i > 0 && $i <= 15) {
       print FH "csl_port p_b1_$i(output,$val1);\n";
       print FH "csl_port p_b2_$i(output,$val1);\n";
     }
     elsif( $i > 15 && $i <= 30) {
       print FH "csl_port p_b1_$i(input,br1);\n";
       print FH "csl_port p_b2_$i(input,$val1);\n";
     }
    elsif( $i > 30 && $i <= 35) {
       print FH "csl_port p_b_br1_$i(output,br2);\n";
       print FH "csl_port p_b_br2_$i(output,br1);\n";
   }
    elsif( $i > 35 && $i <= 50) {
       print FH "csl_port p_b_br1_$i(input,br1);\n";
       print FH "csl_port p_b_$i(output,$val1);\n";
   }
       print FH " ifc_b() {\n";
       print FH "  }\n";        
       print FH "};\n";        
       print FH "\n";
    print FH "csl_unit u_b {\n";     #first  level
    print FH "  ifc_b ifc_b0;\n";
    print FH "  ifc_b ifc_b1;\n";
    print FH " u_b(){\n";
    print FH "  }\n";
    print FH "};\n";
    print FH "\n";

 
  print FH "csl_signal_group sg_b{\n";

   if($i > 0 && $i <= 15) {
       if($val_ps1 >= $val_ps2){
       my $val_ps=($val_ps1 -$val_ps2)+1;
       print FH "csl_signal s_b1_$i($val_ps);\n";
       print FH "csl_signal s_b2_$i($val1);\n";
         }
       else{
       my $val_ps=($val_ps2 -$val_ps1)+1;
       print FH "csl_signal s_b1_$i($val_ps);\n";
       print FH "csl_signal s_b2_$i($val1);\n";
           }
     }
     elsif( $i > 15 && $i <= 30) {
        if($val_ps1 >= $val_ps2){
       my $val_ps=($val_ps1 - $val_ps2)+1;
          print FH "csl_signal s_b1_$i($val1);\n";
          print FH "csl_signal s_b2_$i($val_ps);\n";
          } 
       else {
       my $val_ps=($val_ps2 -$val_ps1)+1;
       print FH "csl_signal s_b1_$i(br1);\n";
       print FH "csl_signal s_b2_$i($val_ps);\n";
        }
     }
    elsif( $i > 30 && $i <= 35) {
           print FH "csl_signal s_b_br1_$i(br2);\n";
           print FH "csl_signal s_b_br2_$i(br1);\n";
      }
      
    elsif( $i > 35 && $i <= 50) {
         if($val_ps1 >= $val_ps2){
           my $val_ps=($val_ps1 -$val_ps2)+1;
       print FH "csl_signal s_b_br1_$i($val_ps);\n";
       print FH "csl_signal s_b_$i($val_ps);\n";
       }
         else{
        my $val_ps=($val_ps2 -$val_ps1)+1;
         print FH "csl_signal s_b_br1_$i($val_ps);\n";
         print FH "csl_signal s_b_$i($val_ps);\n";  
    }
   }
   
       print FH " sg_b() {\n";
       print FH "  }\n";
       print FH "};\n";
   
       print FH " csl_unit top1 {\n";               #second level
       print FH " ifc_b ifc_b11;\n";
       print FH " ifc_b ifc_b12;\n";
       print FH " u_b u_b0;\n";
       print FH " u_b u_b1;\n";
       print FH " sg_b sg_b0;\n";
       print FH "   top1() {\n";

     if($i > 0 && $i <= 15) {
       print FH " sg_b0.s_b1_$i.connect( u_b0.ifc_b0.p_b1_$i [ $val_ps1:$val_ps2 ] );\n";
       print FH " sg_b0.s_b2_$i.connect( u_b0.ifc_b0.p_b2_$i);\n";
       
     }
     elsif( $i > 15 && $i <= 30) {
       print FH " sg_b0.s_b1_$i.connect(u_b1.ifc_b1.p_b1_$i);\n";
       print FH " sg_b0.s_b2_$i.connect(u_b1.ifc_b1.p_b2_$i [ $val_ps1:$val_ps2 ]  );\n";
     }
    elsif( $i > 30 && $i <= 35) {
        print FH " sg_b0.s_b_br1_$i.connect(u_b0.ifc_b1.p_b_br1_$i);\n";
       print FH " sg_b0.s_b_br2_$i.connect(u_b0.ifc_b1.p_b_br2_$i);\n";
     }
    elsif( $i > 35 && $i <= 50) {
       print FH " sg_b0.s_b_br1_$i.connect(u_b1.ifc_b0.p_b_br1_$i [ $val_ps1:$val_ps2 ] );\n";
       print FH " sg_b0.s_b_$i.connect(u_b1.ifc_b0.p_b_$i [ $val_ps1:$val_ps2 ]);\n";
     }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
       print FH " csl_unit top {\n";                         #third level
       print FH "  sg_b sg_top1;\n";
       print FH "  sg_b sg_top2;\n";
       print FH "  top1 top1_i;\n";
       print FH "    top() {\n";
    if($i > 0 && $i <= 15) {
       print FH " sg_top1.s_b1_$i.connect(top1_i.ifc_b11.p_b1_$i [$val_ps1:$val_ps2]);\n";
      
     }
     elsif( $i > 15 && $i <= 30) {
    
        print FH " sg_top2.s_b2_$i.connect(top1_i.ifc_b12.p_b2_$i [$val_ps1:$val_ps2]);\n";
     }
    elsif( $i > 30 && $i <= 35) {
        print FH " sg_top1.s_b_br1_$i.connect(top1_i.ifc_b12.p_b_br1_$i);\n";
        print FH " sg_top1.s_b_br2_$i.connect(top1_i.ifc_b12.p_b_br2_$i);\n";
     }
    elsif( $i > 35 && $i <= 50) {
       print FH " sg_top2.s_b_br1_$i.connect(top1_i.ifc_b11.p_b_br1_$i [ $val_ps1:$val_ps2 ]);\n";
       print FH " sg_top2.s_b_$i.connect(top1_i.ifc_b11.p_b_$i [ $val_ps1:$val_ps2 ]);\n";
     }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
   }

 if($i >50  && $i <=100){    

          print FH "csl_bitrange br1($val2);\n";
          print FH "csl_bitrange br2($val3);\n\n";
my $val_ps1=int(rand($val2));
my $val_ps2=int(rand($val2)); 
my $val_ps21=int(rand($val2));
my $val_ps22=int(rand($val2));
my $val_ps32=int(rand($val3));
my $val_ps42=int(rand($val3));
my $val_ps13=int(rand($val2));
my $val_ps23=int(rand($val2));
my $val_ps33=int(rand($val2));
my $val_ps43=int(rand($val3));
my $val_ps14=int(rand($val3));
my $val_ps24=int(rand($val3));
my $val_ps34=int(rand($val3));
my $val_ps44=int(rand($val3));        
                        
                                
           print FH "csl_interface ifc_b {\n";   
    
    if($i > 50 && $i <= 65) {
          
       print FH "csl_port p_b1_$i(output,$val2);\n";
       print FH "csl_port p_b2_$i(output,$val2);\n";
     }
     elsif( $i > 65 && $i <= 80) {

       print FH "csl_port p_b1_$i(input,br1);\n";
       print FH "csl_port p_b2_$i(input,br2);\n";
     }
    elsif( $i > 80 && $i <= 85) {
       print FH "csl_port p_b_br1_$i(output,$val2);\n";
       print FH "csl_port p_b_br2_$i(output,$val3);\n";
   }
    elsif( $i > 85 && $i <= 100) {
       print FH "csl_port p_b_br1_$i(input,br2);\n";
       print FH "csl_port p_b_$i(output,$val3);\n";
   }
       print FH " ifc_b() {\n";
       print FH "  }\n";        
       print FH "};\n";        
       print FH "\n";
    print FH "csl_unit u_b {\n";     #first  level
    print FH "  ifc_b ifc_b0;\n";
    print FH "  ifc_b ifc_b1;\n";
    print FH " u_b(){\n";
    print FH "  }\n";
    print FH "};\n";
    print FH "\n";

 print FH "csl_signal_group sg_b{\n";

   if($i > 50 && $i <= 65) {

      if($val_ps1 >= $val_ps2){
       my $val_ps_1=($val_ps1 - $val_ps2)+1;
       print FH "csl_signal s_b1_$i($val_ps_1);\n";
       print FH "csl_signal s_b2_$i($val2);\n";
         }
       else{
       my $val_ps_1=($val_ps2 - $val_ps1)+1;
       print FH "csl_signal s_b1_$i($val_ps_1);\n";
       print FH "csl_signal s_b2_$i($val2);\n";
           }
     }
     elsif( $i > 65 && $i <= 80) {

        if($val_ps21 >= $val_ps22){
       my $val_ps_2=($val_ps21 - $val_ps22)+1;
          print FH "csl_signal s_b1_$i($val_ps_2);\n";
         }
       else{
        my $val_ps_2=($val_ps22 -$val_ps21)+1;
       print FH "csl_signal s_b1_$i($val_ps_2);\n";
        }
       if($val_ps32 >= $val_ps42){
       my $val_ps_3=($val_ps32 - $val_ps42)+1;
          print FH "csl_signal s_b2_$i($val_ps_3);\n";
          } 
       else {
       my $val_ps_3=($val_ps42 -$val_ps32)+1;
       print FH "csl_signal s_b2_$i($val_ps_3);\n";
        }
     }
    elsif( $i > 80 && $i <= 85) {

      if($val_ps13 >= $val_ps23){
       my $val_ps_4=($val_ps13 - $val_ps23)+1;
           print FH "csl_signal s_b_br1_$i($val_ps_4);\n";
        }
       else{
         my $val_ps_4=($val_ps23 -$val_ps13)+1;
           print FH "csl_signal s_b_br1_$i($val_ps_4);\n";
          }
     if($val_ps33 >= $val_ps43){
       my $val_ps_5=($val_ps33 - $val_ps43)+1;
           print FH "csl_signal s_b_br2_$i($val_ps_5);\n";
       }
     else{
        my $val_ps_5=($val_ps43 -$val_ps33)+1;
       print FH "csl_signal s_b_br2_$i($val_ps_5);\n";
       }
      }
      
    elsif( $i > 85 && $i <= 100) {


         if($val_ps14 >= $val_ps24){
          my $val_ps_6=($val_ps14 -$val_ps24)+1;
       print FH "csl_signal s_b_br1_$i($val_ps_6);\n";
       }
        else{
        my $val_ps_6=($val_ps24 -$val_ps14)+1;
       print FH "csl_signal s_b_br1_$i($val_ps_6);\n";
       }
        if($val_ps34 >= $val_ps44){
          my $val_ps_7=($val_ps34 -$val_ps44)+1;
       print FH "csl_signal s_b_$i($val_ps_7);\n";
      }
       else{
        my $val_ps_7=($val_ps44 -$val_ps34)+1;
       print FH "csl_signal s_b_$i($val_ps_7);\n";
      }

       }
     print FH " sg_b() {\n";
       print FH "  }\n";
       print FH "};\n";
   
       print FH " csl_unit top1 {\n";               #second level
       print FH " ifc_b ifc_b11;\n";
       print FH " ifc_b ifc_b12;\n";
       print FH " u_b u_b0;\n";
       print FH " u_b u_b1;\n";
       print FH " sg_b sg_b0;\n";
       print FH "   top1() {\n";

     if($i > 50 && $i <= 65) {
       print FH " sg_b0.s_b1_$i.connect( u_b0.ifc_b0.p_b1_$i [ $val_ps1:$val_ps2 ] );\n";
       print FH " sg_b0.s_b2_$i.connect( u_b0.ifc_b0.p_b2_$i);\n";
       
     }
     elsif( $i > 65 && $i <= 80) {
       print FH " sg_b0.s_b1_$i.connect(u_b1.ifc_b1.p_b1_$i [$val_ps21:$val_ps22 ]);\n";
       print FH " sg_b0.s_b2_$i.connect(u_b1.ifc_b1.p_b2_$i [$val_ps32:$val_ps42 ]  );\n";
     }
    elsif( $i > 80 && $i <= 85) {
        print FH " sg_b0.s_b_br1_$i.connect(u_b0.ifc_b1.p_b_br1_$i [$val_ps13:$val_ps23 ]);\n";
       print FH " sg_b0.s_b_br2_$i.connect(u_b0.ifc_b1.p_b_br2_$i [$val_ps33:$val_ps43 ]);\n";
     }
    elsif( $i > 85 && $i <= 100) {
       print FH " sg_b0.s_b_br1_$i.connect(u_b1.ifc_b0.p_b_br1_$i [$val_ps14:$val_ps24 ] );\n";
       print FH " sg_b0.s_b_$i.connect(u_b1.ifc_b0.p_b_$i [$val_ps34:$val_ps44 ]);\n";
     }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n"; 

       print FH " csl_unit top {\n";                         #third level
       print FH "  sg_b sg_top1;\n";
       print FH "  sg_b sg_top2;\n";
       print FH "  top1 top1_i;\n";
       print FH "    top() {\n";

    if($i > 50 && $i <= 65) {
       print FH " sg_top1.s_b1_$i.connect(top1_i.ifc_b11.p_b1_$i [$val_ps1:$val_ps2]);\n";
      
     }
     elsif( $i > 65 && $i <= 80) {
    
         print FH " sg_top2.s_b2_$i.connect(top1_i.ifc_b12.p_b2_$i [$val_ps21:$val_ps22]);\n";
         print FH " sg_b0.s_b2_$i.connect(u_b1.ifc_b1.p_b2_$i [$val_ps32:$val_ps42 ]  );\n";
     }
    elsif( $i > 80 && $i <= 85) {
        print FH " sg_top1.s_b_br1_$i.connect(top1_i.ifc_b12.p_b_br1_$i [$val_ps13:$val_ps23] );\n";
        print FH " sg_top1.s_b_br2_$i.connect(top1_i.ifc_b12.p_b_br2_$i [$val_ps33:$val_ps43] );\n";
     }
    elsif( $i > 85 && $i <= 100) {
       print FH " sg_top2.s_b_br1_$i.connect(top1_i.ifc_b11.p_b_br1_$i [ $val_ps14:$val_ps24 ]);\n";
       print FH " sg_top2.s_b_$i.connect(top1_i.ifc_b11.p_b_$i [ $val_ps34:$val_ps44 ]);\n";
     }
   
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
   }

    if($i >100 && $i<=200)
{

my $val_ps1=0;                         #lower_index
my $val_ps2 =2*int(rand($val2)); 
my $val_ps21=2*int(rand($val2));
my $val_ps22=2*int(rand($val2));
my $val_ps23=2*int(rand($val3));
my $val_ps24=2*int(rand($val3));    
 
       my $val_ps_1=($val_ps2)/2;      #upper index
       my $val_ps_2=($val_ps_1)+1;     #signal_width
       my $val_ps_3=($val_ps21)/2;     #upper_index
       my $val_ps_4=($val_ps_3)+1;     #signal_width
       my $val_ps_5=($val_ps22)/2;
       my $val_ps_6=($val_ps_5)+1;
       my $val_ps_7=($val_ps23)/2;
       my $val_ps_8=($val_ps_7)+1;
       my $val_ps_9=($val_ps24)/2;
       my $val_ps_10=($val_ps_9)+1;
   
                        
           print FH "csl_interface ifc_b {\n";   

 if($i > 100 && $i <= 120) {
          
       print FH "csl_port p_b1_$i(output,$val_ps2);\n";
       print FH "csl_port p_b2_$i(output,$val_ps2);\n";
     }
     elsif( $i > 120 && $i <= 140) {

       print FH "csl_port p_b1_$i(input,$val_ps21);\n";
       print FH "csl_port p_b2_$i(input,$val_ps21);\n";
     }
    elsif( $i > 140 && $i <= 160) {
       print FH "csl_port p_b_br1_$i(output,$val_ps22);\n";
       print FH "csl_port p_b_br2_$i(output,$val_ps22);\n";
   }
    elsif( $i > 160 && $i <= 180) {
       print FH "csl_port p_b_br1_$i(input,$val_ps23);\n";
       print FH "csl_port p_b_$i(output,$val_ps23);\n";
   }
    elsif( $i > 180 && $i <= 200) {
       print FH "csl_port p_b_br1_$i(input,$val_ps24);\n";
       print FH "csl_port p_b_$i(output,$val_ps24);\n";
   }
       print FH " ifc_b() {\n";
       print FH "  }\n";        
       print FH "};\n";        
       print FH "\n";
    print FH "csl_unit u_b {\n";     #first  level
    print FH "  ifc_b ifc_b0;\n";
    print FH "  ifc_b ifc_b1;\n";
    print FH " u_b(){\n";
    print FH "  }\n";
    print FH "};\n";
    print FH "\n";
     
 print FH "csl_signal_group sg_b{\n";

   if($i > 100 && $i <= 120) {

      
       print FH "csl_signal s_b1_$i($val_ps_2);\n";
       print FH "csl_signal s_b2_$i($val_ps_2);\n";
         }
     
     elsif( $i > 120 && $i <= 140) {

         print FH "csl_signal s_b1_$i($val_ps_4);\n";
         print FH "csl_signal s_b2_$i($val_ps_4);\n";
        }
      
    elsif( $i > 140 && $i <= 160) {

         print FH "csl_signal s_b_br1_$i($val_ps_6);\n";
         print FH "csl_signal s_b_br2_$i($val_ps_6);\n";
       }
      
    elsif( $i > 160 && $i <= 180) {

         print FH "csl_signal s_b_br1_$i($val_ps_8);\n";
         print FH "csl_signal s_b_$i($val_ps_8);\n";
      }
    elsif( $i > 180 && $i <= 200) {

         print FH "csl_signal s_b_br1_$i($val_ps_10);\n";
         print FH "csl_signal s_b_$i($val_ps_10);\n";
      }
       print FH " sg_b() {\n";
       print FH "  }\n";
       print FH "};\n";

       print FH " csl_unit top1 {\n";               #second level
       print FH " ifc_b ifc_b11;\n";
       print FH " ifc_b ifc_b12;\n";
       print FH " u_b u_b0;\n";
       print FH " u_b u_b1;\n";
       print FH " sg_b sg_b0;\n";
       print FH "   top1() {\n";

     if($i > 100 && $i <= 120) {
       print FH " sg_b0.s_b1_$i.connect( u_b0.ifc_b0.p_b1_$i [$val_ps1:$val_ps_1 ] );\n";
       print FH " sg_b0.s_b2_$i.connect( u_b0.ifc_b0.p_b2_$i [$val_ps_1:$val_ps2] );\n";
       
     }
     elsif( $i > 120 && $i <= 140) {
       print FH " sg_b0.s_b1_$i.connect(u_b1.ifc_b1.p_b1_$i [$val_ps1:$val_ps_3 ]);\n";
       print FH " sg_b0.s_b2_$i.connect(u_b1.ifc_b1.p_b2_$i [$val_ps_3:$val_ps21 ]  );\n";
     }
    elsif( $i > 140 && $i <= 160) {
        print FH " sg_b0.s_b_br1_$i.connect(u_b0.ifc_b1.p_b_br1_$i [$val_ps1:$val_ps_5 ]);\n";
       print FH " sg_b0.s_b_br2_$i.connect(u_b0.ifc_b1.p_b_br2_$i [$val_ps_5:$val_ps22 ]);\n";
     }
    elsif( $i > 160 && $i <= 180) {
       print FH " sg_b0.s_b_br1_$i.connect(u_b1.ifc_b0.p_b_br1_$i [$val_ps1:$val_ps_7 ] );\n";
       print FH " sg_b0.s_b_$i.connect(u_b1.ifc_b0.p_b_$i [$val_ps_7:$val_ps23 ]);\n";
     }
  elsif( $i > 180 && $i <= 200) {
       print FH " sg_b0.s_b_br1_$i.connect(u_b1.ifc_b0.p_b_br1_$i [$val_ps1:$val_ps_9 ] );\n";
       print FH " sg_b0.s_b_$i.connect(u_b1.ifc_b0.p_b_$i [$val_ps_9:$val_ps24 ]);\n";
     }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n"; 

      }
}
#********************************************************************
# sg.sig[ps].connect(ifc.port[ps]);

if($i>200 && $i<=210){
    print FH "//Generated by Monica\n";
    print FH "//Connect SG.signal[part_select]--IFC.port[part_select]\n\n";
    print FH "// TEST $i;\n";
 
my $o = 0;
    print FH " csl_bitrange br1($val1);\n";
    print FH " csl_bitrange br2($val2);\n";        
         
      foreach( my $j=200; $j<=$i; $j++){
          my $k=2*$j;
         print FH " csl_signal_group sg1_$j {\n";
         print FH "   csl_signal  s11_$j($k);\n";
     
         print FH " sg1_$j(){}\n";
         print FH " };\n";

         print FH " csl_interface ifc1_$j {\n";
         print FH "   csl_port p11_$j(input,$j);\n";
         print FH "   csl_port p12_$j(output,$j);\n";
         print FH "   ifc1_$j (){}\n";
         print FH " };\n";
    }
        
         print FH " csl_unit u1{\n";
      foreach( my $j=200; $j<=$i; $j++){
       my $k=$j+1;
       if( $k>200){
         print FH "   ifc1_$j ifc1_i$j;\n";
     }}

         print FH "  u1(){}\n";
         print FH " };\n";
        
         print FH " csl_unit u2{\n";
         print FH "    u1 u1_i;\n";
      foreach( my $j=200; $j<=$i; $j++){
          my $ui=$j-1;
         print FH " sg1_$j sg1_i$j;\n"; 
      }
         print FH " u2(){\n";
    foreach( my $j=200; $j<=$i; $j++){
      my $ui=$j-1;                             #upper_index
      my $li=$ui+1;                           #lower_index
      my $k=$j+1;
      my $k1=2*$j-1;
      
       if( $k>200){
         print FH " sg1_i$j.s11_$j [$o: $ui].connect(u1_i.ifc1_i$k.p11_$j [$o:$ui]);\n";  
         print FH " sg1_i$j.s11_$j [$li: $k1].connect(u1_i.ifc1_i$k.p12_$j [$li:$k1]);\n";    
     }
   }
  
       print FH "}\n";
         print FH " };\n"; 
     }

#**********************************************************************
# sg.sg.sig.connect(ifc.port[ps]);
if($i>210 && $i<=220){
    print FH "//Generated by Monica\n";
    print FH "//Connect SG.sg1.signal--IFC.port[part_select]\n\n";
    print FH "// TEST $i;\n";
my $o=0;
     print FH " csl_bitrange br1($val1);\n";
     print FH " csl_bitrange br2($val2);\n"; 
 foreach( my $j=210; $j<=$i; $j++){
       my $k=2*$j; 
         print FH " csl_signal_group sg1_$j {\n";
         print FH "   csl_signal  s11_$j($j);\n";
         print FH "   csl_signal  s12_$j($j);\n";
     
         print FH " sg1_$j(){}\n";
         print FH " };\n";
         print FH " csl_interface ifc1_$j {\n";
         print FH "   csl_port p11_$j(input,$j);\n";
         print FH "   csl_port p12_$j(output,$k);\n";
         print FH "   ifc1_$j (){}\n";
         print FH " };\n";
    }
     
          print FH " csl_unit u1{\n";
 foreach( my $j=210; $j<=$i; $j++){
         print FH "   ifc1_$j ifc1_i$j;\n";
     }
         print FH "  u1(){}\n";
         print FH " };\n";
        
    print FH " csl_signal_group sg2{\n";
    print FH "  csl_signal s21(br1);\n";
    print FH "  csl_signal s22(br2);\n";
    foreach( my $j=210; $j<=$i; $j++){
      
         print FH " sg1_$j sg1_i$j;\n"; 
     
      }
    print FH " sg2(){}\n";
    print FH " };\n";
   
   print FH " csl_unit u2{\n";
   print FH "  sg2 sg2_i2;\n";
   print FH "  u2(){}\n";
   print FH " };\n";
   

         print FH " csl_unit u3{\n";
         print FH "    u1 u1_i;\n";
         print FH "    sg2 sg2_i;\n"; 
         print FH "    u3(){\n";
    foreach( my $j=210; $j<=$i; $j++){
        my $ui=$j-1;                             #upper_index
        my $k=2*$j; 
         print FH " sg2_i.sg1_i$j.s11_$j.connect(u1_i.ifc1_i$j.p11_$j [$o:$ui]);\n";  
         print FH " sg2_i.sg1_i$j.s12_$j.connect(u1_i.ifc1_i$j.p12_$k [$o:$ui]);\n";    
    
   }   
    print FH " }\n";
    print FH " };\n";
}

#**********************************************************
# sg.sg.sig[ps].connect(ifc.port[ps]);

if($i>220 && $i<=230){
    print FH "//Generated by Monica\n";
    print FH "//Connect SG.sg1.signal[part_select]--IFC.port[part_select]\n\n";
    print FH "// TEST $i;\n";
my $o=0;
     print FH " csl_bitrange br1($val1);\n";
     print FH " csl_bitrange br2($val2);\n";

foreach( my $j=220; $j<=$i; $j++){
          my $k=2*$j;
         print FH " csl_signal_group sg1_$j {\n";
         print FH "   csl_signal  s11_$j($k);\n";
     
         print FH " sg1_$j(){}\n";
         print FH " };\n";

         print FH " csl_interface ifc1_$j {\n";
         print FH "   csl_port p11_$j(input,$j);\n";
         print FH "   csl_port p12_$j(output,$j);\n";
         print FH "   ifc1_$j (){}\n";
         print FH " };\n";
    }
       
         print FH " csl_unit u1{\n";
     foreach( my $j=220; $j<=$i; $j++){
     #  my $k=$j+1;
     #  if( $k>22){
           print FH "   ifc1_$j ifc1_i$j;\n";
      #    }
   }
       
         print FH "  u1(){}\n";
         print FH " };\n";

    print FH " csl_signal_group sg2{\n";
    print FH "  csl_signal s21(br1);\n";
    print FH "  csl_signal s22(br3);\n";
    foreach( my $j=220; $j<=$i; $j++){
         
         print FH " sg1_$j sg1_i$j;\n"; 
      }
    print FH " sg2(){}\n";
    print FH " };\n";

         print FH " csl_unit u2{\n";
         print FH "    u1 u1_i;\n";
         print FH "    sg2 sg2_i;\n"; 
         print FH " u2(){\n";
    foreach( my $j=220; $j<=$i; $j++){
      my $ui=$j-1;                             #upper_index
      my $li=$ui+1;                           #lower_index
    #  my $k=$j+1;
      my $k1=2*$j-1;
      
  
         print FH " sg2_i.sg1_i$j.s11_$j [$o:$ui].connect(u1_i.ifc1_i$j.p11_$j [$o:$ui]);\n";  
         print FH " sg2_i.sg1_i$j.s11_$j [$li:$k1].connect(u1_i.ifc1_i$j.p12_$j [$li:$k1]);\n";    
  
   }   
    print FH " }\n";
    print FH " };\n";
}
}
    close(FH);
   
}


#!/usr/bin/perl

#Author Monica
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

 
sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <=60; $i++) {
    &main($i);
 
}

sub main {
    my $i = $_[0];
    my $test_name = "concat_expr_test".$i."_illegal.csl";
    &createCslFile($test_name, $i);
}
sub createCslFile {
    my($test_name, $i) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen";
    if($i==1){
        print ("Generated path: $path/concat_expr_invalid/ \n");}
    my $val = int(rand(300));
    if($val == 0) { $val = 1; }
    my $val1= int(rand(200));
    if($val1== 0) { $val1= 1; }
    my $val2 = int(rand(10));
    if($val2==0) {$val2=1;}
    if($test_name=~/(_illegal)/){
        &mkDir("$path/concat_expr_invalid");
        open(FH,">$path/concat_expr_invalid/$test_name");
    }

#*************************************************************
# {concat_expr with numeric_expr} = port/signal
# op_expr = {concat_expr};
# {concat_expr with numeric_expr} ={concat_expr}

    if( $i >0 && $i<=10){
    print FH "// Generated by Monica\n";
    print FH "// Concatenation used in assign and f2a\n\n";
    print FH "// INVALID TEST $i;\n\n";
    
        print FH " csl_register r_cnt1_$i {\n";
        print FH " r_cnt1_$i (){\n";
        print FH "  set_type(counter);\n";
        print FH "  set_width($val2);\n";
        print FH "  add_logic(count_direction,up);\n";
        print FH "  }\n";
        print FH "};\n";
   
        print FH " csl_register r_cnt2_$i {\n";
        print FH " r_cnt2_$i (){\n";
        print FH "  set_type(counter);\n";
        print FH "  set_width($val1);\n";
        print FH "  add_logic(count_direction,down);\n";
        print FH "  }\n";
        print FH "};\n";
   
        print FH " csl_unit u_a {\n";
        my $v1= 2 * $val1;
        my $v2= 3 * $val2;
        print FH "  csl_port en1_in(input), en2_in(input);\n";
       
      foreach( my $j=1; $j<=$i; $j++){
        print FH "  csl_port out_data$j (output, $v1), out_addr$j (output, $v2);\n";
    }
        print FH "  csl_port out_1(output,3);\n";
    
     foreach( my $j=1; $j<=$i; $j++){
        print FH "  csl_signal s1_out$j ($val2), s2_out$j ($val1);\n";
    }
        foreach( my $j=1; $j<=$i; $j++){
        print FH "  r_cnt1_$i cnt1_$j;\n";
        print FH "  r_cnt2_$i cnt2_$j;\n";
    }
        print FH "  u_a() {\n";
 foreach( my $j=1; $j<=$i; $j++){
        print FH " {s1_out,3'b010}= {out_data$j,out_1};          // numeric_expression on LHS \n";
        print FH " {s1_out,s2_out}= out_addr$j;                  //diffrent widths\n";
    }
        print FH "  }\n";
        print FH "};\n";
    
        print FH " csl_register_file rf_$i {\n";
        print FH " rf_$i(){\n";
        print FH "  set_width($v1);\n";
        print FH "  set_depth(1<<$v2);\n";
        print FH "  }\n";
        print FH "};\n";

        print FH " csl_unit u_b{\n";
        print FH " csl_port wr_en(input), rd_en(input,2);\n";
        my $v3= 2* ($val1 + $val1);
        my $v4= 2* $val1 + 3* $val2;
      foreach( my $j=1; $j<=$i; $j++){
        print FH " csl_port in_data$j (input, $v1), wr_addr$j (input, $v2),rd0_addr$j(input,$v2), rd1_addr$j(input, $v2) ;\n";
        print FH " csl_signal wr_sig$j($v2);\n";
    }
 foreach( my $j=1; $j<=$i; $j++){
        print FH " csl_port p1_data$j(output,$v3);\n";
        print FH " csl_port p2_data$j(output, $v4);\n";
    }
     foreach( my $j=1; $j<=$i; $j++){
         print FH " rf_$i rf_$j(.data_in(in_data$j),.wr_en(wr_en),.wr_addr(wr_addr$j),.rd_addr0(rd0_addr$j),.rd_addr1(rd1_addr$j));\n";
    }
    print FH "  u_b() {\n";
     foreach( my $j=1; $j<=$i; $j++){
   
     print FH "  wr_sig$j= {wr_addr$j,in_data};                                  //different widths \n";
     print FH " {p1_data$j & p2_data$j}={rf_$j.data_out0, rf_$j.data_out1};      // illegal operation: on LHS concat_expr\n";
   
 } 
     
     print FH "  }\n";
     print FH "};\n";       
    
    print FH " csl_unit top_$i {\n";
    print FH " csl_signal s1($val1), s2($val2), s3($val2), s4($val2);\n";
  foreach( my $j=1; $j<=$i; $j++){
    print FH " u_a ua_i$j(.out_data$j({s1,s1}),.out_addr$j({3'b111,s2}));                                      //different widths\n";
    print FH " u_b ub_i$j(.in_data$j({s2,s1}),.wr_addr$j({s2}),.rd0_addr$j({s3,s4}),.rd1_addr$j({s4}));        //different widths\n";
}
    print FH "   top_$i(){}\n";
    print FH " };\n"; 
    }


#*************************************************************
# ifc={concat_expr}
# sg={concat_expr}

    if($i>10 && $i<=20){
    print FH "//Generated by Monica\n";
    print FH "// Concatenation used in assign \n\n";
    print FH "// INVALID TEST $i;\n\n";
print FH " csl_interface ifc_$i {\n";
foreach(my $j=11; $j<=$i; $j++){
print FH "  csl_port p_in$j(input,$j);\n"; 
print FH "  csl_port p_out$j(output,$j);\n";
}
print FH "   ifc_$i(){}\n";
print FH "};\n";

print FH " csl_signal_group sg_$i {\n";
foreach(my $j=11; $j<=$i; $j++){
print FH "  csl_signal  sg1_$j($j);\n";
print FH "  csl_signal  sg2_$j($j);\n"; 
}
print FH "   sg_$i(){}\n";
print FH "};\n";

print FH " csl_unit u1_$i {\n";

print FH "   csl_port  p1(input), p2(input);\n";
foreach(my $j=11; $j<=$i; $j++){
    my $v1= 2*$j;
    my $v2= 5*$j;
    my $v3= 3*($j +2);

print FH "   csl_signal s1_$j($v1),s2_$j($v2),s3_$j($v3);\n";
}
print FH "  ifc_$i ifc_i1;\n";
print FH " ifc_$i ifc_i2;\n";
print FH "  u1_$i(){\n";
foreach(my $j=11; $j<=$i; $j++){
   
    print FH " ifc_i2={s1_$j/2, s1_$j/2};     //illegal LHS object\n";
    print FH " ifc_i1={s2_$j};                //illegal LHS object\n";
}
print FH "  }\n";
print FH "};\n";

print FH " csl_unit u2_$i {\n";
foreach(my $j=11; $j<=$i; $j++){
    my $v1= 2*$j;
    my $v2= 5*$j;
    my $v3= 6*$j;

print FH " csl_port p1_$j(input,$v1), p2_$j(input,$v2), p3_$j(output,$v3);\n";
}
print FH " csl_port p4(output),p5(output);\n"; 
print FH " sg_$i sg_i1;\n";
print FH " sg_$i sg_i2;\n";
print FH " ifc_$i ifc_i3;\n";
print FH " u2_$i(){\n";
foreach(my $j=11; $j<=$i; $j++){
print FH " {sg_i1,sg_i1} ={ifc_i3.p_in$j, p1_$j,p2_$j};                  //illegal LHS object\n";
print FH " ifc_i3 ={sg_i1.sg1_$j,sg_i2.sg1_$j};                           //illegal LHS object\n";
print FH " p3_$j ={sg_i2,sg_i1};                                          //illegal object on concat_expr\n";
}
print FH "  }\n";
print FH "};\n";

print FH " csl_unit u_top_$i {\n";
print FH " sg_$i sg_i3;\n";
print FH " sg_$i sg_i4;\n";
print FH " u1_$i u1_i;\n";
print FH " u2_$i u2_i;\n";
print FH " u_top_$i (){\n";
foreach(my $j=11; $j<=$i; $j++){
    my $v1= 2*$j;
    my $v2= 5*$j;
    my $v3= 3*($j +2);
 }
foreach(my $j=11; $j<=$i; $j++){
    print FH " u1_i.s1_$j={u2_i.ifc_i3,u1_1.ifc_i1};                                     //illegal object on concat_expr \n";
    print FH " u2_i.p2_$j={u1_i.ifc_i1};                                                 //illegal object on concat_expr\n";
    print FH " {u2_i.sg_i1.sg1_$j, u2_i.sg_i2.sg1_$j}={u1_i.ifc_i1 & u1_i.ifc_i2};       //illegal object on concat_expr\n";
}
print FH "  }\n";
print FH "};\n";
}

#************************************************
# ifc.ifc1={concat_expr}
# sg.sg1={concat_expr}

  if($i>20 && $i<=30){
    print FH "//Generated by Monica\n";
    print FH "// Concatenation with HIDs used in assign \n\n";
    print FH "// INVALID TEST $i;\n\n";
print FH " csl_interface ifc1_$i {\n";
foreach(my $j=21; $j<=$i; $j++){
 my $v11=3*$j;
print FH "  csl_port p_in$j(input,$v11);\n"; 
print FH "  csl_port p_out$j(output,$v11);\n";
}
print FH "   ifc1_$i(){}\n";
print FH "};\n";

print FH " csl_signal_group sg1_$i {\n";
foreach(my $j=21; $j<=$i; $j++){

print FH "  csl_signal  sig1_$j($j);\n";
print FH "  csl_signal  sig2_$j($j);\n"; 
}
print FH "   sg1_$i(){}\n";
print FH "};\n";

print FH " csl_interface ifc2_$i {\n";
foreach(my $j=21; $j<=$i; $j++){
   
print FH "  csl_port p_in$j(input,$j);\n"; 
print FH "  csl_port p_out$j(output,$j);\n";
}
print FH "  ifc1_$i ifc1_i1;\n";

print FH "   ifc2_$i(){}\n";
print FH "};\n";

print FH " csl_signal_group sg2_$i {\n";
foreach(my $j=21; $j<=$i; $j++){
 my $v11=3*$j;
print FH "  csl_signal  sig1_$j($v11);\n";
print FH "  csl_signal  sig2_$j($v11);\n"; 
}
print FH "  sg1_$i sg1_i1;\n";

print FH "   sg2_$i(){}\n";
print FH "};\n";

    print FH " csl_unit u1_$i {\n";
    print FH "  ifc2_$i ifc2_i1;\n";
    print FH "  sg2_$i sg2_i1;\n";
    print FH " u1_$i(){\n";
    print FH " }\n";
    print FH "};\n";


    print FH " csl_unit u_top_$i {\n";
    print FH "  ifc2_$i ifc2_i1;\n";
    print FH "  sg2_$i sg2_i1;\n";
    print FH " u1_$i u1_i1;\n";
    print FH " u1_$i u1_i2;\n";
    print FH " u_top_$i(){\n";
foreach(my $j=21; $j<=$i; $j++){
    print FH " ifc2_i1.ifc1_i1={sg2_i1.sg1_i1.sig1_$j,sg2_i1.sg1_i1.sig1_$j,sg1_i1.sg1_i1.sig1_$j};   //illegal LHS object\n";
    print FH " sg2_i1.sg1_i1 ={ifc2_i1.p_out$j,ifc2_i1.p_out$j};                                      //illegal LHS object\n";
    print FH " sg2_i1={ifc2_i1.p_in$j,u1_i1.ifc2_i1};                                                 //illegal LHS object\n";
    print FH " u1_i1.ifc2_i1.ifc1_i1.p_out$j={u1_i2.sg2_i1.sg1_i1 + u1_i2.sg2_i1.sg1_i1};             //illegal object on concat_expr\n"; 
    print FH " u1_i1.sg2_i1.sig2_$j={ifc2_i1.ifc1_i1, ifc2_i1};                                       //illegal object on concat_expr\n";
}
    print FH " }\n";
    print FH "};\n";
}
#************************************************
# port/signal[part_select]={concat_expr}
# unit.ifc/sg.port/sig[part_select]={concat_expr}

 if($i>30 && $i<=40){
    print FH "//Generated by Monica\n";
    print FH "// Concatenation with part_select used in assign \n\n";
    print FH "// INVALID TEST $i;\n\n";
    my $o=0;
print FH " csl_interface ifc1_$i {\n";
foreach(my $j=31; $j<=$i; $j++){
 my $v11=2*$j;
print FH "  csl_port p_in$j(input,$v11);\n"; 
print FH "  csl_port p_out$j(output,$v11);\n";
}
print FH "   ifc1_$i(){}\n";
print FH "};\n";

print FH " csl_signal_group sg1_$i {\n";
foreach(my $j=31; $j<=$i; $j++){

print FH "  csl_signal  sig1_$j($j);\n";
print FH "  csl_signal  sig2_$j($j);\n"; 
}
print FH "   sg1_$i(){}\n";
print FH "};\n";

print FH " csl_interface ifc2_$i {\n";
foreach(my $j=31; $j<=$i; $j++){
    my $v12 =4*$j;
print FH "  csl_port p_in$j(input,$v12);\n"; 
print FH "  csl_port p_out$j(output,$v12);\n";
}
print FH "  ifc1_$i ifc1_i1;\n";

print FH "   ifc2_$i(){}\n";
print FH "};\n";

print FH " csl_signal_group sg2_$i {\n";
foreach(my $j=31; $j<=$i; $j++){
 my $v11=2*$j;
print FH "  csl_signal  sig1_$j($v11);\n";
print FH "  csl_signal  sig2_$j($v11);\n"; 
}
print FH "  sg1_$i sg1_i1;\n";

print FH "   sg2_$i(){}\n";
print FH "};\n";

    print FH " csl_unit u1_$i {\n";
    print FH "  ifc2_$i ifc2_i1;\n";
    print FH "  sg2_$i sg2_i1;\n";
    print FH " u1_$i(){\n";
    print FH " }\n";
    print FH "};\n";


    print FH " csl_unit u_top_$i {\n";
    print FH "  ifc2_$i ifc2_i1;\n";
    print FH "  sg2_$i sg2_i1;\n";
    print FH " u1_$i u1_i1;\n";
    print FH " u1_$i u1_i2;\n";
    print FH " u_top_$i(){\n";
foreach(my $j=31; $j<=$i; $j++){
    my $v12=4*$j;
    my $v11=2*$j;
    my $j1=$j-1;
    my $v11_=$v11-1;
    my $v12_=$v12-1;
    print FH " ifc2_i1={sg2_i1.sig1_$j [$o:$j1],sg2_i1.sig1_$j [$j:$v11_],sg2_i1.sig2_$j [$o:$j1],sg2_i1.sig2_$j [$j:$v11_]};            //illegal LHS object\n";
    print FH " sg2_i1.sig1_$j={ifc2_i1.p_in$j [$o:$j1] & ifc2_i1.ifc1_i1.p_in$j [$o:$v11],1'b0 };                                        //error: different widths\n";

    print FH " ifc2_i1.ifc1_i1.p_out$j [$o:$v11_]={{sg2_i1.sg1_i1.sig1_$j [$o:$j]},{sg2_i1.sg1_i1.sig2_$j [$o:$j]}};                     //error: different widths\n";
  
    print FH " u1_i1.ifc2_i1.ifc1_i1.p_out$j [$j1:$v12_]={u1_i2.sg2_i1.sg1_i1.sig1_$j [$o:$j] + u1_i2.sg2_i1.sg1_i1.sig2_$j [$o:$j1]};   //error: different widths on operation expression}\n"; 
    print FH " {u1_i1.sg2_i1.sig2_$j ,u1_i1.sg2_i1.sig1_$j} ={ifc2_i1.p_in$j [$j1: 100000111100],1'b1};                                  //error: number to big for upper index\n";
}
    print FH " }\n";
    print FH "};\n";
}
#**********************************************************
# f2a cases
 if($i>40 && $i<=50){
    print FH "//Generated by Monica\n";
    print FH "// Concatenation used in f2a \n\n";
    print FH "// INVALID TEST $i;\n\n";

print FH " csl_interface ifc1_$i {\n";
foreach(my $j=41; $j<=$i; $j++){
 my $v11=3*$j;
print FH "  csl_port p_in$j(input,$v11);\n"; 
print FH "  csl_port p_out$j(output,$v11);\n";
}
print FH "   ifc1_$i(){}\n";
print FH "};\n";

print FH " csl_signal_group sg1_$i {\n";
foreach(my $j=41; $j<=$i; $j++){

print FH "  csl_signal  sig1_$j($j);\n";
print FH "  csl_signal  sig2_$j($j);\n"; 
}
print FH "   sg1_$i(){}\n";
print FH "};\n";

print FH " csl_interface ifc2_$i {\n";
foreach(my $j=41; $j<=$i; $j++){
   
print FH "  csl_port p_in$j(input,$j);\n"; 
print FH "  csl_port p_out$j(output,$j);\n";
}
print FH "  ifc1_$i ifc1_i1;\n";

print FH "   ifc2_$i(){}\n";
print FH "};\n";

print FH " csl_signal_group sg2_$i {\n";
foreach(my $j=41; $j<=$i; $j++){
 my $v11=3*$j;
print FH "  csl_signal  sig1_$j($v11);\n";
print FH "  csl_signal  sig2_$j($v11);\n"; 
}
print FH "  sg1_$i sg1_i1;\n";

print FH "   sg2_$i(){}\n";
print FH "};\n";

    print FH " csl_unit u1_$i {\n";
    my $v_1=2*$val;
    my $v_2=4*($val1 + $val2);
    print FH "  csl_port p11(input,$v_1);\n";
    print FH "  csl_port p12(output,$v_2);\n";
    print FH "  ifc2_$i ifc2_i1;\n";
    print FH "  sg2_$i sg2_i1;\n";
    print FH " u1_$i(){\n";
    print FH " }\n";
    print FH "};\n";


    print FH " csl_unit u2_$i {\n";
    my $v_1=2*$val;
    my $v_2=4*($val1 + $val2);
    print FH "  csl_port p21(input,$v_1);\n";
    print FH "  csl_port p22(output,$v_2);\n";
    print FH "  ifc2_$i ifc2_i1;\n";
    print FH "  sg2_$i sg2_i1;\n";
foreach(my $j=41; $j<=50; $j++){
    if($j==41){
        print FH " u1_$i u1_i1(.ifc2_i1.ifc1_i1.p_out$j({u1_i2.sg2_i1.sg1_i1.sig1_$j, u1_i2.sg2_i1.sg1_i1.sig2_$j}),                 // different widths\n";
        print FH "             .ifc2_i1.ifc1_i1.p_in$j({sg2_i1.sg1_i1}));                                                            //illegal actual parameter\n";    
        print FH " u1_$i u1_i2(.ifc2_i1.ifc1_i1({ifc2_i1.p_out$j ^ sg2_i1.sg1_i1.sig2_$j, ifc2_i1.p_out$j & sg2_i1.sg1_i1.sig2_$j}), //illegal formal parameter\n";
        print FH "             .ifc2_i1.ifc1_i1.p_in$j({{ifc2_i1.p_in$j}, sg2_i1.sg1_i1.sig1_$j}));                                  //different widths\n";      
    print FH " u2_$i(){\n";
}}
    print FH " }\n";
    print FH "};\n";

    print FH " csl_unit top {\n";
       
    print FH "   csl_signal s1($val),s2($val) ;\n";
    print FH "   csl_signal s3($val1),s4($val2);\n";
    print FH "   csl_signal s5($val1),s6($val2);\n";
    print FH "    u1_$i u1_i3 (.p11({s2,s1}),.p12({s3,s4}));             //different widths\n";
    print FH "    u2_$i u2_i1 (.p21({s2,s2}),.p22({s1,s2,s5,s6}));       //different widths\n";
    print FH " top(){}\n";
    print FH " };\n";
}
#*************************************************************
# unit,rf,fifo in concat_expr
 if($i>50 && $i<=60){
    print FH "//Generated by Monica\n";
    print FH "// Concatenation with unit/rf/fifo \n\n";
    print FH "// INVALID TEST $i;\n\n";

    print FH "csl_register_file rf1_$i {\n";
    print FH "  rf1_$i(){\n";
    print FH "  set_width($val2);\n";
    print FH "  set_depth(1<<30);\n";
    print FH " }\n";
    print FH " };\n";

    print FH "csl_fifo f1_$i {\n";
    print FH "  f1_$i(){\n";
    print FH "  set_width($val1);\n";
    print FH "  set_depth(1<<30);\n";
    print FH " }\n";
    print FH " };\n";

    print FH "csl_unit u1_$i {\n";
    foreach (my $j=51; $j<=$i; $j++){
    print FH " rf1_$i rf1_i$j;\n";
    print FH " rf1_$i rf2_i$j;\n";
    print FH " f1_$i  f1_i$j;\n";
}
    print FH "  u1_$i(){\n";
 foreach (my $j=51; $j<=$i; $j++){
    print FH " f1_i$j={rf1_i$j.data_out0,data_out1};      //illegal LHS object\n";
    print FH " rf1_i$j={f1_i$j, rf2_i$j};                 //illegal LHS and RHS objects \n";
}
    print FH " }\n";
    print FH " };\n";

    print FH "csl_unit u2_$i {\n";
  foreach (my $j=51; $j<=$i; $j++){
    print FH " rf1_$i rf3_i$j;\n";
    print FH " u1_$i u1_i$j;\n";
    print FH " f1_$i  f2_i$j;\n";
}
    print FH "  u2_$i(){\n";
 foreach (my $j=51; $j<=$i; $j++){
    print FH " u1_i$j={rf3_i$j,f2_i$j};                       //illegal LHS and RHS objects\n";
    print FH " rf3_i$j={u1_i$j,3'b111};                      //illegal LHS and RHS objects\n";
    print FH " {u1_i$j.f1_i$j, f2_i$j}={ u1_i$j.rf1_i$j };    //illegal LHS and RHS objects\n";
}
    print FH " }\n";
    print FH " };\n";
}

    close(FH);
}

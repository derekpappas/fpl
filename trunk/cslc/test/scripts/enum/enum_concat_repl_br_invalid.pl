#!/usr/bin/perl

use strict;

use Switch;               # the switch/case command
use File::Find;           # traversing the directory tree
use File::Basename;       # retrieving the basename of a directory
use File::Path;           # mkpath command

my $ENUM         = "enum_";
my $cslEnum      = "csl_enum";
my $enumName     = "e";
my $enumItemName = "ei_";

my $ITEMS_NO     = 50;
my $BASE_BIN     = 2;
my $BASE_OCT     = 8;
my $BASE_DEC     = 10;
my $BASE_HEX     = 16;
#my $BASE_ANY     = 10;

my $testDate     = `date "+%d/%m/%G, %T"`;
my $start_time   = time();
my $testName     = "";
my $enumItemsNo;
my $noVerNo;
my $eiValue;

&gen_enum();

print "Generated tests path : csl_test_gen/enum_no_neg_values_valid\n";

sub printHeader{
    my $testName = $_[0];

    print FH "//Test generated by Monica\n";
    print FH "//Test cases from : csl_enum_matr.odg\n";
    print FH "//Test name: $testName\n";
    print FH "//Date: $testDate\n";
    print FH "//csl_enum with concat_expr, repl_expr and csl_bitrange is created";
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
    #print "[INFO] Created directory $dirName\n";
}

sub createCSLfile{
    $testName = $_[0];
    &mkDir("$ENV{WORK}/test/csl_test_gen/enum_concat_repl_br_invalid");
    open( FH, ">$ENV{WORK}/test/csl_test_gen/enum_concat_repl_br_invalid/$testName");
    &printHeader($testName);
    print FH "\n";
    my $no =int(rand(20)+1);
    print FH " csl_bitrange br($no);\n";
    print FH "$cslEnum e {\n";
}

sub closeCSLfile{
    print FH "};\n";       
}

sub generateRandomNumber{
    my ($_digits, $_base) = @_;
    $noVerNo = "";

    for( my $_noDigits = 0; $_noDigits < $_digits; $_noDigits++) {
        my $number = int( rand( $_base));
        $noVerNo .= $number; 
    }

}

sub gen_enum{
    my $_enumItemsNo;
    my $__enumItemsNo;
    my $_enumItemsNo2;
    my $__enumItemsNo2;
    my $_enumItemsNo3;
    my $__enumItemsNo3;
   

    for( my $enumItemsNo = 2; $enumItemsNo < $ITEMS_NO; $enumItemsNo++) {
        $testName = $ENUM . "concat" . "_" . $enumItemsNo . "_illegal.csl";
        &createCSLfile($testName);
        print FH "     $enumItemName" . "0,\n";
        print FH "     $enumItemName" . "1" . " ={ $enumItemName" . "0}";
        if($enumItemsNo <= 2){
            print FH "\n";
        }
        else {
            print FH ",\n";
        }

    for( $_enumItemsNo = 2; $_enumItemsNo < $enumItemsNo; $_enumItemsNo++) {
            print FH "     $enumItemName" . $_enumItemsNo . " ={ " ;
            for( $__enumItemsNo = 0; $__enumItemsNo < $_enumItemsNo-1; $__enumItemsNo++) {
                print FH "$enumItemName" . $__enumItemsNo . ", ";
            }
            print FH "$enumItemName" . $__enumItemsNo . "}";
            if($_enumItemsNo == $enumItemsNo-1 && $__enumItemsNo == $_enumItemsNo-1) {
                print FH "\n";
            }
            else {
                print FH ",\n ";
            }
	}
     closeCSLfile($testName);
    }
     
     for( my $enumItemsNo2 = 2; $enumItemsNo2 < $ITEMS_NO; $enumItemsNo2++) {
        $testName = $ENUM . "repl" . "_" . $enumItemsNo2 . "_illegal.csl";
        &createCSLfile($testName);
        print FH "     $enumItemName" . "0,\n";
        print FH "     $enumItemName" . "1" . " ={3{ $enumItemName" . "0}}";
        if($enumItemsNo2 <= 2){
            print FH "\n";
        }
        else {
            print FH ",\n";
        }

    for( $_enumItemsNo2 = 2; $_enumItemsNo2 < $enumItemsNo2; $_enumItemsNo2++) {
         my $no =int(rand(20)+1);
            print FH "     $enumItemName" . $_enumItemsNo2 . " ={ $no { " ;
            for( $__enumItemsNo2 = 0; $__enumItemsNo2 < $_enumItemsNo2-1; $__enumItemsNo2++) {
                print FH "$enumItemName" . $__enumItemsNo2 . ", ";
            }
            print FH "$enumItemName" . $__enumItemsNo2 . "}}";
            if($_enumItemsNo2 == $enumItemsNo2-1 && $__enumItemsNo2 == $_enumItemsNo2-1) {
                print FH "\n";
            }
            else {
                print FH ",\n ";
            }
	}
     closeCSLfile($testName);  
    }

 for( my $enumItemsNo3 = 2; $enumItemsNo3 < $ITEMS_NO; $enumItemsNo3++) {
  my $no =int(rand(20)+1);
        $testName = $ENUM . "br" . "_" . $enumItemsNo3 . "_illegal.csl";
      
        &createCSLfile($testName);
        print FH "     $enumItemName" . "0,\n";
        print FH "     $enumItemName" . "1 = br"; 
        if($enumItemsNo3 <= 2){
            print FH "\n";
        }
        else {
            print FH ",\n";
        }

    for( $_enumItemsNo3 = 2; $_enumItemsNo3 < $enumItemsNo3; $_enumItemsNo3++) {
         my $no =int(rand(20)+1);
            print FH "     $enumItemName" . $_enumItemsNo3 . " = br + " ;
            for( $__enumItemsNo3 = 0; $__enumItemsNo3 < $_enumItemsNo3-1; $__enumItemsNo3++) {
                print FH "$__enumItemsNo3" ;
            }
           if($_enumItemsNo3 == $enumItemsNo3-1 && $__enumItemsNo3 == $_enumItemsNo3-1) {
                print FH "\n";
            } 
            else {
                print FH ",\n ";
            }
	}
     closeCSLfile($testName);  
    }
   

    my $finish_time  = time(); #statistics on the time elapsed from the start of the regression until it's end
    my $elapsed_time = $finish_time - $start_time;
    my $day          = int $elapsed_time/86400;
    my $hour         = int $elapsed_time%86400/3600;
    my $min          = int $elapsed_time%3600/60;
    my $sec          = $elapsed_time-$day*86400-$hour*3600-$min*60;
 #   print "min = $min\n";
 #   print "sec = $sec\n";
}


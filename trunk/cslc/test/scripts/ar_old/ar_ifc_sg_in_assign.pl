#!/usr/bin/perl

#Author Anamaria
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}


foreach (my $k = 1; $k <= 15; $k++) {
    my @a1 = ("p_a1_$k", "p_a2_$k", "p_a3_$k", "p_a4_$k", "p_a5_$k", "p_b1_$k", "p_b2_$k", "p_b3_$k", "p_b4_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_top_$k");
    my @a2 = ("p_a3_$k", "p_a4_4k", "p_b1_$k", "p_b3_$k", "p_top1_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_b3_$k", "s_top_$k");
    my @a3 = ("p_a1_$k", "p_a2_$k", "p_a3_$k", "p_a4_$k", "p_a5_$k", "p_b1_$k", "p_b2_$k", "p_b3_$k", "p_b4_$k", "p_top1_$k", "p_top2_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_top_$k");
    my $ctests;
    if($k <= 5) {   
        foreach my $u (@a1) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        }
    }
    elsif($k > 5 && $k <= 10) {
         foreach my $u(@a2) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        } 
     }
    elsif($k > 10 && $k <= 15) {
         foreach my $u(@a3) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        } 
     }
}
sub main {     
    my ($k, $ctests, $u) = @_; 
    my $test_name = "concat_in_assign".$k."_".$u."_legal.csl";
    &createCslFile($test_name, $k, $ctests);
}
   
sub createCslFile {
    my($test_name, $k, $ctests) = @_;
    my $path = "$ENV{WORK}/test/generated_tests/concat_replicate";
    my $val1 = 100;
    my $val2 = 50;
     
    my $val3 = 2 * $val2;
    my $val4 = 2 * $val1 ;
    my $val5 = 2 * $val3 ;
    my $val6 = 2 * $val4 ;
    my $val7 = $val3 + $val6;
    
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_concat_in_assign_valid");
        open(FH,">$path/ar_concat_in_assign_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_concat_in_assign_invalid"); 
        open(FH,">$path/ar_concat_in_assign_invalid/$test_name");
    }
    print FH "// Generated by  AnamariaH \n\n";
  

  

   print FH "csl_interface ifc1{ \n";
   if($k <= 5){  
      print FH "csl_port p1_$k(input,$val1);\n";
      print FH "csl_port p2_$k(output,$val3);\n";
      print FH "csl_port p3_$k(input,$val5);\n";
      print FH "csl_port p4_$k(output,$val6);\n";
   }
   elsif($k > 5 && $k <= 10){
      print FH "csl_port p1_$k(input,$val3);\n";
      print FH "csl_port p2_$k(input,$val2);\n";
      print FH "csl_port p3_$k(output,$val5);\n";
      print FH "csl_port p4_$k(output,$val1);\n";
   }
   elsif($k > 10 && $k <= 15){
       print FH "csl_port p1_$k(input,$val6);\n";
       print FH "csl_port p2_$k(output,$val5);\n";
       print FH "csl_port p3_$k(output,$val3);\n";
       print FH "csl_port p4_$k(input,$val1);\n";
   }
   elsif($k > 15 && $k <= 20){
       print FH "csl_port p1_$k(input,$val1);\n";
       print FH "csl_port p2_$k(output,$val2);\n";
       print FH "csl_port p3_$k(output,$val3);\n";
   }
   print FH " ifc1(){} \n";
   print FH "}; \n";

  print FH "csl_interface ifc2{ \n";
  print FH " ifc1 inter10; \n";
   if($k <= 5){  
      print FH "csl_port p1_$k(input,$val5);\n";
      print FH "csl_port p2_$k(input,$val2);\n";
      print FH "csl_port p3_$k(output,$val7);\n";
   }
   elsif($k > 5 && $k <= 10){
      print FH "csl_port p1_$k(input,$val1);\n";
      print FH "csl_port p2_$k(input,$val4);\n";
      print FH "csl_port p3_$k(output,$val6);\n";
   }
   elsif($k > 10 && $k <= 15){
       print FH "csl_port p1_$k(output,$val1);\n";
       print FH "csl_port p2_$k(output,$val2);\n";
       print FH "csl_port p3_$k(output,$val3);\n";
       print FH "csl_port p4_$k(input,$val1); \n";
   }
   elsif($k > 15 && $k <= 20){
       print FH "csl_port p1_$k(input,$val6);\n";
       print FH "csl_port p2_$k(input,$val4);\n";
       print FH "csl_port p3_$k(output,$val3);\n";
   }
   print FH " ifc2(){} \n";
   print FH "}; \n";

   print FH "csl_interface ifc3{ \n";
   print FH "csl_port p1_$k(output,$val1);\n";
   print FH "csl_port p2_$k(output,$val3);\n";
   print FH "  ifc3(){} \n";
   print FH "}; \n";

   print FH "csl_interface ifc4{ \n";
   print FH " ifc3 inter30; \n";
   print FH " ifc1 inter11; \n";
   print FH " ifc4(){} \n";
   print FH "}; \n";

   print FH "csl_signal_group sg1{ \n";
   if($k <= 5){  
      print FH "csl_signal s1_$k($val1);\n";
      print FH "csl_signal s2_$k($val3);\n";
      print FH "csl_signal s3_$k($val5);\n";
   }
   elsif($k > 5 && $k <= 10){
      print FH "csl_signal s1_$k($val3);\n";
      print FH "csl_signal s2_$k($val6);\n";
      print FH "csl_signal s3_$k($val2);\n";
   }
   elsif($k > 10 && $k <= 15){
       print FH "csl_signal s1_$k($val5);\n";
       print FH "csl_signal s2_$k($val2);\n";
       print FH "csl_signal s3_$k($val1);\n";
   }
   elsif($k > 15 && $k <= 20){
       print FH "csl_signal s1_$k($val4);\n";
       print FH "csl_signal s2_$k($val2);\n";
   }

   print FH " sg1(){} \n";
   print FH "}; \n";

   print FH "csl_signal_group sg2{ \n";
   print FH " sg1 sgn10; \n";
   if($k <= 5){ 
      print FH "csl_signal s1_$k($val2);\n";
      print FH "csl_signal s2_$k($val1);\n";
   }
   elsif($k > 5 && $k <= 10){
      print FH "csl_signal s1_$k($val5);\n";
      print FH "csl_signal s2_$k($val3);\n";
    
   }
   elsif($k > 10 && $k <= 15){
       print FH "csl_signal s1_$k($val1);\n";
       print FH "csl_signal s2_$k($val6);\n";
       print FH "csl_signal s3_$k($val2);\n";
   }
   elsif($k > 15 && $k <= 20){
       print FH "csl_signal s1_$k($val3);\n";
       print FH "csl_signal s2_$k($val2);\n";
       print FH "csl_signal s3_$k($val6);\n";
   }
   print FH " sg2(){} \n";
   print FH "}; \n";

   print FH "csl_signal_group sg3{ \n";
   print FH "csl_signal s1_$k($val1); \n";
   print FH "csl_signal s2_$k($val2); \n";
   print FH " sg3(){} \n";
   print FH "}; \n";

   print FH "csl_signal_group sg4{ \n";
   print FH " sg3 sgn30; \n";
   print FH " sg2 sgn22; \n";
   print FH " sg4(){} \n";
   print FH "}; \n";





   print FH "csl_unit unit_a{ \n";
   print FH "   ifc2 inter2; \n";
   print FH "   sg1 sgn1;\n";
   if($k <= 5){  
      print FH "csl_port p1_$k(input,$val2);\n";
      print FH "csl_signal s1_$k($val1);\n";
    }
   elsif($k > 5 && $k <= 10){
        print FH " ifc3 inter3; \n";
	print FH " ifc4 inter4; \n";
        print FH " sg3 sgn3; \n";
        print FH " sg4 sgn4; \n";
    }
    elsif($k > 10 && $k <= 15){
    print FH " ifc4 inter42; \n";
    print FH "csl_port p1_$k(input,$val2);\n";
    }
    elsif($k > 15 && $k <= 20){
    print FH "csl_port p1_$k(output,$val1); \n";
    print FH "ifc1 inter12; \n";
    print FH "sg3 sgn32;\n";
    }
    print FH "  unit_a() { \n"; 
    if($k <= 5) { 
    print FH "    inter2.p1_$k = {{inter2.p2_$k , inter2.inter10.p1_$k} , p1_$k} ; \n";
    print FH "    inter2.p3_$k = {inter2.inter10.p4_$k, inter2.inter10.p2_$k} ; \n";
    print FH "    inter2.p2_$k = {{inter2.p1_$k[0:10], sgn1.s2_$k[10:19]},{s1_$k[5:14], inter2.inter10.p1_$k[20:29], inter2.inter10.p3_$k[80:88]}};\n";
    print FH "    inter2.p3_$k = {{s1_$k, sgn1.s1_$k},{sgn1.s3_$k, sgn1.s2_$k}}; \n";
    print FH "    inter2.p1_$k = {{inter2.p2_$k, sgn1.s2_$k}, inter2.p2_$k}; \n";
    print FH "    inter2.p3_$k = {{inter2.inter10.p2_$k[50:149], inter2.p3_$k[300:499]},{sgn1.s2_$k[10:109], sgn1.s3[90:189]}};\n";
    print FH "// Assign ifc_p_concat. \n \n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "   inter2.p3_$k = {inter3, inter4.inter30} ;  \n";
    print FH "   inter2.p2_$k = {sgn3, sgn1.s3_$k} ;  \n";
    print FH "   inter2.p2_$k = {sgn4.sgn30, inter2.inter10.p2_$k} ;  \n";
    print FH "   inter2.p1_$k = {(inter2.inter10.p2_$k && sgn3.s1_$k),(sgn4.sgn3.s1_$k || sgn1.s3_$k)}; \n";
    print FH "   inter2.p2_$k = {2{sgn4.sgn3.s1_$k},2{inter2.inter10.p2_$k}}; \n";
    print FH "   inter2.p3_$k = {(inter4.inter3 && inter2.inter10.p3_$k),(sgn4.sgn22.s1_$k ^ inter4.inter3)}; \n";
    print FH " //Assign ifc_p_concat. \n \n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "    inter2.inter10.p1_$k = {{sgn1.s3_$k, sgn1.s1_$k[50:99], sgn1.s2_$k},{inter2.p4_$k, inter42.inter11.p4_$k}} ; \n";
    print FH "    inter42.inter11.p2_$k = {inter2.inter10.p3_$k, inter2.p1_$k} ; \n";
    print FH "    inter2.inter10.p1_$k = {{p1_$k, sgn1.s1_$k, inter42.inter11.p4_$k},{sgn1.s2_$k[0:19], sgn1.s3_$k[20:49]}}; \n";
    print FH "// Assign ifc_ifc_p_concat. \n \n";
    }
    elsif($k > 15 && $k <= 20) {
    print FH "    inter2.inter10.p1_$k = {{(sgn1.s1_$k[0:99] && inter12.p4_$k), sgn1.s3_$k},{(sgn1.s2_$k || inter12.p4[20:69]), sgn32}} ; \n";
    print FH "    inter2.inter10.p2_$k = {{(p1_$k && inter12.p3_$k), sgn32.s1_$k[0:39]}, (sgn1.s1_$k[10:69] && sgn32.s2_$k[40:99])}; \n";
    print FH "// Assign ifc_ifc_p_concat. \n \n";
    }
    print FH " } \n";
    print FH "}; \n";



    
    print FH "csl_unit unit_b{ \n";
    print FH "  ifc1 inter1;\n";
    print FH "  sg2 sgn2;\n";
    if($k <= 5) {
    print FH "csl_signal s1_$k($val3); \n";
    print FH "csl_port p1_$k(output, $val1);\n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "csl_signal s1_$k($val5);\n";
    print FH "csl_port p1_$k(input, $val1);\n";
    print FH " unit_a a1(.inter3.p1_$k(inter1.p4_$k),.inter4.inter11.p1_$k(p1_$k),.sgn4.sgn3.s2_$k(sgn2.s2_$k),.inter3(sgn2.s1_$k)); \n";
    print FH " unit_a a2(.inter2.p2_$k(sgn2.s1_$k || s1_$k),.sgn1.s1_$k(p1_$k && inter1.p4_$k),.inter4.inter3.p1_$k(inter1.p4_$k),.sgn4.sgn3.s1_$k(inter1.p2_$k),.sgn4.sgn22.s2_$k(inter1.p1_$k)); \n";
    print FH " F2a ifc_p/ifc_p or ifc_ifc_p/p or sg_sg_s/sg_s or ifc/sg_s .\n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "csl_signal s_b1_$k($val3);\n";
    print FH "csl_signal s_b2_$k($val4); \n";
    print FH "csl_port p_b1_$k(input, $val3);\n";
    print FH "csl_port p_b2_$k(input, $val3);\n";
    print FH "csl_port p_b3_$k(output, $val4);\n";
    print FH "csl_port p_b4_$k(output, $val4);\n";
    }
   
    print FH "   unit_b() { \n"; 
    if($k <= 5) {    
    print FH "    inter1.p4_$k = {{inter1.p3_$k, p1_$k}, p1_$k} ; \n";
    print FH "    inter1.p3_$k = {{sgn2.sgn10.s1_$k, sgn2.sgn10.s2_$k} ; \n";
    print FH "    inter1.p1_$k = {{inter1.p3_$k[10:19], sgn2.sgn10.s3_$k[100:129]},{s1_$k[10:49], sgn2.s2_$k[30:49]}};\n";
    print FH "    inter1.p4_$k = {{p1_$k[40:99], inter1.p2_$k[10:49]},{sgn2.sgn10.s3_$k[100:149], sgn2.s1_$k[0:49]}};\n";
    print FH "// Assign ifc_p_concat. \n \n";
    }
    elsif($k > 10 && $k < 15) {
    print FH "    s_b1_$k = {p_b1_$k && p_b2_$k} ; \n";
    print FH "    s_b2_$k = {p_b3_$k && p_b4_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports in the same unit. \n \n";
    }
    print FH " } \n";
    print FH "}; \n";
 




    print FH "csl_unit unit_top{ \n";
    print FH " ifc2 inter21; \n";
    print FH " sg2 sgn21;\n";
    if($k <= 5) {
    print FH "csl_signal s_top_$k($val4); \n";
    print FH "  unit_b b0; \n";
    print FH "  unit_a a0; \n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "csl_port s_top_$k($val1); \n";
    print FH " ifc4 inter41; \n";
    print FH " sg3 sgn31; \n";
    print FH " unit_b b1(.s1_$k({inter21.p1_$k, sgn21.s2_$k}),.inter1.p3_$k({sgn21.s2_$k, s_top_$k}),.a1.inter2.p3_$k({sgn21.s1_$k, inter41.inter3}),.a2.sgn4.sgn3({inter21.p1_$k, sgn31.s1_$k})); \n";
    print FH " unit_b b2(.a1.inter4.inter3.p2_$k({inter41.inter11.p4_$k[0:49], inter21.p3_$k[300:349]}),.a2.{inter2.p1_$k, inter4.inter11.p1_$k}(sgn21.s1_$k),.a1.{sgn3.s1_$k, sgn4.sgn22.s2_$k, inter2.inter10.p2_$k}(inter21.p2_$k),.a1.inter4.inter3({inter21.p2_$k[0:99], sgn21.s1_$k[100:199]})); \n";
    print FH " F2a ifc_p_concat.\n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "csl_port p_top1_$k(input, $val5); \n"; 
    print FH "csl_port p_top2_$k(input, $val5); \n"; 
    print FH "csl_signal s_top_$k($val5); \n";
    }
   
   
    print FH "  unit_top() { \n";  
    if($k <= 5) {    
    print FH "   inter21.p1_$k = {{a0.p1_$k, b0.s1_$k}, a0.inter2.p2_$k} ; \n";
    print FH "   inter21.p3_$k = {{b0.p1_$k, b0.inter1.p2_$k,a0.inter2.inter10.p2_$k},{b0.sgn2.s2_$k, b0.sgn2.sgn10.s1_$k}};\n";
    print FH "   inter21.p3_$k = {{sgn21.s2_$k, s_top_$k},{a0.inter2.p3_$k[300:349], a0.sgn1.s3_$k[60:109]},{b0.inter1.p4_$k[200:249], b0.sgn2.sgn10.s1_$k[10:59]}}; \n";
    print FH "// Assign ifc_p_concat. \n \n";

    }
    elsif($k > 10 && $k < 15) {
    print FH "    s_top_$k = {p_top1_$k || p_top2_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports in the same unit. \n \n";
    }   
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

#!/usr/bin/perl

#oanab
#connecting a signal group with port,port part select,signal,signal part select,op expr, concat expr, rep expr
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 350; $i++) {
	&main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; # for ifc1
    $m = int(rand(20))+2; # for ifc2
    $n = int(rand(20))+3; # for ifc3
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "ar_sg".$i."_illegal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    else {
	&createCslFile($test_name, $i, $j+1, $m+2, $n+3, %dir);
    }
}
sub createCslFile {
    my ($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_ar_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+1;
    my $val2 = int(rand(100))+1;
    my $val3 = int(rand(100))+6;
    my $hex1 = sprintf("%x",$val1);
    my $hex2 = sprintf("%x",$val2);
    my $hex3 = sprintf("%x",$val3);
    my $bin1 = sprintf("%b",$val1);
    my $bin2 = sprintf("%b",$val2);
    my $bin3 = sprintf("%b",$val3);
    my $oct1 = sprintf("%o",$val1);
    my $oct2 = sprintf("%o",$val2);
    my $oct3 = sprintf("%o",$val3);
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_sg_valid");
        open(FH,">$path/ar_sg_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_sg_invalid1"); 
        open(FH,">$path/ar_sg_invalid1/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#declaring bitrange br1
    if($val1 >= 7) {    
	print FH "csl_bitrange br1($val1);\n\n";
    }
    else {
	$val1 = $val1 + 7;
	print FH "csl_bitrange br1($val1);\n\n";
    }
    
#declaring bitrange br2
    if($val2 >= 7) {
	print FH "csl_bitrange br2($val2);\n\n";
    }
    else {
	$val2 = $val2 + 7;
	print FH "csl_bitrange br2($val2);\n\n";
    }
    

#signal group sgj
    print FH "csl_signal_group sg$j {\n";
    print FH "  csl_signal s_a$i(br1);\n";
    print FH "  csl_signal s_b$i(br2);\n";
    print FH "  csl_signal s_c$i($val3);\n";
    print FH "  sg$j () {}\n";
    print FH "};\n\n";

#signal group sgm
    if($i > 75 && $i <= 350) {
	print FH "csl_signal_group sg$m {\n";
	print FH "  csl_signal s_x$i(br1);\n";
	print FH "  csl_signal s_y$i($val1);\n";
#25 tests have sgj instantiated in sgm
	if($i > 175 && $i <= 275) {
	    print FH "  sg$j sg$j\_$one;\n";
	}
	elsif($i > 275 && $i <= 350) {
	    print FH "  sg$j sg$j\_$one;\n";
	    print FH "  sg$j sg$j\_$two;\n";
	}
	print FH "  sg$m () {}\n";
	print FH "};\n\n";
    }

#unit a
    print FH "csl_unit a$k {\n";
#25 tests have a port in unit a
    if($i <= 25 || $i > 175 && $i <= 200) {
	print FH "  csl_port p_x$i($dir{$l},$val2);\n";
    }
#25 tests have a signal in unit a
    elsif($i > 50 && $i <= 100 || $i > 250 && $i <= 275) {
	print FH "  csl_signal s_b$i($val3);\n";
    }
#25 tests have sgj instantiated in unit a
    elsif($i > 25 && $i <= 50 || $i > 125 && $i <= 150) {
	print FH "  sg$j sg$j\_$one;\n";
    }
#25 tests have sgm instantiated in unit a
    elsif($i > 100 && $i <= 125 || $i > 200 && $i <= 250) {
	print FH "  csl_signal s_b$i($val3);\n";
	print FH "  sg$m sg$m\_$one;\n";
    }
#25 tests have a port and a sgj instance in unit a
    elsif($i > 150 && $i <= 175 || $i > 300 && $i <= 325) {
	print FH "  csl_port p_x$i($dir{$l},$val2);\n";
	print FH "  sg$j sg$j\_$one;\n";
    }
#25 tests have sgm instantiated in unit a
    elsif($i > 325 && $i <= 350) {
	print FH "  sg$m sg$m\_$one;\n";
    }
    print FH "  a$k () {}\n";
    print FH "};\n\n";

#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
#25 tests have a signal in unit b
    if($i > 50 && $i <= 75 || $i > 225 && $i <= 250) {
	print FH "  csl_signal s_a$i(br1);\n";
    }
#25 tests have sgm instantiated in unit b
    elsif($i > 250 && $i <= 300) {
	print FH "  sg$m sg$m\_$two;\n";
    }
#25 tests have sgj instantiated in unit b
    elsif($i > 300 && $i <= 325) {
	print FH "  sg$j sg$j\_$tre;\n";
    }
    print FH "  b$k () {}\n";
    print FH "};\n\n";

#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    print FH "  sg$j sg$j\_$zero;\n";
#25 tests have a port in unit c
    if($i > 25 && $i <= 50) {
	print FH "  csl_port p_y$i($dir{$l},br2);\n";
    }
#25 tests have sgm instantiated in unit c
    elsif($i > 75 && $i <= 100 || $i > 175 && $i <= 200 || $i > 300 && $i <= 325) {
	print FH "  sg$m sg$m\_$zero;\n";
    }
#25 tests have 2 signals in unit c
    elsif($i > 100 && $i <= 125 || $i > 150 && $i <= 175) {
	print FH "  csl_signal s_x$i(br2);\n";
	print FH "  csl_signal s_y$i($val2);\n";
    }
#25 tests have 2 ports in unit c
    elsif($i > 275 && $i <= 300 || $i > 325 && $i <= 350) {
	print FH "  csl_port p_x$i($dir{$l},$val2);\n";
	print FH "  csl_port p_y$i($dir{$l},br2);\n";
    }
    print FH "  c$k () {\n";
#25 tests connect a signal group with a port part
    if($i > 25 && $i <= 50) {
	print FH "//connect a signal group with a port part\n";
	print FH "    b$k\_$zero.a$k\_$zero.sg$j\_$one.connect(p_y$i\[".($val2)."\:".($val2-3)."\]);\n";
    }
#25 tests connect a signal group with a signal
    elsif($i > 50 && $i <= 75) {
	print FH "//connect a signal group with a signal\n";
	print FH "    sg$j\_$zero.connect(b$k\_$zero.a$k\_$zero.s_b$i);\n";
    }
#25 tests connect a signal group with an operator expression
    elsif($i > 100 && $i <= 125) {
	print FH "//connect a signal group with an operator expression\n";
	print FH "    b$k\_$zero.a$k\_$zero.sg$m\_$one.connect(s_x$i & s_y$i);\n";
	print FH "    sg$j\_$zero.connect(b$k\_$zero.a$k\_$zero.(~s_b$i));\n";
    }
#25 tests connect a signal group with a replication expr
    elsif($i > 150 && $i <= 175) {
	print FH "//connect a signal group with a replication expr\n";
	print FH "    b$k\_$zero.a$k\_$zero.sg$j\_$one.connect(\{$val3\{s1,s2,5\}\});\n";
	print FH "    b$k\_$zero.a$k\_$zero.sg$j\_$one.connect({2'h".$hex3."{s1,s2,5}});\n";
    }
#25 tests connect a signal group with a port (sg.sg)
    elsif($i > 175 && $i <= 200) {
	print FH "//connect a signal group with a port (sg.sg)\n";
	print FH "    sg$m\_$zero.sg$j\_$one.connect(b$k\_$zero.a$k\_$zero.p_x$i);\n";
    }
#25 tests connect a signal group with a concat expr
    elsif($i > 300 && $i <= 325) {
	print FH "//connect a signal group with a concat expr\n";
	print FH "    sg$m\_$zero.sg$j\_$two.connect({sg$j\_$zero,b$k\_$zero.sg$j\_$tre});\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit d 
    print FH "csl_unit d$k {\n";
    print FH "  c$k c$k\_$zero;\n";
#25 tests have unit a instantiated in unit d
    if($i <= 25) {
	print FH "  a$k a$k\_$one;\n";
    }
#25 tests have sgj instantiated in unit d
    elsif($i > 50 && $i <= 75) {
	print FH "  sg$j sg$j\_$one;\n";
    }
#25 tests have a sgm instance and a signal in unit d
    elsif($i > 125 && $i <= 175 || $i > 275 && $i <= 300) {
	print FH "  sg$m sg$m\_$one;\n";
	print FH "  csl_signal s_s$i($val3);\n";
    }
#25 tests have a port and a unit b instance in unit d
    elsif($i > 200 && $i <= 225) {
	print FH "  csl_port p_z$i($dir{$l},br1);\n";
	print FH "  b$k b$k\_$one;\n";
    }
#25 tests have another unit c instance in unit d
    elsif($i > 250 && $i <= 275) {
	print FH "  c$k c$k\_$one;\n";
    }
    print FH "  d$k () {\n";
#25 tests connect a signal group with a port
    if($i <= 25) {
	print FH "//connect a signal group with a port\n";
	print FH "    c$k\_$zero.sg$j\_$zero.connect(a$k\_$one.p_x$i);\n";
    }
#25 tests connect a signal group with a signal
    elsif($i > 50 && $i <= 75) {
	print FH "//connect a signal group with a signal\n";
	print FH "    sg$j\_$one.connect(c$k\_$zero.b$k\_$zero.s_a$i);\n";
    }
#25 tests connect a signal group with a signal part
    elsif($i > 75 && $i <= 100) {
	print FH "//connect a signal group with a signal part\n";
	print FH "    c$k\_$zero.sg$j\_$zero.connect(c$k\_$zero.b$k\_$zero.a$k\_$zero.s_b$i\[".($val3)."\:".($val3-3)."\]);\n";
	print FH "    c$k\_$zero.sg$m\_$zero.connect(c$k\_$zero.b$k\_$zero.a$k\_$zero.s_b$i\[".($val3)."\:".($val3-2)."\]);\n";
    }
#25 tests connect a signal group with a concat expr
    elsif($i > 125 && $i <= 150) {
	print FH "//connect a signal group with a concat expr\n";
	print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$j\_$one.connect({sg$m\_$one,s_s$i});\n";
	print FH "    c$k\_$zero.sg$j\_$zero.connect({s_s$i,2'b10});\n";
    }
#25 tests connect a signal group with a replication expr
    elsif($i > 150 && $i <= 175) {
	print FH "//connect a signal group with a replication expr\n";
	print FH "    sg$m\_$one.connect({7'b".$bin2."{c$k\_$zero.b$k\_$zero.a$k\_$zero.p_x$i,1'b1}});\n";
    }
#25 tests connect a signal group with a port part (sg.sg)
    elsif($i > 200 && $i <= 225) {
	print FH "//connect a signal group with a port part (sg.sg)\n";
	print FH "    b$k\_$one.a$k\_$zero.sg$m\_$one.sg$j\_$one.connect(p_z$i\[".($val1)."\:".($val1-3)."\]);\n";
    }
#25 tests connect a signal group with a signal part (sg.sg)
    elsif($i > 250 && $i <= 275) {
	print FH "//connect a signal group with a signal part (sg.sg)\n";
	print FH "    c$k\_$one.b$k\_$zero.sg$m\_$two.sg$j\_$one.connect(c$k\_$zero.b$k\_$zero.a$k\_$zero.s_b$i\[".($val3)."\:".($val3-3)."\]);\n";
    }
#25 tests connect a signal group with an operator expr (sg.sg)
    elsif($i > 275 && $i <= 300) {
	print FH "//connect a signal group with an operator expr (sg.sg)\n";
	print FH "    sg$m\_$one.sg$j\_$one.connect(c$k\_$zero.p_x$i ^ c$k\_$zero.p_y$i);\n";
    }
#25 tests connect a signal group with a replication expr (sg.sg)
    elsif($i > 325 && $i <= 350) {
	print FH "//connect a signal group with a replication expr (sg.sg)\n";
	print FH "    c$k\_$zero.b$k\_$zero.a$k\_$zero.sg$m\_$one.sg$j\_$one.connect({3'o".$val3."{c$k\_$zero.p_x$i,c$k\_$zero.p_y$i}});\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit e 
    if($i > 225 && $i <= 250 || $i > 275 && $i <= 300) {
	print FH "csl_unit e$k {\n";
	print FH "  d$k d$k\_$zero;\n";
#25 tests have unit a instantiated in unit e
	if($i > 225 && $i <= 250) {
	    print FH "  a$k a$k\_$one;\n";
	}
#25 tests have 2 ports in unit e
	elsif($i > 275 && $i <= 300) {
	    print FH "  csl_port p_m$i($dir{$l},br2);\n";
	    print FH "  csl_port p_n$i($dir{$l},br2);\n";
	}
	print FH "  e$k () {\n";
#25 tests connect a signal group with a signal (sg.sg)
	if($i > 225 && $i <= 250) {
	    print FH "// connect a signal group with a signal (sg.sg)\n";
	    print FH "    a$k\_$one.sg$m\_$one.sg$j\_$one.connect(d$k\_$zero.c$k\_$zero.b$k\_$zero.s_a$i);\n";
	}
#25 tests connect a signal group with an operator expr (sg.sg)
	if($i > 275 && $i <= 300) {
	    print FH "//connect a signal group with an operator expr (sg.sg)\n";
	    print FH "    d$k\_$zero.c$k\_$zero.b$k\_$zero.sg$m\_$two.sg$j\_$two.connect(p_m$i | p_n$i);\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

}

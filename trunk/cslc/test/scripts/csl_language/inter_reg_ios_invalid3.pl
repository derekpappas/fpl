#!/usr/bin/perl

#oanab
#method called for a ifc,unit,port,signal,sg,reg,fifo,mem map,tb

use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

print "Generated tests path : inter_reg_ios_invalid3/\n";

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 400; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    #my @dir = ("input","output","inout");
    #my $l = int(rand($#dir+1));
    my @sp = ("  csl_port clk(input);","  csl_signal clk(reg);");
    my $test_name = "inter_reg_ios".$i."_illegal.csl";
   	&createCslFile($test_name, $i, @sp);
}

sub createCslFile {
    my ($test_name, $i, @sp) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+1;
    my $val2 = int(rand(100))+2;
    my $val3 = int(rand(100))+3;
    my $m = $k + 5;
    if($test_name=~/(_legal)/){
        &mkDir("$path/inter_reg_ios_valid");
        open(FH,">$path/inter_reg_ios_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/inter_reg_ios_invalid3"); 
        open(FH,">$path/inter_reg_ios_invalid3/$test_name");
    }
    print FH "//Generated by oanab\n\n";
    print FH "//Test cases from: register_ios_matr.ods\n";

#interface ifck
    print FH "csl_interface ifc$k {\n";
    print FH "  csl_port p_x$i(input,$val2);\n";
    print FH "  csl_port p_y$i(output,$val3);\n";
    print FH "  csl_port p_z$i(input,$val1);\n";
    print FH "  ifc$k () {\n";
    if($i > 150 && $i <= 200) {
	print FH "    set_clock(clk);\n";
	print FH "    register_ios(output);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";
    
#interface ifcm
    if($i > 50 && $i <= 100 || $i > 350 && $i <= 400) {
	print FH "csl_interface ifc$m {\n";
	print FH "  csl_port p_a$i(output,".($val1+3).");\n";
	print FH "  csl_port p_b$i(input,$val3);\n";
	print FH "  csl_port p_c$i(input,$val2);\n";
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  ifc$m () {\n";
	if($i > 350 && $i <= 400) {
	    print FH "    p_a$i.set_clock(clk);\n";
	    print FH "    p_a$i.register_ios(output,.en(enable));\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#signal group sgk
    if($i > 200 && $i <= 250 || $i > 350 && $i <= 400) {
	print FH "csl_signal_group sg$k {\n";
	print FH "  csl_signal s_a$i($val2);\n";
	print FH "  csl_signal s_b$i($val1);\n";
	print FH "  csl_signal s_c$i($val3);\n";
	print FH "  sg$k () {\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#fifo fk
    if($i <= 300) {
	print FH "csl_fifo f$k {\n";
	print FH "  f$k () {\n";
	print FH "    set_width($val1);\n";
	print FH "    set_depth(".($val3+$val1).");\n";
	if($i > 100 && $i <= 200) {
	    print FH "    set_clock(clk);\n";
	    print FH "    register_ios(output);\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#register reg
    if($i > 250 && $i <= 300 || $i > 350 && $i <= 400) {
	print FH "csl_register reg$k {\n";
	print FH "  reg$k () {\n";
	print FH "    set_width($val2);\n";
	print FH "    set_type(register);\n";
	if($i > 350 && $i <= 400) {
	    print FH "    set_clock(clk);\n";
	    print FH "    register_ios(output,.reset(rst$k),6);\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#unit a
    print FH "csl_unit a$k {\n";
    print FH $sp[int rand($#sp+1)];
    print FH "\n";
    if($i <= 100) {
	print FH "  f$k f$k\_$zero;\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  ifc$k ifc$k\_$zero;\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  sg$k sg$k\_$zero;\n";
	print FH "  csl_signal rst(10);\n";
    }
    elsif($i > 300 && $i <= 350) {
	print FH "  csl_port p_m$i(output,$val3);\n";
	print FH "  csl_signal rst;\n";
	print FH "  csl_signal enable;\n";
    }
    elsif($i > 350 && $i <= 400) {
	print FH "  reg$k reg$k\_$zero;\n";
	print FH "  ifc$m ifc$m\_$one;\n";
    }
    print FH "  a$k () {\n";
    print FH "    clk.set_attr(clock);\n";
    if($i <= 100) {
	print FH "    f$k\_$zero.set_clock(clk);\n";
	print FH "    f$k\_$zero.register_ios(input);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "    sg$k\_$zero.set_clock(clk);\n";
	print FH "    sg$k\_$zero.register_ios(output,.reset(rst));\n";
    }
    elsif($i > 300 && $i <= 350) {
	print FH "    p_m$i.set_clock(clk);\n";
	print FH "    p_m$i.register_ios(output,.reset(rst),3,.en(enable));\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


# unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i <= 50 || $i > 150 && $i <= 300) { 
	print FH $sp[int rand($#sp+1)];
	print FH "\n";
    }
    if($i <= 50) {
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  csl_signal rst;\n";
    }
    elsif($i > 50 && $i <= 150) {
	print FH "  csl_port p_a$i(input,$val2);\n";
	print FH "  csl_port p_b$i(output,$val1);\n";
	print FH "  csl_port clk(input);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  f$k f$k\_$one;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  reg$k reg$k\_$one;\n";
	print FH "  csl_signal enable$k;\n";
    }
    elsif($i > 300 && $i <= 400) {
	print FH "  csl_port p_a$i(input,$val3);\n";
	print FH "  csl_port p_b$i(output,$val2);\n";
	print FH "  csl_port clk(input);\n";
    }
    print FH "  b$k () {\n";
    print FH "    clk.set_attr(clock);\n";
    if($i <= 50) {
	print FH "    ifc$k\_$zero.set_clock(clk);\n";
	print FH "    ifc$k\_$zero.register_ios(output,.reset(rst),1);\n";	
    }
    elsif($i > 100 && $i <= 150) {
	print FH "    set_clock(clk);\n";
	print FH "    register_ios(output);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "    f$k\_$one.set_clock(clk);\n";
	print FH "    f$k\_$one.register_ios(output);\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "    reg$k\_$one.set_clock(clk);\n";
	print FH "    reg$k\_$one.register_ios(input,.en(enable$k));\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


# unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    print FH $sp[int rand($#sp+1)];
    print FH "\n";
    if($i > 50 && $i <= 100) {
	print FH "  ifc$m ifc$m\_$zero;\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  f$k f$k\_$one;\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  f$k f$k\_$one;\n";
	print FH "  csl_port p_$i(input,$val2);\n";
	print FH "  csl_signal s_$i($val3);\n";
	print FH "  csl_signal rst;\n";
	print FH "  csl_signal enable;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  f$k f$k\_$two;\n";
    }
    elsif($i > 300 && $i <= 350) {
	print FH "  csl_signal s_n$i($val1);\n";
    }
    elsif($i > 350 && $i <= 400) {
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  csl_signal rst$k;\n";
	print FH "  csl_signal enable$k;\n";
    }
    print FH "  c$k () {\n";
    print FH "    clk.set_attr(clock);\n";
    if($i > 50 && $i <= 100) {
	print FH "    ifc$m.ifc$k\_$zero.set_clock(clk);\n";
	print FH "    ifc$m.ifc$k\_$zero.register_ios(output);\n";
	print FH "    ifc$m.ifc$k\_$one.set_clock(clk);\n";
	print FH "    ifc$m.ifc$k\_$one.register_ios(input,.en(enable$k));\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "    p_$i.set_clock(clk);\n";
	print FH "    p_$i.register_ios(input,.reset(rst),.en(enable));\n";
	print FH "    s_$i.set_clock(clk);\n";
	print FH "    s_$i.register_ios(output,.reset(rst));\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "    f$k\_$two.set_clock(clk);\n";
	print FH "    f$k\_$two.register_ios(output,.reset(rst));\n";
    }
    elsif($i > 300 && $i <= 350) {
	print FH "    s_n$i.set_clock(clk);\n";
	print FH "    s_n$i.register_ios(input);\n";
    }
    elsif($i > 350 && $i <= 400) {
	print FH "    sg$k\_$one.set_clock(clk);\n";
	print FH "    sg$k\_$one.register_ios(input,.reset(rst$k),4,.en(enable$k));\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#mem map pag
    if($i <= 300) {
	print FH "csl_memory_map_page mpg$k {\n";
	print FH "  mpg$k () {\n";
	print FH "    set_unit_name(a$k);\n";
	print FH "    add_address_range(0,$val2);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#mem map
    if($i <= 300) {
	print FH "csl_memory_map mmap$k {\n";
	print FH "  mmap$k () {\n";
	print FH "    set_type(hierarchical);\n";
	print FH "    set_clock(clk);\n";
	print FH "    register_ios(output);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }


#stim vector
    if($i > 50 && $i <= 150 || $i > 300 && $i <= 400) {
	print FH "csl_vector stim_vect$k {\n";
	print FH "  stim_vect$k () {\n";
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_direction(input);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#exp vector
    if($i > 50 && $i <= 150 || $i > 300 && $i <= 400) {
	print FH "csl_vector exp_vect$k {\n";
	print FH "  exp_vect$k () {\n";
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_direction(output);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#testbench tb
    if($i > 50 && $i <= 150 || $i > 300 && $i <= 400) {
	print FH "csl_testbench tb$k {\n";
	print FH "  csl_signal clk(reg);\n";
	print FH "  b$k b$k\_$one;\n";
	print FH "  tb$k () {\n";
	print FH "    clk.set_attr(clock);\n";
	print FH "    add_logic(clock,clk,10,ps);\n";
	print FH "    set_clock(clk);\n";
	print FH "    register_ios(output);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }



}

#!/usr/bin/perl

#Author Anamaria
#modified by oanab
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

print "Generated tests path : test/csl_test_gen/assign_sp_valid/\n";

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}


foreach (my $k = 1; $k <= 6; $k++) {
    my @a1 = ("p_a1_$k", "p_a2_$k", "s_a1_$k", "s_a2_$k");
    my @a2 = ("p_b1_$k", "p_b2_$k", "p_b3_$k", "s_b1_$k", "s_b2_$k");
    my $ctests;
    if($k <= 3) {   
        foreach my $u (@a1) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        }
    }
    else {
        foreach my $u(@a2) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        } 
        } 
  
}
sub main {     
    my ($k, $ctests, $u) = @_; 
    my $test_name = "assign_sp".$k."_".$u."_legal.csl";
    &createCslFile($test_name, $k, $ctests);
}
   
sub createCslFile {
    my($test_name, $k, $ctests) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen";
    my $val1 = int(rand(500));
    my $val2 = int(rand(500));
   
    if($val1 == 0) { $val1 = 1; }
    if($val2 == 0) { $val2 = 1; }
    if($test_name=~/(_legal)/){
        &mkDir("$path/assign_sp_valid");
        open(FH,">$path/assign_sp_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/assign_sp_invalid"); 
        open(FH,">$path/assign_sp_invalid/$test_name");
    }
    print FH "// Generated by  AnamariaH \n";
    print FH "// Test cases from: assign_test_matrix.odg\n";
    print FH "// Assign signal_port/port_signal in the same unit \n\n";

  

    print FH "csl_unit unit_a{ \n";
    print FH "  csl_port p_a1_$k(input, $val1);\n";
    print FH "  csl_port p_a2_$k(output, $val2); \n";
    print FH "  csl_signal s_a1_$k($val1); \n";
    print FH "  csl_signal s_a2_$k($val2); \n";
   
   
    print FH "  unit_a() { \n"; 
    if($k <= 3) {   
    print FH "    p_a2_$k = s_a2_$k ; \n";
    print FH "    s_a1_$k = p_a1_$k ; \n";
    }
    else{
    print FH "    s_a2_$k = p_a2_$k ; \n";
    print FH "    p_a1_$k = s_a1_$k ; \n";
    }
    
    print FH " } \n";
    print FH "}; \n";

    print FH "csl_unit unit_b{ \n";
    print FH "  csl_port p_b1_$k(input, $val1);\n";
    print FH "  csl_port p_b2_$k(input, $val2); \n";
    print FH "  csl_port p_b3_$k(output,$val1); \n";
    if($k <= 3) {
	print FH "  csl_signal s_b1_$k($val2); \n";
    }
    print FH "  csl_signal s_b2_$k($val1); \n";
  
   
    print FH "   unit_b() { \n"; 
    if($k <= 3) {    
    print FH "    p_b3_$k = s_b2_$k ; \n";
    print FH "    p_b2_$k = s_b1_$k ; \n";
    }
    else{
    print FH "    p_b1_$k = s_b2_$k ; \n";
    }
    print FH " } \n";
    print FH "}; \n";
 
    print FH "csl_unit unit_top{ \n";
    print FH "  unit_a a0(.p_a1_$k(s1_$k),.p_a2_$k(s2_$k)); \n";
    print FH "  unit_b b0(.p_b1_$k(s1_$k),.p_b2_$k(s2_$k),.p_b3_$k(s1_$k)); \n";
    print FH "  csl_signal s1_$k($val1); \n";
    print FH "  csl_signal s2_$k($val2); \n";
    print FH "  unit_top() { \n";  
      
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

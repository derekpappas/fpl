#!/usr/bin/perl

#oanab
#assign with part select

use strict;

print "Generated tests path : test/csl_test_gen/assign_part_sel_sig_invalid/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 300; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "assign_part_sel_sig".$i."_illegal.csl";
   	&createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(20)) + 2;
    my $val2 = int(rand(100)) + 3;
    my $val3 = int(rand(100)) + 4;
    my $l = int(rand(3))+1;
    my $m = $k + int(rand(10)) + 1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/assign_part_sel_sig_valid");
        open(FH,">$path/assign_part_sel_sig_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/assign_part_sel_sig_invalid"); 
        open(FH,">$path/assign_part_sel_sig_invalid/$test_name");
    }
    print FH "//Generated by oanab\n\n";
    print FH "//Test cases from: assign_test_matrix.odg, part_select_matrix.odg\n"; 
#bitranges
    print FH "csl_bitrange br1($val1);\n";
    print FH "csl_bitrange br2($val2);\n";
    print FH "csl_bitrange br3($val3);\n";
    print FH "csl_bitrange br4(".($val2+$val3).");\n";
    print FH "csl_bitrange br5(".($val1+$val3).");\n";

#ifck
    if($i > 150 && $i <= 250) {
	print FH "csl_interface ifc$k {\n";
	print FH "  csl_port p_a$i(input,br3);\n";
	print FH "  csl_port p_b$i(output,$val2);\n";
	print FH "  csl_port p_c$i(input,br1);\n";
	print FH "  csl_port p_d$i(output,br4);\n";
	print FH "  ifc$k () {\n";
	if($i > 200 && $i <= 250) {
	    print FH "    p_b$i = p_c$i;\n";
	}
	print FH "  }\n";
	print FH "};\n\n";
    }

#sgk
    if($i <= 100 || $i > 150 && $i <= 250) {
	print FH "csl_signal_group sg$k {\n";
	print FH "  csl_signal s_a$i(br2);\n";
	print FH "  csl_signal s_b$i(br3);\n";
	print FH "  csl_signal s_c$i(br2);\n";
	print FH "  csl_signal s_d$i(br4);\n";
	print FH "  sg$k () {}\n";
	print FH "};\n\n";
    }

  
#unit a
    print FH "csl_unit a$k {\n";
    if($i <= 50) {
	print FH "  csl_signal s_x$i(br4);\n";
	print FH "  csl_signal s_y$i(br5);\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  csl_port p_z$i(inout,".(3*$val1).");\n";
	print FH "  csl_signal s_x$i(br1);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_port p_a$i(output,".($val1+$val2).");\n";
	print FH "  csl_port p_b$i(input,".($val3+$val2+$val1).");\n";
    } 
    elsif($i > 150 && $i <= 200) {
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  sg$k sg$k\_$zero;\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  ifc$k ifc$k\_$zero;\n";
	print FH "  ifc$k ifc$k\_$one;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  csl_port p_p$i(input,br2);\n";
 	print FH "  csl_port p_m$i(input,br1);\n";
	print FH "  csl_port p_x$i(input,".($val1+$val2).");\n";
	print FH "  csl_port p_y$i(output,br5);\n";
    }
    print FH "  a$k () {\n";
#Invalid assign (different widths) : sig.ps---sig.ps
    if($i <= 50) {
	print FH "    s_x$i\[".($val2+$val3)."\:".($val2)."\] = s_y$i\[".($val1+$val3)."\:".($val1+1)."\];  // Invalid assign (different widths) : sig.ps---sig.ps\n";
    }
#Invalid assign : p.ps---sig.ps
    elsif($i > 50 && $i <= 100) {
	print FH "    p_z$i\[".(3*$val1)."\:".(2*$val1)."\] = s_x$i\[".($val1)."\:".(1)."\];  // Invalid assign : p.ps---sig.ps\n";
    }
#Invalid assign (different widths) : p.ps---p.ps
    elsif($i > 100 && $i <= 150) {
	print FH "    p_a$i\[".($val1+$val2)."\-\:".($val2+1)."\] = p_b$i\[".($val3+$val2)."\:".($val2+2)."\];  // Invalid assign (different widths) : p.ps---p.ps\n";
    }
#Invalid assign (different widths) : ifc.p---sg.sig.ps
    elsif($i > 150 && $i <= 200) {
	print FH "    ifc$k\_$zero.p_c$i = sg$k\_$zero.s_d$i\[".($val2+$val3)."\:".($val2)."\];  // Invalid assign (different widths) : ifc.p---sg.sig.ps\n";
    }
#Invalid assign : ifc---ifc.ps
    elsif($i > 200 && $i <= 250) {
	print FH "    ifc$k\_$zero = ifc$k\_$one\[".($val1+2*$val2+$val3)."\-\:".($val2+$val3)."\];  // Invalid assign : ifc---ifc.ps\n";
    }
#Invalid assign (different widths) : sig---p.ps
    elsif($i > 250 && $i <= 300) {
	print FH "    p_m$i = p_x$i\[".($val1+$val2)."\:".($val2)."\];  // Invalid assign (different widths) : sig---p.ps\n";
	print FH "    p_m$i = p_y$i\[".($val3+$val1)."\-\:".($val1-1)."\];  // Invalid assign (different widths) : sig---p.ps\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i <= 50) {
	print FH "  sg$k sg$k\_$zero;\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_signal s_m$i(".(2*$val1)."\);\n";
	print FH "  csl_signal s_x$i(br1);\n";
	print FH "  csl_signal s_y$i(br5);\n";
	print FH "  csl_port p_x$i(input,".($val3+2*$val1).");\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  csl_signal s_a$i(br3);\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  ifc$k ifc$k\_$one;\n";
	print FH "  sg$k sg$k\_$one;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  csl_signal s_p$i(br2);\n";
	print FH "  csl_port p_a$i(output,br4);\n";
	print FH "  a$k a$k\_$one(.p_p$i(s_p$i));\n";
    }
    print FH "  b$k () {\n";
#Invalid assign (different widths) : sg.sig---sig.ps
    if($i <= 50) {
	print FH "    sg$k\_$zero.s_c$i = a$k\_$zero.s_x$i\[".($val2+$val3)."\-\:".($val2+1)."\];  // Invalid assign (different widths) : sg.sig---sig.ps\n";
    }
#Invalid assign (different widths) : sig.ps---concat expr
    elsif($i > 100 && $i <= 150) {
	print FH "    s_m$i\[".(2*$val1)."\:".($val1+1)."\] = {s_x$i,s_y$i\[".($val1+$val3)."\:".($val3+1)."\]};  // Invalid assign (different widths) : sig.ps---concat expr\n";
    }
#Invalid assign (different widths) : sig---ifc.p.ps
    elsif($i > 150 && $i <= 200) {
	print FH "    s_a$i = ifc$k\_$one.p_a$i\[".($val3)."\:".($val3)."\];  // Invalid assign (different widths) : sig---ifc.p.ps\n";
    }
#Invalid assign : ifc---sg.ps
    elsif($i > 200 && $i <= 250) {
	print FH "    ifc$k\_$one = sg$k\_$one\[".(3*$val2+2*$val3)."\:".($val3)."\];  // Invalid assign : ifc---sg.ps\n";
    }
#Invalid assign : p.ps---sig
    elsif($i > 250 && $i <= 300) {
	print FH "    p_a$i\[".($val2+$val3)."\:".($val3+1)."\] = s_p$i;  // Invalid assign : p.ps---sig\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    if($i <= 50) {
	print FH "  csl_signal s_m$i($val1);\n";
	print FH "  csl_port p_m$i(input,".($val1+$val2).");\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  csl_port p_a$i(output,br2);\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  csl_signal s_x$i($val2);\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  sg$k sg$k\_$one;\n";
	print FH "  csl_port p_z$i(input,".($val3+2*$val2).");\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  csl_signal s_a$i(".($val1+$val3).");\n";
	print FH "  csl_port p_a$i(input,".($val1+$val2).");\n";
    }
    print FH "  c$k () {\n";
#Invalid assign (different widths) : sig---p.ps
    if($i <= 50) {
	print FH "    s_m$i = p_m$i\[".($val1+$val2)."\:".($val2)."\];  // Invalid assign (different widths) : sig---p.ps\n";
    }
#Invalid assign (different widths) : port---sg.sig.ps
    elsif($i > 50 && $i <= 100) {
	print FH "    p_a$i = sg$k\_$one.s_a$i\[".($val2)."\-\:".($val2+1)."\];  // Invalid assign (different widths) : port---sg.sig.ps\n";
    }
#Invalid assign (different widths) : p.ps---sig
    elsif($i > 100 && $i <= 150) {
	print FH "    b$k\_$zero.p_x$i\[".($val3+2*$val1)."\:".($val3+$val1)."\] = s_x$i;  // Invalid assign (different widths) : p.ps---sig\n";
    }
#Invalid assign (different widths) : p.ps---concat expr
    elsif($i > 150 && $i <= 200) {
	print FH "    p_z$i\[".($val3+2*$val2)."\:".($val2)."\] = {sg$k\_$one.s_b$i,sg$k\_$one.s_d$i\[".($val2+$val3)."\-\:".($val3)."\]};  // Invalid assign (different widths) : p.ps---concat expr\n";
    }
#Invalid assign (different widths) : sig---p.ps
    elsif($i > 250 && $i <= 300) {
	print FH "    s_a$i = p_a$i\[".($val2+$val1+$val3)."\-\:".($val1+$val3+1)."\];  // Invalid assign (different widths) : sig---p.ps\n";
    }
    print FH "  }\n";
    print FH "};\n\n";











}

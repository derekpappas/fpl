#!/usr/bin/perl

#Author Petronela
#modified by oanab
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."assign_part_select_sps_op_concat_replic_valid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @lower = (0,6,12,24);
my @upper = (35,59,65,77);
for(my $i=1;$i <=9;++$i){
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            &main($i,$l,$u);
        }
    }
}

sub main {
    my ($i,$l,$u) = @_;
    my $test_name;
    $test_name = "assign_part_select_sps_op_concat_replic".$i."_".$l."_".$u."_legal.csl";
    my $w = $u - $l + 1;
    my $val1 = $u + int(rand(100)) + 1;
    my $val2 = $val1 + int(rand(100)) + 1;
    my $val3 = $val1 + int(rand(30)) + 1;
    my $val4 = $val1 + int(rand(30)) + 1;
    my $val5 = $val1 + int(rand(30)) + 1;
    my $val6 = $w/2;
    my $val7 = $w/3;
    my $val8 = $w/6;
    my $val9 = 2*$w;
    my $val10 = 3*$w;
    my $val11 = 6*$w;
    &mkDir("$path/assign_part_select_sps_op_concat_replic_valid");
    open(FH,">$path/assign_part_select_sps_op_concat_replic_valid/$test_name");
    print FH "//Generated by Petronela\n";
    print FH "//Test cases from: assign_test_matrix.odg, part_select_matrix.odg\n"; 
    print FH "//part select used in assign sig,sig[ps], sg[.+sg].sig[ps],[+sg.]sig with op expr,concat expr.,replication expr. \n\n";
    #print FH "csl_bitrange br($val1);\n";
    #print FH "csl_bitrange brt($val2);\n";
    #print FH "csl_filed f1($val3),f2($val5);\n";

    print FH "csl_signal_group sga {\n";
    print FH "  csl_signal s_sga$i($val1);\n";
    print FH "  csl_signal s_sgga($val2);\n";
    print FH "  csl_signal s_sa($val11);\n";
    print FH "  csl_signal s_sgaa$i($w);\n";
    print FH "  csl_signal s_saa($val10);\n";
    print FH "  sga() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_signal_group sgb {\n";
    print FH "  sga sga0;\n";
#    print FH "  sga sga1;\n";
    print FH "  csl_signal s_sgb$i($val1);\n";
    print FH "  csl_signal s_sggb($val2);\n";
    print FH "  csl_signal s_sb($w);\n";
    print FH "  csl_signal s_sgbb$i($w);\n";
    print FH "  sgb() {\n";
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_unit a {\n";
    if($i <= 3){
	print FH "  csl_signal s_data($val1);\n"; 
	print FH "  csl_signal s_addr1($val6);\n";
	print FH "  sga sga1;\n";
	print FH "  csl_signal s_addr2($val7);\n";
	print FH "  csl_signal s_data2($val7);\n"; 
	print FH "  csl_signal s_addr3($val7);\n";
    }
    elsif($i > 3 && $i <6){
	print FH "  csl_signal s_data($val1);\n"; 
	print FH "  csl_signal s_addr2($val7);\n";
	print FH "  csl_signal s_data3($val8);\n";
	print FH "  sgb sgb1;\n";
    }
    else{
	print FH "  csl_signal s_data($val1);\n";
	print FH "  csl_signal s_data4($w);\n";
	print FH "  csl_signal s_addr1($val6);\n";
	print FH "  csl_signal s_data2($val7);\n";
	print FH "  sgb sgb2;\n";
    }

    print FH "  a() {\n";
    if($i <= 3){
        print FH "    s_data[$u:$l] = {s_data,s_addr1};\n";
        print FH "    sga1.s_sga$i"."[$u:$l] = {s_addr2,s_data2,s_addr3};\n";
        print FH "    sga1.s_sgga[$u:$l] = {s_data,s_addr1};\n";
	print FH "    sga1.s_sa\[".(6*$w-1)."\-\:".(4*$w)."\] = {sga1.s_saa,sga1.s_sgaa$i};\n";
    }
    elsif($i > 3 && $i <6){
        print FH "    s_data[$u:$l] = {2{s_data}};\n";
        print FH "    sgb1.s_sgb$i"."[$u:$l] = {3{s_addr2}};\n";
        print FH "    sgb1.sga0.s_sgga[$u:$l] = {6{s_data3}};\n";
	print FH "    sgb1.s_sggb = sgb1.sga0.s_sgga;\n";
	print FH "    sgb1.sga0.s_sa = {sgb1.sga0.s_saa,sgb1.sga0.s_sgaa$i,sgb1.s_sgbb$i,sgb1.s_sb};\n";
	print FH "    sgb1.sga0.s_sga$i = sgb1.s_sgb$i;\n";
    }
    else{
        print FH "    s_data[$u:$l] = s_data4 & s_addr1;\n";
	print FH "    sgb2.s_sggb = sgb2.sga0.s_sgga;\n";
        print FH "    sgb2.s_sgb$i"."[$u:$l] = s_data2 | s_data4;\n";
	print FH "    sgb2.sga0.s_sa = {sgb2.sga0.s_saa,sgb2.sga0.s_sgaa$i,sgb2.s_sgbb$i,sgb2.s_sb};\n";
        print FH "    sgb2.sga0.s_sgga = ~s_data4;\n";
	print FH "    sgb2.sga0.s_sga$i = sgb2.s_sgb$i;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    print FH "csl_unit b {\n"; 
    if($i <= 3){
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  sga sga2;\n";
	print FH "  csl_signal s_data21($val9);\n";
	print FH "  csl_signal s_addr11($val1);\n";
	print FH "  csl_signal s_addr5($val2);\n";
	print FH "  csl_signal s_addr21($val10);\n";
	print FH "  csl_signal s_data11($val3);\n";
	print FH "  csl_signal s_data5($val1);\n";
    }
    elsif($i >3 && $i<=6){
	print FH "  a a0;\n";
        print FH "  a a1;\n";
#        print FH "  sgb sgb0;\n";
        print FH "  sga sga2;\n";
	print FH "  csl_signal s_data21($val9);\n";
	print FH "  csl_signal s_addr11($val1);\n";
	print FH "  csl_signal s_addr21($val10);\n";
	print FH "  csl_signal s_addr5($val2);\n";
	print FH "  csl_signal s_data5($val1);\n";
	print FH "  csl_signal s_data11($val3);\n";
    }
    else {
        print FH "  a a0;\n";
        print FH "  a a1;\n";
        print FH "  a a2;\n";
        print FH "  sga sga2;\n";
	print FH "  csl_signal s_data11($val3);\n";
	print FH "  csl_signal s_addr11($val1);\n";
	print FH "  csl_signal s_data5($val1);\n";
	print FH "  csl_signal s_addr5($val2);\n";
    }
     
    print FH "  b() {\n";
    if($i <= 3){
        print FH "    s_data21 = {s_addr11[$u:$l],sga2.s_sgga[$u:$l]};\n";
        print FH "    s_addr21 = {s_data11[$u:$l],s_addr5[$u:$l],s_data5[$u:$l]};\n";
        print FH "    sga2.s_saa = {sga2.s_sga$i"."[$u:$l],s_addr5[$u:$l],s_data11[$u:$l]};\n";
	print FH "    sga2.s_sa = {6{sga2.s_sgaa$i}};\n";
    }
    elsif($i >3 && $i<=6){
        print FH "    s_data21 = {2{s_addr11[$u:$l]}};\n";
        print FH "    s_addr21 = {3{s_addr5[$u:$l]}};\n";
        print FH "    sga2.s_sa = {2{s_data5[$u:$l],s_addr5[$u:$l],s_data11[$u:$l]}};\n";
	print FH "    sga2.s_sga$i\[".($val1-1)."\] = sga2.s_sgga\[".($val2-1)."\];\n";
	print FH "    sga2.s_saa = {3{sga2.s_sgaa$i}};\n";
    }
    else{
        print FH "    s_data11 = s_addr11[$u:$l] & s_data5[$u:$l];\n";
	print FH "    sga2.s_sga$i\[".($val1-1)."\] = sga2.s_sgga\[".($val2-1)."\];\n";
        print FH "    s_addr5 = s_data5[$u:$l] | s_addr5[$u:$l];\n";
        print FH "    sga2.s_sgaa$i = ~s_addr5[$u:$l];\n";
	print FH "    sga2.s_sa = {2{sga2.s_saa}};\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i <=3 ){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  sgb sgb2;\n";
	print FH "  csl_signal s_addr32($val7);\n";
	print FH "  csl_signal s_data22($val7);\n"; 
	print FH "  csl_signal s_addr22($val7);\n";
	print FH "  csl_signal s_data12($val6);\n";
	print FH "  csl_signal s_addr12($val6);\n";
    }
    elsif($i >3 && $i<=6){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  sga sga3;\n";
	print FH "  csl_signal s_data22($val7);\n";
	print FH "  csl_signal s_addr12($val6);\n";
    }
    else {
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  b b2;\n";
        print FH "  a a0;\n";
        print FH "  sgb sgb2;\n";
#        print FH "  sga sga3;\n";
	print FH "  csl_signal s_data42($w);\n";
	print FH "  csl_signal s_addr12($val6);\n";
    }
 
    print FH "  c() {\n";
    if($i <= 3){
        print FH "    sgb2.s_sgb$i"."[$u:$l] = {s_addr32,s_data22,s_addr22};\n";
        print FH "    sgb2.sga0.s_sgga[$u:$l] = {s_data12,s_addr12};\n";
	print FH "    sgb2.s_sggb = sgb2.sga0.s_sgga;\n";
	print FH "    sgb2.sga0.s_sa = {3{sgb2.s_sb,sgb2.s_sgbb$i}};\n";
	print FH "    sgb2.sga0.s_saa = {3{sgb2.sga0.s_sgaa$i}};\n";
	print FH "    sgb2.sga0.s_sga$i = sgb2.s_sgb$i;\n";
    }
    elsif($i >3 && $i <=6){
        print FH "    sga3.s_sga$i"."[".(3*$val7-1).":".(0)."] = {3{s_data22}};\n";
        print FH "    sga3.s_sgga[".(2*$val6-1).":".(0)."] = {2{s_addr12}};\n";
	print FH "    sga3.s_sa\[".(6*$w-1)."\:".(2*$w)."\] = {sga3.s_saa,sga3.s_sgaa$i};\n";
    }
    else{
	print FH "    sgb2.sga0.s_sa = {3{sgb2.s_sb,sgb2.s_sgbb$i}};\n";
	print FH "    sgb2.sga0.s_saa = {3{sgb2.sga0.s_sgaa$i}};\n";
        print FH "    sgb2.s_sgb$i"."[$u:$l] = s_data42 & s_addr12;\n";
	print FH "    sgb2.s_sggb = sgb2.sga0.s_sgga;\n";
        print FH "    sgb2.sga0.s_sgga[$u:$l] = ~s_data42;\n";
	print FH "    sgb2.sga0.s_sga$i = sgb2.s_sgb$i;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i <= 3){
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
	print FH "  csl_signal s_data7($val1);\n"; 
	print FH "  csl_signal s_addr23($val7);\n";
	print FH "  csl_signal s_data23($val7);\n";
	print FH "  csl_signal s_addr7($val4);\n";
	print FH "  csl_signal s_data13($val6);\n";
	print FH "  csl_signal s_addr13($val6);\n";
	print FH "  csl_signal s_addr33($val7);\n";
    }
    elsif($i >3 && $i <=6){
	print FH "  b b0;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
#        print FH "  sga sga4;\n";
	print FH "  csl_signal s_data7($val1);\n"; 
	print FH "  csl_signal s_addr33($val7);\n";
	print FH "  csl_signal s_addr7($val4);\n";
	print FH "  csl_signal s_data13($val6);\n";
    }
    else {
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  c c2;\n";
#        print FH "  sgb sgb3;\n";
	print FH "  csl_signal s_data7($val1);\n";
	print FH "  csl_signal s_addr23($val7);\n";
	print FH "  csl_signal s_data43($w);\n";
	print FH "  csl_signal s_addr7($val4);\n";
	print FH "  csl_signal s_addr13($val6);\n";
    }
 
    print FH "  d() {\n";
    if($i <= 3) {
        print FH "    s_data7[$u:$l] = {s_data23,s_addr23,s_addr33};\n";
        print FH "    s_addr7[$u:$l] = {s_data13,s_addr13};\n";
       
    }
    elsif($i > 3 && $i <=6) {
        print FH "    s_data7[$u:$l] = {3{s_addr33}};\n";
        print FH "    s_addr7[$u:$l] = {2{s_data13}};\n";
    }
    else{
        print FH "    s_data7[$u:$l] = s_addr23 | s_data43;\n";
        print FH "    s_addr7[$u:$l] = s_data43 & s_addr13;\n"; 
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    print FH "csl_unit e {\n";  
    if($i <= 3){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  b b0;\n";
        print FH "  b b1;\n";
        print FH "  c c0;\n";
        print FH "  sga sga5;\n";
#        print FH "  sgb sgb4;\n";
	print FH "  csl_signal s_addr24($val10);\n";
	print FH "  csl_signal s_data8($val1);\n";
	print FH "  csl_signal s_addr8($val2);\n";
	print FH "  csl_signal s_addr14($val4);\n";
    }
    elsif($i > 3 && $i <=6) {
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  c c0;\n";
        print FH "  sgb sgb4;\n";
#	print FH "  csl_signal s_addr24($val10);\n";
	print FH "  csl_signal s_addr8($val2);\n";
	print FH "  csl_signal s_addr14($val4);\n";
	print FH "  csl_signal s_data8($val1);\n";
    }
    else {
	print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  c c0;\n";
        print FH "  c c1;\n";
        print FH "  c c2;\n";
        print FH "  sga sga4;\n";
	print FH "  csl_signal s_addr8($val2);\n";
	print FH "  csl_signal s_addr14($val4);\n";
	print FH "  csl_signal s_data8($val1);\n";
    }

    print FH "  e() {\n";
    if($i <= 3) {
        print FH "    s_addr24 = {sga5.s_sgga[$u:$l],s_data8[$u:$l]};\n";
        print FH "    sga5.s_saa = {s_addr14[$u:$l],sga5.s_sga$i"."[$u:$l],s_addr8[$u:$l]};\n";
	print FH "    sga5.s_sa = {6{sga5.s_sgaa$i}};\n";
    }
    elsif($i >3 && $i <= 6) {
#        print FH "    s_addr24 = {2{s_addr8[$u:$l]}};\n";
        print FH "    sgb4.sga0.s_sa = {2{s_addr14[$u:$l],s_data8[$u:$l],s_addr8[$u:$l]}};\n";
	print FH "    sgb4.s_sggb = sgb4.sga0.s_sgga;\n";
	print FH "    sgb4.sga0.s_sa = {3{sgb4.s_sb,sgb4.s_sgbb$i}};\n";
	print FH "    sgb4.sga0.s_saa = {3{sgb4.sga0.s_sgaa$i}};\n";
	print FH "    sgb4.sga0.s_sga$i = sgb4.s_sgb$i;\n";
    }
    else{
	print FH "    sga4.s_sa = {6{sga4.s_sgaa$i}};\n";
        print FH "    s_addr8 = ~s_addr8[$u:$l];\n";
        print FH "    sga4.s_sgga = s_addr14[$u:$l] & s_data8[$u:$l];\n"; 
	print FH "    sga4.s_sga$i\[".($val1-1)."\] = sga4.s_saa\[".($val10-1)."\];\n";
    }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i <= 3){
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  d d2;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
	print FH "  csl_signal s_data25($val9);\n";
	print FH "  csl_signal s_data9($val1);\n";
	print FH "  csl_signal s_addr9($val2);\n";
	print FH "  csl_signal s_addr15($val4);\n";
	print FH "  csl_signal s_data15($val3);\n";
	print FH "  csl_signal s_addr25($val10);\n";
    }
    elsif($i >3 && $i <= 6) {
	print FH "  d d0;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
        print FH "  sgb sgb5;\n";
	print FH "  csl_signal s_data9($val1);\n";
	print FH "  csl_signal s_addr15($val4);\n";
	print FH "  csl_signal s_data35($val11);\n";
	print FH "  csl_signal s_data15($val3);\n";
    }
    else{
        print FH "  d d0;\n";
        print FH "  d d1;\n";
        print FH "  e e0;\n"; 
        print FH "  e e1;\n"; 
        print FH "  e e2;\n";
        print FH "  a a0;\n";
	print FH "  csl_signal s_data9($val1);\n";
	print FH "  csl_signal s_addr9($val2);\n";
	print FH "  csl_signal s_addr15($val4);\n";
    }

    print FH "  top(){\n";
    if($i <= 3) {
        print FH "    s_data25 = {s_data9[$u:$l],s_addr15[$u:$l]};\n";
        print FH "    s_addr25 = {s_data15[$u:$l],s_data9[$u:$l],s_addr9[$u:$l]};\n"; 
    }
    elsif($i >3 && $i <= 6) {
        print FH "    sgb5.sga0.s_sa = {3{s_data9[$u:$l],s_addr15[$u:$l]}};\n";
	print FH "    sgb5.s_sggb = sgb5.sga0.s_sgga;\n";
	print FH "    sgb5.sga0.s_sa = {3{sgb5.s_sb,sgb5.s_sgbb$i}};\n";
	print FH "    sgb5.sga0.s_saa = {3{sgb5.sga0.s_sgaa$i}};\n";
	print FH "    sgb5.sga0.s_sga$i = sgb5.s_sgb$i;\n";
        print FH "    s_data35 = {6{s_data15[$u:$l]}};\n";       
    }
    else{
        print FH "    s_data9 = s_data9[$u:$l] | s_addr15[$u:$l];\n";
        print FH "    s_addr9 = ~s_data9[$u:$l];\n"; 
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

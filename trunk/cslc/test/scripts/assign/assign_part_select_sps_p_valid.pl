#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."assign_part_select_sps_p_valid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

my @lower = (0,3,10,23);
my @upper = (32,51,64,80);
for(my $i=1;$i <=3;++$i){
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            &main($i,$l,$u);
        }
    }
}

sub main {
    my ($i,$l,$u) = @_;
    my $test_name;
    $test_name = "assign_part_select_sps_p".$i."_".$l."_".$u."_legal.csl";
    my $val1 = $u + int(rand(100)) + 1;
    my $w = $u - $l + 1;
    my $val2 = $val1 + int(rand(100)) + 1;
    my $val3 = $val1 + int(rand(30)) + 1;
    my $val4 = $val1 + int(rand(30)) + 1;
    my $val5 = $val1 + int(rand(30)) + 1;
    &mkDir("$path/assign_part_select_sps_p_valid");
    open(FH,">$path/assign_part_select_sps_p_valid/$test_name");
    
    print FH "//Generated by Petronela\n";
   print FH "//Test cases from: assign_test_matrix.odg, part_select_matrix.odg\n"; 
    print FH "//part select used in assign sig[ps], sg[.+sg].sig[ps] with port parent input,child output,parent inout \n";
    print FH "//and port parent output,child input,parent inout with  sig[ps], sg[.+sg].sig[ps]\n\n";
    #print FH "csl_bitrange br($val1);\n";
    #print FH "csl_bitrange brt($val2);\n";
    #print FH "csl_filed f1($val4),f2($val5);\n";
    print FH "csl_signal_group sga {\n";
    print FH "  csl_signal s_sga$i($val1);\n";
    print FH "  csl_signal s_sgga($val2);\n";
    print FH "  csl_signal s_sa($w);\n";
    print FH "  csl_signal s_sgaa$i($w);\n";
    print FH "  sga() {\n";
    print FH "  }\n";
    print FH "};\n\n";
    print FH "csl_signal_group sgb {\n";
    print FH "  sga sga0;\n";
    print FH "  csl_signal s_sgb$i($val1);\n";
    print FH "  csl_signal s_sggb($val2);\n";
    print FH "  csl_signal s_sb($w);\n";
    print FH "  csl_signal s_sgbb$i($w);\n";
    print FH "  sgb() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    
    print FH "csl_unit a {\n";
#    print FH "  sgb sgb0;\n";
    print FH "  csl_signal s_data($val1);\n"; 
    print FH "  csl_signal s_addr($val4);\n";
    print FH "  csl_port p_data1(input,$w);\n";
    print FH "  csl_port p_addr1(output,$w);\n"; 
#    print FH "  csl_signal s_addr2($w);\n";
#    print FH "  csl_signal s_data2($w);\n"; 
    print FH "  csl_port p_addr3(inout,$w);\n";
   
    
    print FH "  a() {\n";
    print FH "    s_data[$u:$l] = p_data1;\n";
    print FH "    p_addr1 = s_data[$u:$l];\n";
    print FH "    s_addr[$u:$l] = p_addr3;\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    if($i >= 2 ){
        print FH "csl_unit f {\n";
        print FH "  csl_signal s_data($val1);\n"; 
        print FH "  csl_port p_addr(input,$w);\n";
#        print FH "  csl_signal s_data1($val1);\n";
        print FH "  f() {\n";  
        print FH "    s_data[$u:$l] = p_addr;\n";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }

    print FH "csl_unit b {\n"; 
    if($i < 2){
        print FH "  a a0(.p_data1(sga2.s_sa),.p_addr1(sga2.s_sgaa$i),.p_addr3(p_data31));\n";
        print FH "  a a1(.p_data1(s_addr2),.p_addr1(p_addr11),.p_addr3(p_data31));\n";
        print FH "  sga sga2;\n";
	print FH "  csl_signal s_data4($val1);\n";
	print FH "  csl_port p_addr11(output,$w);\n";
	print FH "  csl_port p_data31(inout,$w);\n";
	print FH "  csl_signal s_addr2($w);\n";
    }
    else {
        print FH "  sgb sgb1;\n";
        print FH "  f f0(.p_addr(sgb1.s_sb));\n";
        print FH "  f f1(.p_addr(sgb1.sga0.s_sgaa$i));\n";
        print FH "  a a0(.p_data1(sgb1.sga0.s_sa),.p_addr1(sgb1.sga0.s_sgaa$i),.p_addr3(sgb1.s_sgbb$i));\n";
    }
    print FH "  b() {\n";
    if($i < 2){
	print FH "    s_data4[$u:$l] = p_addr11;\n";
	print FH "    sga2.s_sgga[$u:$l] = p_data31;\n";
	print FH "    s_addr2[".(0)."] = sga2.s_sga$i"."[".($val1-1)."];\n";
    }
    else {
	print FH "    sgb1.sga0.s_sga$i = sgb1.s_sgb$i;\n";
	print FH "    sgb1.sga0.s_sgga = sgb1.s_sggb;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";
    if($i < 2){
        print FH "  b b0(.p_addr11(p_addr12),.p_data31(sgb2.s_sb));\n";
        print FH "  b b1(.p_addr11(sgb2.s_sgbb$i),.p_data31(p_data32));\n";
        print FH "  sgb sgb2;\n";
	print FH "  csl_port p_data32(inout,$w);\n";
	print FH "  csl_port p_addr12(output,$w);\n";
    }
    else {
        print FH "  b b0;\n";
	print FH "  sga sga2;\n";
	print FH "  csl_signal s_data22($w);\n";
	print FH "  csl_signal s_addr22($w);\n";
	print FH "  csl_port p_data2(input,$val2);\n";
    }
    print FH "  c() {\n";
    if($i < 2){
	print FH "    p_data32 = sgb2.s_sgb$i"."[$u:$l] ;\n"; 
	print FH "    sgb2.sga0.s_sgga[".($val2-1)."] = sgb2.sga0.s_sga$i"."[".($val1-1)."];\n";
	print FH "    p_addr12 = sgb2.s_sggb[$u:$l];\n";
	print FH "    sgb2.sga0.s_sa = sgb2.sga0.s_sgaa$i;\n";
    }
    else {
	print FH "    sga2.s_sgga[$u:$l] = s_addr22;\n";
	print FH "    s_data22 = p_data2[$u:$l];\n";
	print FH "    sga2.s_sgga[".($val2-1)."] = sga2.s_sga$i"."[".($val1-1)."];\n";
	print FH "    sga2.s_sa = sga2.s_sgaa$i;\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
    if($i < 2){
        print FH "  c c0(.p_data32(sgb4.sga0.s_sgaa$i),.p_addr12(sgb4.s_sgbb$i));\n";
        print FH "  c c1(.p_data32(sgb4.s_sb),.p_addr12(p_addr13));\n";
        print FH "  sgb sgb4;\n";
	print FH "  csl_port p_addr13(output,$w);\n";
	print FH "  csl_port p_data13(input,$w);\n";
	print FH "  csl_signal s_data6($val2);\n";
    }
    else {
        print FH "  c c0(.p_data2(sga3.s_sgga));\n";
        print FH "  sga sga3;\n";
	print FH "  csl_port p_addr13(output,$w);\n";
	print FH "  csl_port p_data13(input,$w);\n";
    }
    print FH "  d() {\n";
    if($i < 2) {
        print FH "    sgb4.s_sggb[$u:$l] = p_addr13;\n";
        print FH "    p_data13 = s_data6[$u:$l];\n";
	print FH "    sgb4.sga0.s_sa = sgb4.s_sggb[$u:$l];\n";
	print FH "    sgb4.sga0.s_sga$i = sgb4.s_sgb$i;\n";
	print FH "    sgb4.sga0.s_sgga = sgb4.s_sggb;\n";      
    }
    elsif($i >= 2) {
        print FH "    p_data13 = sga3.s_sgga[$u:$l];\n";
        print FH "    p_addr13 = sga3.s_sga$i"."[$u:$l];\n";
	print FH "    sga3.s_sa = sga3.s_sgaa$i;\n";

    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    print FH "csl_unit e {\n";  
    if($i < 2){
        print FH "  d d0(.p_addr13(sga4.s_sa),.p_data13(sga4.s_sgaa$i));\n";
        print FH "  sga sga4;\n";
	print FH "  csl_port p_data14(input,$w);\n";
	print FH "  csl_signal s_data7($val1);\n";
	print FH "  csl_port p_data34(inout,$w);\n";
    }
    elsif($i >= 2) {
        print FH "  d d0(.p_addr13(sgb3.sga0.s_sa),.p_data13(sgb3.s_sb));\n";
        print FH "  d d1(.p_addr13(sgb3.s_sgbb$i),.p_data13(sgb3.sga0.s_sgaa$i));\n";
        print FH "  sgb sgb3;\n";
	print FH "  csl_port p_addr14(output,$w);\n";
	print FH "  csl_signal s_data7($val1);\n";
	print FH "  csl_signal s_addr7($val1);\n";
    }
    print FH "  e() {\n";
    if($i == 1) {
        print FH "    p_data14 = sga4.s_sgga[$u:$l];\n";
        print FH "    s_data7[$u:$l] = p_data34;\n";
	print FH "    sga4.s_sga$i = s_data7;\n";
    }
    elsif($i >= 2) {
        print FH "    p_addr14 = s_data7[$u:$l];\n";
        print FH "    p_addr14 = s_addr7[$u:$l];\n";
	print FH "    sgb3.sga0.s_sga$i = sgb3.s_sgb$i;\n";
	print FH "    sgb3.sga0.s_sgga = sgb3.s_sggb;\n"; 
    }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit top {\n";
    if($i < 2){
        print FH "  e e0(.p_data14(p_data15),.p_data34(p_addr15));\n"; 
	print FH "  csl_port p_data15(input,$w);\n";
	print FH "  csl_signal s_addr8($val1);\n";
	print FH "  csl_signal s_data8($val1);\n";
	print FH "  csl_port p_addr15(output,$w);\n";
    }
    elsif($i >= 2) {
        print FH "  e e0(.p_addr14(sga5.s_sa));\n"; 
        print FH "  e e1(.p_addr14(sga5.s_sgaa$i));\n"; 
	print FH "  sga sga5;\n";
	print FH "  csl_port p_addr15(output,$w);\n";
	print FH "  csl_signal s_data8($val1);\n";
	print FH "  csl_signal s_addr8($val1);\n";
	print FH "  csl_port p_data35(inout,$w);\n";
    }
    print FH "  top(){\n";
    if($i == 1) {
        print FH "    p_data15 = s_addr8[$u:$l];\n";
        print FH "    s_data8[$u:$l] = p_addr15;\n";
        print FH "    s_addr8[$u:$l] = p_addr15;\n"; 
    }
    elsif($i >= 2) {
        print FH "    p_addr15 = s_data8[$u:$l];\n";
        print FH "    s_addr8[$u:$l] = p_addr15;\n";
        print FH "    p_data35 = sga5.s_sgga[$u:$l];\n";
	print FH "    sga5.s_sga$i = s_addr8;\n";
        
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}


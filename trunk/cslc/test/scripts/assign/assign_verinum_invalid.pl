#!/usr/bin/perl

#Author Petronela
use strict;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "the path for the generated tests is : $path"."assign_verinum_invalid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}


for(my $i = 1;$i <= 50; $i++){
    &main($i);
}

sub main {
    my ($i) = $_[0];
    my $test_name = "assign_verinum".$i."_illegal.csl";
    &createCslFile($test_name, $i);
}

sub binar {
    my $val11 = int(rand(7)) + 2;
    my $val12 = 1;
    for(my $v = 1; $v < $val11; $v++){
        $val12 = $val12 * 10;
    }
    my $val13 = int(rand($val11)) - 1;
    my $val14 = 1;
    for(my $s = 1; $s < $val13; $s++){
        $val14 = $val14 * 10;
    }
    $val12 = $val12 + $val14;
    my @array=($val11,$val12);
    return @array;
}

sub createCslFile {
    my($test_name, $i,$var) = @_;
    my $val1 = int(rand(60)) + 1;
    my $val2 = $val1 + int(rand(60)) + 1;
    if($val1 % 2 != 0){
        $val1 = $val1 +1;
    }
    my $val25 = abs ($val1 - $val2);
    my $val3 = $val1/2;
    my $val5 = int(rand(80)) + 1;
    my $val10 = int(rand(100)) + 1;
    my ($val6,$val7) = &binar; 
    my ($val8,$val9) = &binar;
    my ($val11,$val12) = &binar; 
    my ($val13,$val14) = &binar;
    my ($val15,$val16) = &binar;
    my ($val17,$val18) = &binar;
    my ($val19,$val20) = &binar;
    my $val66 = $val6 + $val8;
    if($val11 % 2 != 0){
        $val11 = $val11 +1;
    }
    my $val3 = $val11/2;
    if($val13 % 2 != 0){
        $val13 = $val13 +1;
    }
    my $val4 = $val13/2;
    my $val22 = int(rand(3)) + 2;
    my $val21 = sprintf("%.".$val22."x",$val5);
    my $val23 = int(rand(3)) + 2;
    my $val24 = sprintf("%.".$val23."x",$val10);
    $val23 = $val23 * 4;
    my $val31 = sprintf("%.".$val22."x",$val1+$val5);
    my $val32 = sprintf("%.".$val22."x",$val1+$val5-1);
    my $val33 = sprintf("%.".$val22."x",$val10+$val5);
    my $val34 = sprintf("%.".$val22."x",$val10+$val5-1);
    $val22 = $val22 * 4;
    &mkDir("$path/assign_verinum_invalid/");
    open(FH,">$path/assign_verinum_invalid/$test_name");

    print FH "//Generated by Petronela\n";
      print FH "// Test cases from: assign_test_matrix.odg\n";
    print FH "//testing verinum in assign statements -- invalid tests\n\n";
    print FH "csl_unit a {\n";
    print FH "  csl_port p_data(input,$val6 \'b$val7);\n"; 
    print FH "  csl_port p_addr(output,$val22 \'h$val21);\n";
    print FH "  csl_port p_data1(input,$val23 \'h$val24);\n";
    print FH "  csl_signal s_addr1($val8 \'b$val9);\n";
    print FH "  csl_port p_data2(input,$val66);\n"; 
    print FH "  csl_signal s_addr2($val3);\n";
    print FH "  csl_signal s_data3($val2);\n";
    print FH "  csl_signal s_addr3($val66);\n";
    print FH "  a() {\n";
    print FH "    p_data1 = p_data2;\n";
    print FH "    s_addr1 = s_addr3;\n";
    print FH "    p_addr = s_addr2;\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    if($i > 10){
        print FH "csl_unit b {\n";
        print FH "  a a0;\n";
        print FH "  csl_port p_data4(input,$val11 \'b$val12);\n"; 
        print FH "  csl_port p_addr4(output,$val8);\n";
        print FH "  csl_port p_data11(input,$val6);\n";
        print FH "  csl_signal s_addr11($val13 \'b$val14);\n";
        print FH "  csl_port p_data21(input,$val4);\n"; 
        print FH "  csl_signal s_addr21($val1);\n";
        print FH "  csl_signal s_data31($val2);\n";
        print FH "  csl_signal s_addr31($val8);\n";
        print FH "  b() {\n";
        print FH "    p_data4 = {p_addr4,p_data11};\n";
        print FH "    s_addr11 = {2{p_data21}};\n";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    if($i > 20){
        print FH "csl_unit c {\n";
        print FH "  b b0;\n";
        print FH "  csl_port p_data5(input,$val22 \'h$val21);\n"; 
        print FH "  csl_port p_addr5(output,$val22 \'h$val31);\n";
        print FH "  csl_port p_data12(input,$val1);\n";
        print FH "  csl_signal s_addr12($val23 \'h$val24);\n";
        print FH "  csl_port p_data22(input,$val22 \'h$val33);\n"; 
        print FH "  csl_signal s_addr22($val5);\n";
        print FH "  csl_signal s_data32($val2);\n";
        print FH "  csl_signal s_addr32($val8);\n";
        print FH "  c() {\n";
        print FH "    p_data12 = p_addr5[$val22 \'h$val31: $val22 \'h$val21];\n";
        print FH "    s_addr22 = p_data22[$val22 \'h$val33:$val23 \'h$val24];\n";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    if($i > 30){
        print FH "csl_unit d {\n";
        print FH "  c c0;\n";
        print FH "  csl_port p_data5(input,$val22);\n"; 
        print FH "  csl_port p_addr5(output,$val22 \'h$val31);\n";
        print FH "  csl_port p_data12(input,$val3);\n";
        print FH "  csl_signal s_addr12($val23 \'h$val24);\n";
        print FH "  csl_port p_data22(input,$val22 \'h$val33);\n"; 
        print FH "  csl_signal s_addr22($val13);\n";
        print FH "  csl_signal s_data32($val2);\n";
        print FH "  csl_signal s_addr32($val8);\n";
        print FH "  d() {\n";
        print FH "    s_data32.set_offset($val22 \'h$val31);\n";
        print FH "    s_addr22.set_width($val13 \'b$val14);\n ";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    if($i > 40){
        print FH "csl_unit top {\n";
        print FH "  d d0;\n";
        print FH "  csl_port p_data6(input,$val15 \'b$val16);\n"; 
        print FH "  csl_port p_addr6(output,$val11 \'b$val12);\n";
        print FH "  csl_port p_data13(input,$val1);\n";
        print FH "  csl_signal s_addr13($val13 \'b$val14);\n";
        print FH "  csl_port p_data23(input,$val4);\n"; 
        print FH "  csl_signal s_addr23($val2);\n";
        print FH "  csl_signal s_data33($val22 \'h$val21);\n";
        print FH "  csl_signal s_addr33($val3);\n";
        print FH "  top() {\n";
        print FH "    p_data13 = $val17 \'b$val18;\n";
        print FH "    s_data33 = $val19 \'b$val20;\n";
        print FH "    s_addr33 = $val23 \'h$val24;\n";
        print FH "  }\n";        
        print FH "};\n";        
        print FH "\n";
    }
    
    close(FH);
}

#!/usr/bin/perl

#Author Anamaria
#modified by oanab
use strict;

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

print "Generated tests path : test/csl_test_gen/assign_concat_repl_valid/\n";

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}


foreach (my $k = 1; $k <= 15; $k++) {
    my @a1 = ("p_a1_$k", "p_a2_$k", "p_a3_$k", "p_a4_$k", "p_a5_$k", "p_b1_$k", "p_b2_$k", "p_b3_$k", "p_b4_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_top_$k");
    my @a2 = ("p_a3_$k", "p_a4_4k", "p_b1_$k", "p_b3_$k", "p_top1_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_b3_$k", "s_top_$k");
    my @a3 = ("p_a1_$k", "p_a2_$k", "p_a3_$k", "p_a4_$k", "p_a5_$k", "p_b1_$k", "p_b2_$k", "p_b3_$k", "p_b4_$k", "p_top1_$k", "p_top2_$k", "s_a1_$k", "s_a2_$k", "s_b1_$k", "s_b2_$k", "s_top_$k");
    my $ctests;
    if($k <= 5) {   
        foreach my $u (@a1) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        }
    }
    elsif($k > 5 && $k <= 10) {
         foreach my $u(@a2) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        } 
     }
    elsif($k > 10 && $k <= 15) {
         foreach my $u(@a3) {
            $ctests = $u; 
            &main($k, $ctests, $u);
        } 
     }
}
sub main {     
    my ($k, $ctests, $u) = @_; 
    my $test_name = "assign_concat_repl".$k."_".$u."_legal.csl";
    &createCslFile($test_name, $k, $ctests);
}
   
sub createCslFile {
    my($test_name, $k, $ctests) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen";
    my $val1 = 100;
    my $val2 = 50;
     
    my $val3 = $val1 + $val2;
    my $val4 = 2 * $val1 ;
    my $val5 = 2 * $val3 ;
    my $val6 = 2 * $val4 ;
    
    if($test_name=~/(_legal)/){
        &mkDir("$path/assign_concat_repl_valid");
        open(FH,">$path/assign_concat_repl_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/assign_concat_repl_invalid"); 
        open(FH,">$path/assign_concat_repl_invalid/$test_name");
    }
    print FH "// Generated by  AnamariaH \n";
    print FH "// Assign port/signals_concat_signals/ports in expression. \n";
    print FH "// Test cases from test matrix: assign_test_matrix.odg \n\n";
  

    print FH "csl_unit unit_a{ \n";

    
    if($k <= 5) {
    print FH "csl_signal s_a1_$k($val3);\n";
    print FH "csl_signal s_a2_$k($val1);\n";
    print FH "csl_port p_a1_$k(input, $val2);\n";
    print FH "csl_port p_a2_$k(input, $val2);\n";
    print FH "csl_port p_a3_$k(input, $val1);\n";
    print FH "csl_port p_a4_$k(output, $val1);\n";
    print FH "csl_port p_a5_$k(output, $val1);\n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "csl_signal s_a1_$k($val2);\n";
    print FH "csl_signal s_a2_$k($val2);\n";
    print FH "csl_port p_a3_$k(input, $val2);\n";
    print FH "csl_port p_a4_$k(output, $val2);\n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "csl_signal s_a1_$k($val1);\n";
    print FH "csl_signal s_a2_$k($val1);\n";
    print FH "csl_port p_a1_$k(input, $val1);\n";
    print FH "csl_port p_a2_$k(input, $val1);\n";
    print FH "csl_port p_a3_$k(input, $val1);\n";
    print FH "csl_port p_a4_$k(output, $val2);\n";
    print FH "csl_port p_a5_$k(output, $val2);\n";
    }

    print FH "  unit_a() { \n"; 
    if($k <= 5) { 
    print FH "    s_a1_$k = {p_a1_$k & p_a2_$k , p_a3_$k} ; \n";
    print FH "    s_a2_$k = {p_a4_$k | p_a5_$k , p_a5_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports. \n \n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "   p_a3_$k = {s_a1_$k ^ s_a2_$k} ;  \n";
    print FH "   p_a4_$k = {s_a2_$k & s_a1_$k} ;  \n";
    print FH " //Assign port_expression_concat_signals. \n \n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "    s_a1_$k = {p_a1_$k & p_a2_$k && p_a3_$k} ; \n";
    print FH "    s_a2_$k = {p_a4_$k & p_a5_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports. \n \n";
    }
    
    print FH " } \n";
    print FH "}; \n";

    print FH "csl_unit unit_b{ \n";
   
    if($k <= 5) {
    print FH "csl_signal s_b1_$k($val6);\n";
    print FH "csl_signal s_b2_$k($val5); \n";
#    print FH "csl_signal s_b3_$k($val3); \n";
    print FH "csl_port p_b1_$k(input, $val1);\n";
    print FH "csl_port p_b2_$k(input, $val1);\n";
    print FH "csl_port p_b3_$k(output, $val1);\n";
    print FH "csl_port p_b4_$k(output, $val1);\n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "csl_signal s_b1_$k($val2);\n";
    print FH "csl_signal s_b2_$k($val2); \n";
    print FH "csl_signal s_b3_$k($val1); \n";
    print FH "csl_signal s_a1_$k($val2);\n";
    print FH "csl_signal s_a2_$k($val2);\n";
    print FH "csl_port p_b1_$k(input, $val3);\n";
    print FH "csl_port p_b3_$k(output, $val1);\n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "csl_signal s_b1_$k($val3);\n";
    print FH "csl_signal s_b2_$k($val4); \n";
    print FH "csl_port p_b1_$k(input, $val3);\n";
    print FH "csl_port p_b2_$k(input, $val3);\n";
    print FH "csl_port p_b3_$k(output, $val4);\n";
    print FH "csl_port p_b4_$k(output, $val4);\n";
    }
    print FH "   unit_a a0; \n";
    print FH "   unit_b() { \n"; 
    if($k <= 5) {    
    print FH "    s_b1_$k = {p_b3_$k ^ p_b4_$k , p_b3_$k & p_b4_$k} ; \n";
    print FH "    s_b2_$k = {p_b1_$k & p_b2_$k , p_b2_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports. \n \n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "   p_b1_$k = {{s_b1_$k | s_b2_$k},{s_b3_$k}} ; \n";
    print FH "   p_b3_$k = {{s_b1_$k & s_a1_$k},{s_b2_$k & s_a2_$k}} ; \n";
    print FH " //Assign port_expression_concat_signals. \n \n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "    s_b1_$k = {p_b1_$k & p_b2_$k} ; \n";
    print FH "    s_b2_$k = {p_b3_$k & p_b4_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports. \n \n";
    }
    print FH " } \n";
    print FH "}; \n";
 
    print FH "csl_unit unit_top{ \n";
  
    if($k <= 5) {
    print FH "csl_signal s_top_$k($val4); \n";
    print FH "csl_port p_a4_$k(output, $val2);\n";
    print FH "csl_port p_a5_$k(output, $val2);\n";
    print FH "csl_port p_b3_$k(output, $val1);\n";
    print FH "csl_signal s1_$k($val1); \n";
    print FH "csl_signal s2_$k($val2); \n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "csl_port p_top1_$k(output, $val5); \n";
    print FH "csl_signal s_top_$k($val4); \n";
    print FH "csl_signal s_a1_$k($val2);\n";
    print FH "csl_signal s_a2_$k($val2);\n";
    print FH "csl_signal s_b2_$k($val2); \n";
    print FH "csl_signal s1_$k($val1); \n";
    print FH "csl_signal s3_$k($val3); \n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "csl_port p_top1_$k(input, $val5); \n"; 
    print FH "csl_port p_top2_$k(input, $val5); \n"; 
    print FH "csl_signal s_top_$k($val5); \n";
    print FH "csl_signal s1_$k($val1); \n";
    print FH "csl_signal s2_$k($val2); \n";
    print FH "csl_signal s3_$k($val3); \n";
    print FH "csl_signal s4_$k($val4); \n";
    }
    if($k <= 5) {
	print FH "  unit_b b0(.p_b1_$k(s1_$k),.p_b2_$k(s1_$k),.p_b3_$k(s1_$k),.p_b4_$k(s1_$k)); \n";
	print FH "  unit_a a1(.p_a1_$k(s2_$k),.p_a2_$k(s2_$k),.p_a3_$k(s1_$k),.p_a4_$k(p_b3_$k),.p_a5_$k(s1_$k)); \n";
    }
    elsif($k > 5 && $k <= 10) {
	print FH "  unit_b b0(.p_b1_$k(s3_$k),.p_b3_$k(s1_$k)); \n";
	print FH "  unit_a a1(.p_a3_$k(s_a1_$k),.p_a4_$k(s_a2_$k)); \n";
    }
    elsif($k > 10 && $k <= 15) {
	print FH "  unit_b b0(.p_b1_$k(s3_$k),.p_b2_$k(s3_$k),.p_b3_$k(s4_$k),.p_b4_$k(s4_$k)); \n";
	print FH "  unit_a a1(.p_a1_$k(s1_$k),.p_a2_$k(s1_$k),.p_a3_$k(s1_$k),.p_a4_$k(s2_$k),.p_a5_$k(s2_$k)); \n";
    }
    print FH "  unit_top() { \n";  
    if($k <= 5) {    
    print FH "    s_top_$k = {p_a4_$k | p_a5_$k , p_b3_$k && p_a5_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports. \n \n";
    }
    elsif($k > 5 && $k <= 10) {
    print FH "   p_top1_$k = {{s_a1_$k & s_a2_$k},{s_a1_$k | s_a1_$k},{s_b2_$k ^ s_top_$k}} ; \n";
    print FH " //Assign port_expression_concat_signals. \n \n";
    }
    elsif($k > 10 && $k <= 15) {
    print FH "    s_top_$k = {p_top1_$k | p_top2_$k} ; \n";
    print FH "// Assign signal_expression_concat_ports. \n \n";
    }   
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);

}

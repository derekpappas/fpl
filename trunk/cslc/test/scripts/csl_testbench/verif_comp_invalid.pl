#!/usr/bin/perl

#oanab
#verif comp methods; part select also

use strict;

print "Generated tests path : test/csl_test_gen/verif_comp_invalid/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 300; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "verif_comp".$i."_illegal.csl";
   	&createCslFile($test_name, $i, %dir);
}

sub createCslFile {
    my ($test_name, $i, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(20))+1;
    my $val2 = int(rand(100))+2;
    my $val3 = int(rand(100))+3;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/verif_comp_valid");
        open(FH,">$path/verif_comp_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/verif_comp_invalid"); 
        open(FH,">$path/verif_comp_invalid/$test_name");
    }
    print FH "//Generated by oanab\n\n";

    
#interface ifc
    if($i > 50 && $i <= 100 || $i > 150 && $i <= 250) {
	print FH "csl_interface ifc$k {\n";
	print FH "  csl_port p_x$i(input,$val1);\n";
	print FH "  csl_port p_y$i(output,$val2);\n";
	print FH "  csl_port p_z$i(input);\n";
	print FH "  ifc$k () {}\n";
	print FH "};\n\n";
    }

#signal group sg
    if($i > 200 && $i <= 300) {
	print FH "csl_signal_group sg$k {\n";
	print FH "  csl_signal s_a$i($val2);\n";
	print FH "  csl_signal s_b$i($val3);\n";
	print FH "  csl_signal s_c$i($val1);\n";
	print FH "  sg$k () {}\n";
	print FH "};\n\n";
    }


#unit a
    print FH "csl_unit a$k {\n";
    print FH "  csl_port p$i($dir{$l},$val1);\n";
    if($i > 200 && $i <= 250) {
	print FH "  sg$k sg$k\_$zero;\n";
    }
    print FH "  a$k () {\n";
  
    print FH "  }\n";
    print FH "};\n\n";
    

#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i > 100 && $i <= 200) {
	print FH "  csl_port p_in(input,$val1);\n";
	print FH "  csl_port p_out(output,$val1);\n";
	print FH "  csl_port clk(input);\n";
	if($i > 100 && $i <= 150) {
	    print FH "csl_port rst(input);\n";
	    print FH "csl_port p_x$i(input);\n";
	    print FH "csl_port p_y$i(input);\n\n";
	}
	elsif($i > 150 && $i <= 200) {
	    print FH "csl_port rst(input);\n";
	    print FH "csl_port s_trig$i(input);\n";
	    print FH "csl_port e_trig$i(input);\n\n";
	}
    }
    if($i > 200 && $i <= 250) {
	print FH "  ifc$k ifc$k\_$zero;\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  csl_port p_in(input,$val1);\n";
	print FH "  csl_port p_out(output,$val1);\n";
	print FH "  csl_port clk(input);\n";
    }
    print FH "  b$k () {\n";
    if($i > 100 && $i <= 200) {
	print FH "    clk.set_attr(clock);\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "    clk.set_attr(clock);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";


#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    if($i <= 100 || $i > 200 && $i <= 250) {
	print FH "  csl_port p_in(input,$val2);\n";
	print FH "  csl_port p_out(output,$val2);\n";
	print FH "  csl_port clk(input);\n";
	if($i <= 50) {
	    print FH "  csl_port p_clk(input);\n";
	    print FH "  csl_port p$i(input);\n\n";
	}
    }
    print FH "  c$k () {\n";
    if($i <= 100 || $i > 200 && $i <= 250) {
	print FH "    clk.set_attr(clock);\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#signals used by the set_vc.. commands
    if($i > 300 && $i <= 350) {
	print FH "csl_signal clk(reg);\n";
	print FH "csl_signal rst;\n";
	print FH "csl_signal s_trig$i;\n";
	print FH "csl_signal e_trig$i;\n\n";
    }

#stim vector
    print FH "csl_vector stim_vect$k {\n";
    print FH "  stim_vect$k () {\n";
#Invalid : port
    if($i <= 50) {
	print FH "    set_unit_name(c$k);\n";
	print FH "    set_vc_clock(p_clk);\n";
	print FH "    set_vc_stall(p$i);  // Invalid : port as argument\n";
    }
#Invalid : ifc.p
    elsif($i > 50 && $i <= 100) {
	print FH "    set_unit_name(c$k);\n";
	print FH "    set_vc_compare_trigger(ifc$k.p_z$i);  // Invalid : ifc.p as argument\n";
    }
#Invalid : port
    elsif($i > 100 && $i <= 150) {
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_vc_reset(rst);\n";
	print FH "    set_vc_end_generation_trigger(p_y$i);  // Invalid : port as argument\n";
    }
#Invalid : ifc.p.ps []
    elsif($i > 150 && $i <= 200) {
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_vc_compare_trigger(ifc$k.p_z$i\[1\]);  // Invalid : ifc.p.ps as argument\n";
    }
#Invalid : sg
    elsif($i > 200 && $i <= 250) {
	print FH "    set_unit_name(c$k);\n";
	print FH "    set_vc_clock(ifc$k\_$zero);\n";
	print FH "    set_vc_start_generation_trigger(sg$k);  // Invalid : sg as argument\n";
    }
#Invalid : sig.ps,sg.sig.ps [:]
    elsif($i > 250 && $i <= 300) {
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_vc_reset(rst$i\[1\]);  // Invalid : sig.ps as argument\n";
	print FH "    set_vc_compare_trigger(sg$k.s_c$i\[0\:0\]);  // Invalid : sg.sig.ps as argument\n";
    }
    print FH "    set_direction(input);\n";
    print FH "  }\n";
    print FH "};\n\n";
    

#exp vector
    print FH "csl_vector exp_vect$k {\n";
    print FH "  exp_vect$k () {\n";
    if($i <= 100) {
	print FH "    set_unit_name(c$k);\n";
    }
#Invalid : port
    elsif($i > 100 && $i <= 150) {
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_vc_start_generation_trigger(p_x$i);  // Invalid : port as argument\n";
    }
#Invalid : sig.ps [],sig.ps [:]
    elsif($i > 150 && $i <= 200) {
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_vc_clock(clk\[1\]);\n";
	print FH "    set_vc_stall(clk);\n";
	print FH "    set_vc_start_generation_trigger(s_trig$i\[1\]);  // Invalid : sig.ps as argument\n";
	print FH "    set_vc_end_generation_trigger(e_trig$i\[0\:0\]);  // Invalid : sig.ps as argument\n";
    }
#Invalid : sg
    elsif($i > 200 && $i <= 250) {
	print FH "    set_unit_name(c$k);\n";
	print FH "    set_vc_stall(ifc$k);\n";
	print FH "    set_vc_end_generation_trigger(sg$k\_$zero);  // Invalid : sg as argument\n";
    }
#Invalid : sig.ps [],sig.ps [:]
    elsif($i > 250 && $i <= 300) {
	print FH "    set_unit_name(b$k);\n";
	print FH "    set_vc_clock(clk\[1\]);\n";
	print FH "    set_vc_stall(clk);\n";
	print FH "    set_vc_start_generation_trigger(s_trig$i\[1\]);  // Invalid : sig.ps as argument\n";
	print FH "    set_vc_end_generation_trigger(e_trig$i\[0\:0\]);  // Invalid : sig.ps as argument\n";
    }
    print FH "    set_direction(output);\n";
    print FH "  }\n";
    print FH "};\n\n";
    

#testbench tb
    print FH "csl_testbench tb$k {\n";
    print FH "  csl_signal clk(reg);\n";
    if($i <= 100 ) {
	print FH "  c$k c$k\_$zero(.clk(clk));\n";
    }
    elsif($i > 100 && $i <= 200) {
	print FH "  b$k b$k\_$one(.clk(clk));\n";
    }
    elsif($i > 150 && $i <= 200) {
	print FH "  b$k b$k\_$one(.clk(clk));\n";
    }
    elsif($i > 200 && $i <= 250) {
	print FH "  c$k c$k\_$zero(.clk(clk));\n";
    }
    elsif($i > 250 && $i <= 300) {
	print FH "  b$k b$k\_$one(.clk(clk));\n";
    }
    print FH "  tb$k () {\n";
    print FH "    clk.set_attr(clock);\n";
    print FH "    add_logic(clock,clk,10,ps);\n";
    print FH "  }\n";
    print FH "};\n\n";
    

}

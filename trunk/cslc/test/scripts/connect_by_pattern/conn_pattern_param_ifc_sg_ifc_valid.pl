#!/usr/bin/perl

#Author Petronela
use strict;
use Switch;

my $path = "$ENV{WORK}/test/csl_test_gen/";
print "th path to the generated tests is : $path"."conn_pattern_param_ifc_sg_ifc_valid/ \n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}



sub word {
    my $val = $_[0];
    my @alpha = ('a'..'z','A'..'Z');
    my @alphanumeric = ('a'..'z','A'..'Z','0'..'9');
    my $ret = $alpha[rand @alpha]."zz";
    for(my $i=1;$i < $val; ++$i){
        $ret = $ret.$alphanumeric[rand @alphanumeric];
    }
    return $ret;
}

my @lower = (10,23,31);
my @upper = (51,64,80);
my $o=0;

foreach(my $i = 1; $i <= 3; $i++) {
    my @map1  = ("ifca0","ifca1");
    my @map11 = ("ifcb0","ifcb1");
    my @map12 = ("ifcd0","ifcd1");
    my @map2  = ("sga0","sga1");
    my @map21 = ("sgb0","sgb1");
    my @map22 = ("sgd0","sgd1");
    foreach my $l(@lower) {
        foreach my $u(@upper) { 
            if($i ==1 ) {  
                foreach my $it1 (@map1) {
                    foreach my $it2 (@map2) {
                        &main($i,$l,$u,$it1,$it2);
                    }
                }   
            }
    
            elsif($i == 2) {
                foreach my $it1 (@map11) {
                    foreach my $it2(@map21) {
                        &main($i,$l,$u,$it1,$it2);
                
                    }
  
                }       
            }
            else {
                foreach my $it1 (@map12) {
                    foreach my $it2(@map22) {
                        &main($i,$l,$u,$it1,$it2);
                    }
                }       
            }
        }
    }

}

sub main {
    my ($i,$l,$u,$it1,$it2) = @_;
    my $test_name = "connect_pattern_param_ifc_sg_ifc".$i."_".$u."_".$l."_".$it1."_".$it2."_legal.csl";
    &createCslFile($test_name, $i,$l,$u,$it1,$it2);
}

sub createCslFile {
    my($test_name, $i,$l,$u,$it1,$it2) = @_;
    my $w = $u -$l +1;
    my $val1 = $u + int(rand(30)) + 1;
    my $val2 = $u + int(rand(30)) + 1;
    my $val3 = $u + int(rand(30)) + 1;
    my $val4 = $u + int(rand(30)) + 1;
    my $val1_1=$val1 -1;
    my $val2_1=$val2 -1;
    my $word = &word($val1);
    my $word1 = &word($val3);
    my $word2 = &word($val3);
    my $word3 = &word($val2);
    my $word4 = &word($val1);
    my $word5 = &word($val4);
    my $word6 = &word($val1);
    my $word7 = &word($val2);
    my $word8 = &word($val4);
    my $word9 = &word($val3);
    my $word10 = &word($val4);
    my $word11 = &word($val1);
    my $word12 = &word($val3);
    my $word13 = &word($val2);
    my $word14 = &word($val4);
    my $word15 = &word($val1);
    my $word16 = &word($val3);
    my $word17 = &word($val2);
   
    &mkDir("$path/conn_pattern_param_ifc_sg_ifc_valid");
    open(FH,">$path/conn_pattern_param_ifc_sg_ifc_valid/$test_name");
    
    print FH "//Generated by Petronela\n";
    print FH "//testing the method connect_by_pattern with parametru for conections ifc.p[ps] to ifc.p[ps],signal_group.s[ps] to ifc.p[ps],ifc.p[ps] to signal_group.s[ps]\n\n";
    print FH "csl_bitrange br($val1);\n";
    print FH "csl_bitrange brt($val2);\n";
    print FH "csl_interface ifca {\n";
    if($i == 1 ) {
        print FH "  csl_parameter ifca_x($val1_1);\n";
        print FH "  csl_parameter ifca_y($val1_1);\n";
        print FH "  csl_parameter ifca_z($val1);\n";
        print FH "  csl_parameter ifca_u($u);\n";
        print FH "  csl_parameter ifca_l($l);\n";
        print FH "  csl_port p_ifca$i(input,ifca_x);\n";
        print FH "  csl_port p_ifa(input,$val1);\n";
        print FH "  csl_port p_if(input,ifca_z);\n";
        print FH "  csl_port p_a(input,$val1);\n";
    }
    elsif($i == 2) {
        print FH "  csl_parameter ifca_x($val1);\n";
        print FH "  csl_parameter ifca_y($val1);\n";
        print FH "  csl_parameter ifca_u($u);\n";
        print FH "  csl_parameter ifca_l($l);\n";
        print FH "  csl_port p_ifca$i(output,$val1);\n";
        print FH "  csl_port p_ifa(output,ifca_y);\n";
        
    }
    else { 
        print FH "  csl_parameter ifca_x($val1);\n";
        print FH "  csl_parameter ifca_y($val1);\n";
        print FH "  csl_parameter ifca_z($val1);\n";
        print FH "  csl_parameter ifca_u($u);\n";
        print FH "  csl_parameter ifca_l($l);\n";
        print FH "  csl_port p_ifca$i(input,ifca_x);\n";
        print FH "  csl_port p_ifa(input,$val1);\n";
        print FH "  csl_port p_if(input,ifca_z);\n";
        print FH "  csl_port p_ifta$i(input,ifca_y);\n";
        print FH "  csl_port p_a(input,$val1);\n";
    }
    print FH "  ifca() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    print FH "csl_interface ifcb {\n";
    print FH "  ifca ifca0;\n";
    print FH "  ifca ifca1;\n";
    if($i == 1) {
        print FH "  csl_parameter ifcb_x($val1_1);\n";
        print FH "  csl_parameter ifcb_y($val1_1);\n";
        print FH "  csl_parameter ifcb_z($val1_1);\n";
        print FH "  csl_parameter ifcb_u($u);\n";
        print FH "  csl_parameter ifcb_l($l);\n";
        print FH "  csl_port p_ifca$i(input,ifcb_x);\n";
        print FH "  csl_port p_ifa(input,$val1);\n";
        print FH "  csl_port p_if(input,ifcb_z);\n";
        print FH "  csl_port p_ifta$i(input,$val1);\n";
    }
    elsif($i == 2) {
        print FH "  csl_parameter ifcb_x($val1);\n";
        print FH "  csl_parameter ifcb_u($u);\n";
        print FH "  csl_parameter ifcb_l($l);\n";
        print FH "  csl_port p_ifca$i(output,ifcb_x);\n";
        print FH "  csl_port p_ifa(output,$val1);\n";
        
    }
    else {  
        print FH "  csl_parameter ifcb_x($val1);\n";
        print FH "  csl_parameter ifcb_y($val1);\n";
        print FH "  csl_parameter ifcb_z($val1);\n";
        print FH "  csl_parameter ifcb_u($u);\n";
        print FH "  csl_parameter ifcb_l($l);\n";
        print FH "  csl_port p_ifca$i(input,ifcb_x);\n";
        print FH "  csl_port p_ifa(input,ifcb_y);\n";
        print FH "  csl_port p_if(input,$val1);\n";
        print FH "  csl_port p_ifta$i(input,$val1);\n";
        print FH "  csl_port p_a(input,ifcb_y);\n";
    }
    print FH "  ifcb() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_interface ifcd {\n";
    print FH "  ifcb ifcb0;\n";
    print FH "  ifcb ifcb1;\n";
    if($i == 1 ) {
        print FH "  csl_parameter ifcd_x($val1_1);\n";
        print FH "  csl_parameter ifcd_z($val1_1);\n";
        print FH "  csl_parameter ifcd_u($u);\n";
        print FH "  csl_parameter ifcd_l($l);\n";
        print FH "  csl_port p_ifca$i(input,ifcd_x);\n";
        print FH "  csl_port p_ifa(input,$val1);\n";
    }
    elsif($i == 2) {
        print FH "  csl_parameter ifcd_x($val1);\n";
        print FH "  csl_parameter ifcd_y($val1);\n";
        print FH "  csl_parameter ifcd_z($val1);\n";
        print FH "  csl_parameter ifcd_u($u);\n";
        print FH "  csl_parameter ifcd_l($l);\n";
        print FH "  csl_port p_ifca$i(output,$val1);\n";
        print FH "  csl_port p_ifa(output,ifcd_y);\n";
        print FH "  csl_port p_if(output,$val1);\n";
    }
    else { 
        print FH "  csl_parameter ifcd_x($val1);\n";
        print FH "  csl_parameter ifcd_y($val1);\n";
        print FH "  csl_parameter ifcd_z($val1);\n";
        print FH "  csl_parameter ifcd_u($u);\n";
        print FH "  csl_parameter ifcd_l($l);\n";
        print FH "  csl_port p_ifca$i(input,$val1);\n";
        print FH "  csl_port p_ifa(input,ifcd_y);\n";
        print FH "  csl_port p_if(input,$val1);\n";
        print FH "  csl_port p_ifta$i(input,ifcd_x);\n";
    }
    print FH "  ifcd() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_interface ifce {\n";
    print FH "  ifcd ifcd0;\n";
    print FH "  ifcd ifcd1;\n";
    if($i == 1 ) {
        print FH "  csl_parameter ifce_y($val1_1);\n";
        print FH "  csl_parameter ifce_z($val1_1);\n";
        print FH "  csl_parameter ifce_u($u);\n";
        print FH "  csl_parameter ifce_l($l);\n";
        print FH "  csl_port p_ifca$i(input,$val1);\n";
        print FH "  csl_port p_ifa(input,ifce_z);\n";
    }
    elsif($i == 2) {
        print FH "  csl_parameter ifce_x($val1);\n";
        print FH "  csl_parameter ifce_y($val1);\n";
        print FH "  csl_parameter ifce_z($val1);\n";
        print FH "  csl_parameter ifce_u($u);\n";
        print FH "  csl_parameter ifce_l($l);\n";
        print FH "  csl_port p_ifca$i(output,ifce_x);\n";
        print FH "  csl_port p_ifa(output,$val1);\n";
        print FH "  csl_port p_if(output,ifce_z);\n";
    }
    else { 
        print FH "  csl_parameter ifce_x($val1);\n";
        print FH "  csl_parameter ifce_y($val1);\n";
        print FH "  csl_parameter ifce_z($val1);\n";
        print FH "  csl_parameter ifce_u($u);\n";
        print FH "  csl_parameter ifce_l($l);\n";
        print FH "  csl_port p_ifca$i(input,$val1);\n";
        print FH "  csl_port p_ifa(input,ifce_y);\n";
        print FH "  csl_port p_if(input,ifce_z);\n";
        print FH "  csl_port p_ifta$i(input,$val1);\n";
    }
    print FH "  ifce() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    print FH "csl_signal_group sga {\n";
 
    if($i==1){
   print FH "  csl_parameter sga_x($val1_1);\n";
    print FH "  csl_parameter sga_y($val1_1);\n";
    print FH "  csl_parameter sga_z($val1_1);\n";
    print FH "  csl_parameter sga_u($u);\n";
    print FH "  csl_parameter sga_l($l);\n";
    print FH "  csl_signal p_ifca$i(sga_y);\n";
    print FH "  csl_signal p_ifa(sga_z);\n";
    print FH "  csl_signal p_if($val1);\n";
    print FH "  csl_signal p_ifta$i($val1);\n";
}
    elsif($i==2){
  
    print FH "  csl_parameter sga_z($val1);\n";
    print FH "  csl_parameter sga_y($val1);\n";
    print FH "  csl_signal p_ifca$i(sga_y);\n";
    print FH "  csl_signal p_ifa(sga_z);\n";
}
 else{
     print FH "  csl_parameter sgb_x($val1);\n";
     print FH "  csl_parameter sgb_y($val1);\n";
        print FH "  csl_signal p_ifca$i(sgb_x);\n";
        print FH "  csl_signal p_ifa(sgb_y);\n";
        print FH "  csl_signal p_if($val1);\n";
        print FH "  csl_signal p_ifta$i($val1);\n";
        print FH "  csl_signal p_a(sgb_y);\n";

    }
    print FH "  sga() {\n";
    print FH "  }\n";
    print FH "};\n\n";
    print FH "csl_signal_group sgb {\n";
    print FH "  sga sga0;\n";
    print FH "  sga sga1;\n";
   
    if($i==1){
    print FH "  csl_parameter sgb_x($val1_1);\n";
     print FH "  csl_parameter sgb_y($val1_1);\n";
    print FH "  csl_parameter sgb_z($val1_1);\n";
    print FH "  csl_parameter sgb_u($u);\n";
    print FH "  csl_parameter sgb_l($l);\n";
    print FH "  csl_signal p_ifca$i(sgb_x);\n";
    print FH "  csl_signal p_ifa($val1);\n";
    print FH "  csl_signal p_if(sgb_z);\n";
    print FH "  csl_signal p_ifta$i($val1);\n";
}
    elsif($i==2){
    print FH "  csl_parameter sgb_x($val1);\n";
    print FH "  csl_signal p_ifca$i(sgb_x);\n";
    print FH "  csl_signal p_ifa($val1);\n";
}
    else{
     print FH "  csl_parameter sgb_x($val1);\n";
     print FH "  csl_parameter sgb_y($val1);\n";
        print FH "  csl_signal p_ifca$i(sgb_x);\n";
        print FH "  csl_signal p_ifa(sgb_y);\n";
        print FH "  csl_signal p_if($val1);\n";
        print FH "  csl_signal p_ifta$i($val1);\n";
        print FH "  csl_signal p_a(sgb_y);\n";


    }

    print FH "  sgb() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_signal_group sgd {\n";
    print FH "  sgb sgb0;\n";
    print FH "  sgb sgb1;\n";
   
  if($i==1){  
    print FH "  csl_parameter sgd_x($val1_1);\n";
    print FH "  csl_parameter sgd_y($val1_1);\n";
    print FH "  csl_parameter sgd_z($val1_1);\n";
    print FH "  csl_signal p_ifca$i(sgd_x);\n";
    print FH "  csl_signal p_ifa($val1);\n";
    print FH "  csl_signal p_if(sgd_y);\n";
    print FH "  csl_signal p_ifta$i($val1);\n";
}
 elsif($i==2){
   print FH "  csl_parameter sgd_x($val1);\n";
    print FH "  csl_parameter sgd_y($val1);\n";
    print FH "  csl_signal p_ifca$i(sgd_x);\n";
    print FH "  csl_signal p_ifa($val1);\n";
    print FH "  csl_signal p_if(sgd_y);\n";
}
    else{
     print FH "  csl_parameter sgb_x($val1);\n";
     print FH "  csl_parameter sgb_y($val1);\n";
        print FH "  csl_signal p_ifca$i(sgb_x);\n";
        print FH "  csl_signal p_ifa(sgb_y);\n";
        print FH "  csl_signal p_if($val1);\n";
        print FH "  csl_signal p_ifta$i($val1);\n";
        

    }
    print FH "  sgd() {\n";
    print FH "  }\n";
    print FH "};\n\n";
    
    print FH "csl_signal_group sge {\n";
    print FH "  sgd sgd0;\n";
    print FH "  sgd sgd1;\n";
    

if($i==1){
   
    print FH "  csl_parameter sge_x($val1_1);\n";
    print FH "  csl_parameter sge_y($val1_1);\n";
    print FH "  csl_parameter sge_z($val1_1);\n";
    print FH "  csl_signal p_ifca$i(sge_y);\n";
    print FH "  csl_signal p_ifa($val1);\n";
#    print FH "  csl_signal p_if($val1);\n";
#    print FH "  csl_signal p_ifta$i(sge_z);\n";
}
elsif($i==2){
   print FH "  csl_parameter sge_z($val1);\n";
   print FH "  csl_signal p_ifa($val1);\n";
    print FH "  csl_signal p_if($val1);\n";
    print FH "  csl_signal p_ifta$i(sge_z);\n";
}
 else{
     print FH "  csl_parameter sgb_x($val1);\n";
     print FH "  csl_parameter sgb_y($val1);\n";
        print FH "  csl_signal p_ifca$i(sgb_x);\n";
        print FH "  csl_signal p_ifa(sgb_y);\n";
        print FH "  csl_signal p_if($val1);\n";
        print FH "  csl_signal p_ifta$i($val1);\n";
       

    }
    print FH "  sge() {\n";
    print FH "  }\n";
    print FH "};\n\n";

    print FH "csl_unit a {\n";
       
    if($i == 1) {
        print FH "  ifca ifca0;\n";
        print FH "  ifcb ifcb0;\n";
        print FH "  sgd sgd0;\n";
        print FH "  csl_port p_a$i(input,$val1);\n"; 
        print FH "  csl_port pa(input,$val1);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_signal s_a$i($val1);\n";
        print FH "  csl_signal sa($val1);\n";
    }
    elsif($i == 2) {
          print FH "  ifcd ifcd0;\n";
          print FH "  ifce ifce0;\n";
          print FH "  sge sge0;\n";
        print FH "  csl_port p_a$i(output,$val2);\n"; 
        print FH "  csl_port pa(output,$val2);\n";
        print FH "  csl_port p(output,$val2);\n";
       
    }
    else {
    print FH "  sga sga0;\n";
    print FH "  sgb sgb0;\n";
       
        print FH "  csl_port pa(input,$val1);\n";
        
        print FH "  csl_port p_a$i(input,$val1);\n";
    }
    print FH "  a() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";

    print FH "csl_unit b {\n";  
    
    if($i == 1) {
        print FH "  a a0;\n";
        print FH "  ifcd ifcd1;\n";
        print FH "  csl_port p_b$i(input,$val1);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_signal s_b$i($val1);\n";
        print FH "  csl_signal sb($val1);\n";
    }
    elsif($i == 2) {     
         print FH "  a a0;\n";
         print FH "  a a1;\n";
         print FH "  ifca ifca1;\n";
         print FH "  ifcb ifcb1;\n";
        print FH "  csl_port p_b$i(output,$val2);\n";
        print FH "  csl_port pb(output,$val2);\n";
      
    }
    else {     
    print FH "  sgd sgd1;\n";
    print FH "  sge sge1;\n";
        print FH "  a a0;\n"; 
       
        print FH "  csl_signal s_b_br$i(br);\n";
    }
    print FH "  b() {\n";
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit c {\n";  
    
    
     if($i == 1 ) {
    print FH "  csl_parameter sgd_u($u);\n";
    print FH "  csl_parameter sgd_l($l);\n";
    print FH "  b b0;\n";
    print FH "  b b1;\n";
    print FH "  sge sge2;\n";
#    print FH "  sgb sgb2;\n";
        print FH "  csl_port p_c$i(input,$val1);\n";
        print FH "  csl_port pc(input,$val1);\n";
        print FH "  csl_port p_c_br$i(input,br);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_signal sc($val1);\n";
    }
    elsif($i == 2) {     
    print FH "  b b0;\n"; 
    print FH "  sgd sgd2;\n";
    print FH "  sge sge2;\n";
        
    }
    else {    
    print FH "  ifca ifca2;\n";
    print FH "  ifcb ifcb2;\n";
        print FH "  b b0;\n";  
      
        print FH "  csl_signal s_c$i($val1);\n";
       
    }
    print FH "  c() {\n";
    if($i == 1){
        print FH "    p_c$i [$u:$l].connect_by_pattern(s_b$i [$u:$l],$word);\n";
        print FH "    pc[sgd_u:sgd_l].connect_by_pattern(sb[$u:$l],$word1);\n";
        print FH "    p_c_br$i [sgd_u:sgd_l].connect_by_pattern(p_b$i [$u:$l],$word2);\n";
        print FH "    p.connect_by_pattern(b0.p,$word3);\n";
    }
    elsif($i == 2) {
        print FH "    sgd2.connect_by_pattern(ifcd0,$word);\n";
        print FH "    sge2.connect_by_pattern(ifce0,$word1);\n";
#        print FH "    sgd3.$it2.sga1.p_ifa[$u:$l].connect_by_pattern(b0.ifce0.p_if[$u:$l],$word6);\n";
#        print FH "    sga3.p_ifca$i.connect_by_pattern(ifca2.p_ifca$i);\n";
#        print FH "    sga3.p_ifa.connect_by_pattern(ifca2.p_ifa);\n";
    }
    else {
        print FH "    ifca2.connect_by_pattern(sga0,$word1);\n";
        print FH "    ifcb2.connect_by_pattern(sgb0,$word2);\n";
    }
  
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    
    print FH "csl_unit d {\n";  
   
    if($i == 1 ) {
       print FH "  csl_parameter sge_u($u);\n";
       print FH "  csl_parameter sge_l($l);\n";
       print FH "  csl_parameter ifca_x($val1_1);\n";
       print FH "  csl_parameter ifca_y($val1_1);\n"; 
       print FH "  c c0;\n";
       print FH "  ifca ifca3;\n";
       print FH "  sgb sgb3;\n";
        print FH "  csl_port p_d$i(input,$val1);\n"; 
        print FH "  csl_port p_d_br$i(input,br);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_signal s_d$i($val1);\n";
        print FH "  csl_signal sd($val1);\n";
    }
    elsif($i == 2 ) {  
       print FH "  c c0;\n";    
       print FH "  ifcb ifcb3;\n";
       print FH "  sga sga3;\n";
     
    }
    else {  
    print FH "  c c0;\n";    
    print FH "  ifcd ifcd3;\n"; 
    print FH "  ifce ifce3;\n";
    
       print FH "  csl_signal sd($val1);\n";
      
    }
    print FH "  d() {\n";
    if($i == 1) {
        print FH "    p_d$i [sge_u:sge_l].connect_by_pattern(p_a$i [$u:$l],$word4);\n";
        print FH "    p_d_br$i [sge_u:sge_l].connect_by_pattern(s_a$i [$u:$l],$word5);\n";
        print FH "    p.connect_by_pattern(a0.p,$word6);\n";
        print FH "    ifca3.p_ifa[$o:ifca_x].connect_by_pattern(ifca0.p_ifa[$o:ifca_y],$word7);\n";
        print FH "    ifca3.p_ifca$i [$o:ifca_x].connect_by_pattern(ifca0.p_ifca$i [$o:ifca_y],gdjhkhk);\n";
        print FH "    ifca3.p_if.connect_by_pattern(ifca0.p_if);\n";
        print FH "    ifca3.p_a.connect_by_pattern(ifca0.p_a);\n";
        print FH "    sgb3.connect_by_pattern(ifcb0,$word9);\n";

    }
    
    elsif($i == 2) {
        print FH "    ifcb3.connect_by_pattern(ifcb1,$word2);\n";
        print FH "    sga3.connect_by_pattern(ifca1,$word3);\n";
         
    }
    else {
        print FH "    ifcd3.connect_by_pattern(sgd1,$word7);\n";
        print FH "    ifce3.connect_by_pattern(sge1,$word8);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
    

    print FH "csl_unit top {\n";
        print FH "  csl_parameter ifcb_x($val1_1);\n";
        print FH "  csl_parameter ifcb_y($val1_1);\n";
        print FH "  csl_parameter param_x($val2_1);\n";
        print FH "  csl_parameter param_y($val2_1);\n";
    print FH "  d d0;\n";
    print FH "  d d1;\n";
 
   
    if($i == 1) {
#   print FH "  ifca ifca4;\n";
    print FH "  ifcb ifcb4;\n";
    print FH "  ifcd ifcd4;\n";
    print FH "  ifce ifce4;\n";
        print FH "  csl_port ptop$i(input,$val1);\n";
        print FH "  csl_port p(input,$val1);\n";
        print FH "  csl_port ptop(input,$val1);\n";
        print FH "  csl_signal s($val1);\n";
    }
    elsif($i == 2) {
    print FH "  ifce ifce4;\n";
        print FH "  csl_port p_top$i(output,$val2);\n";      
        print FH "  csl_port pt(output,$val2);\n";
        print FH "  csl_port ptop(output,$val2);\n";        
        print FH "  csl_signal st($val2);\n";
        print FH "  csl_signal s_top_br$i(brt);\n";
    }
    else {
        print FH "  csl_port p_top$i(input,$val1);\n";      
        print FH "  csl_port pt(input,$val1);\n";
        print FH "  csl_port p_top_br$i(input,br);\n";
        print FH "  csl_signal s_top$i($val1);\n";
        print FH "  csl_signal stop($val1);\n";
    }
    print FH "  top(){\n";
    if($i == 1) {
#        print FH "    ifca4.p_ifa[$o:$val1].connect_by_pattern(ifca3.p_ifa[$o:ifca_y],$word10);\n";
#        print FH "    ifca4.p_ifca$i [$o:ifca_x].connect_by_pattern(ifca3.p_ifca$i [$o:ifca_y]);\n";
#        print FH "    ifca4.p_if.connect_by_pattern(ifca3.p_if);\n";
#        print FH "    ifca4.p_a.connect_by_pattern(ifca3.p_a);\n";
        print FH "    s.connect_by_pattern(b1.p,ooo);\n";

        print FH "    ifcb4.connect_by_pattern(sgb3,$word12);\n";
        print FH "    ifcd4.connect_by_pattern(ifcd1,$word13);\n";
        print FH "    ifce4.connect_by_pattern(sge2,$word14);\n";
        print FH "    ptop$i [$o:ifcb_x].connect_by_pattern(s_d$i [$o:ifcb_x]);\n";
        print FH "    p[$o:ifcb_y].connect_by_pattern(sd[$o:ifcb_x],$word16);\n";
	print FH "    ptop[$o:ifcb_y].connect_by_pattern(sc[$o:ifcb_x],$word17);\n";

    }
    elsif($i == 2) {
        print FH "    ifce4.connect_by_pattern(sge0,$word4);\n";
        print FH "  p_top$i [$o:param_x].connect_by_pattern(p_a$i [$o:param_y],$word5);\n";
        print FH "  pt [$o:param_x].connect_by_pattern(p[$o:param_y],$word6);\n";
        print FH "  ptop[$o:param_y].connect_by_pattern(pa[$o:param_x],$word7);\n";
        print FH "  st[$o:param_x].connect_by_pattern(pb[$o:param_x],$word8);\n";
        print FH "  s_top_br$i [param_x:$o].connect_by_pattern(p_b$i [param_y:$o],$word9);\n";
    }
    else {
        print FH "    p_top$i [ifcb_x: $o].connect_by_pattern(s_c$i [ $o:ifcb_x],$word10);\n";
        print FH "    pt.connect_by_pattern(sd,$word11);\n";
        print FH "    p_top_br$i [ifcb_y:$o].connect_by_pattern(s_b_br$i [$o:ifcb_x],$word12);\n";
        print FH "    s_top$i [$o:ifcb_y].connect_by_pattern(p_a$i [$o:ifcb_x],$word13);\n";
         print FH "    stop[ifcb_x:$o].connect_by_pattern(pa[$o:ifcb_x],$word10);\n";
    }
    print FH "  }\n";        
    print FH "};\n";        
    print FH "\n";
   
    close(FH);
}

#!/usr/bin/perl

#oanab
#connect_by_name() method

use strict;

print "Generated tests path : test/csl_test_gen/ar_conn_name_ifcp_sgs_invalid/\n";

if(! defined $ENV{WORK}){
    die "[ERROR] The environment variable WORK is not set. Set it to point to TOT/se";
}

my $totDir     = $ENV{WORK};
&testDirExists($totDir);

sub testDirExists {
    my($execName) = @_;
    unless(-e "$execName") { die "[ERROR] The directory $execName does not exist!\n"; }
    
}

sub mkDir {
    my($dirName) = @_;
    unless(-e "$dirName")  { `mkdir $dirName`; }
}

foreach(my $i = 1; $i <= 150; $i++) {
    &main($i);
}

sub main {
    my $i = $_[0];
    my $j = $_[1];
    my $m = $_[2];
    my $n = $_[3];
    $j = int(rand(20))+1; 
    $m = int(rand(20))+2; 
    $n = int(rand(20))+3; 
    my %dir = (1,"input",
	       2,"output",
	       3,"inout");
    my $dir = $_[4];
    my $test_name = "ar_conn_name_ifcp_sgs".$i."_illegal.csl";
    if($j != $m && $j != $n && $m != $n) {
	&createCslFile($test_name, $i, $j, $m, $n, %dir);
    }
    elsif($j == $m) {
	&createCslFile($test_name, $i, $j+1, $m+2, $n, %dir);
    }
}
sub createCslFile {
    my($test_name, $i, $j, $m, $n, %dir) = @_;
    my $path = "$ENV{WORK}/test/csl_test_gen/";
    my $k = int(rand(20)) + int(rand(20));
    my $zero = 0;
    my $one = 1;
    my $two = 2;
    my $tre = 3;
    my $val1 = int(rand(100))+2;
    my $val2 = int(rand(100))+3;
    my $val3 = int(rand(100))+8;
    my $l = int(rand(3))+1;
    if($test_name=~/(_legal)/){
        &mkDir("$path/ar_conn_name_ifcp_sgs_valid");
        open(FH,">$path/ar_conn_name_ifcp_sgs_valid/$test_name");
    }
    elsif($test_name=~/(_illegal)/) {
        &mkDir("$path/ar_conn_name_ifcp_sgs_invalid"); 
        open(FH,">$path/ar_conn_name_ifcp_sgs_invalid/$test_name");
    }
    print FH "//Generated by oanab\n\n";

#bitranges
    print FH "csl_bitrange br1($val1);\n\n";

    print FH "csl_bitrange br2($val2);\n\n";
    
    print FH "csl_bitrange br3($val3);\n\n";

#ifcj
    print FH "csl_interface ifc$j {\n";
    print FH "  csl_port ps_x$i($dir{$l},br2);\n";
    if($l < 3) {
	print FH "  csl_port ps_y$i($dir{$l+1},br3);\n";
    }
    else {
	print FH "  csl_port ps_y$i($dir{$l-1},br3);\n";
    }
    print FH "  csl_port ps_z$i(inout,br1);\n";
    print FH "  ifc$j () {\n";
    print FH "  }\n";
    print FH "};\n\n";
    

#sgj
    if($i <= 100) {
	print FH "csl_signal_group sg$j {\n";
	print FH "  csl_signal s_a$i(".($val2+$val1).");\n";
	print FH "  csl_signal s_b$i(br1);\n";
	print FH "  csl_signal s_c$i(br3);\n";
	print FH "  sg$j () {\n";
	print FH "  }\n";
	print FH "};\n\n";
    }
    
#sgm
    if($i > 50 && $i <= 100) {
	print FH "csl_signal_group sg$m {\n";
	print FH "  sg$j sg$j\_$zero;\n";
	print FH "  sg$j sg$j\_$one;\n";
	print FH "  sg$m () {\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#fifo f
    if($i > 50 && $i <= 100) {
	print FH "csl_fifo f$k {\n";
	print FH "  f$k () {\n";
	print FH "    set_width($val1);\n";
	print FH "    set_depth(".($val2+$val1).");\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#register reg
    if($i > 100 && $i <= 150) {
	print FH "csl_register reg$k {\n";
	print FH "  reg$k () {\n";
	print FH "    set_width($val2);\n";
	print FH "    set_type(register);\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

#register file rf
    if($i > 100 && $i <= 150) {
	print FH "csl_register_file rf$k {\n";
	print FH "  rf$k () {\n";
	print FH "    set_width($val3);\n";
	print FH "    set_depth(".($val2+$val3).");\n";
	print FH "  }\n";
	print FH "};\n\n";
    }

  
#unit a
    print FH "csl_unit a$k {\n";
    print FH "  csl_signal s_a$i(br3);\n";
    if($i <= 50) {
	print FH "  sg$j sg$j\_$zero;\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  ifc$j ifc$j\_$one;\n";
    }
    elsif($i > 100 && $i <= 150) {
	print FH "  rf$k rf$k\_$zero;\n";
    }
    print FH "  a$k () {\n";
    print FH "  }\n";
    print FH "};\n\n";

#unit b
    print FH "csl_unit b$k {\n";
    print FH "  a$k a$k\_$zero;\n";
    if($i <= 100) {
	print FH "  ifc$j ifc$j\_$zero;\n";	
	if($i > 50) {
	    print FH "  f$k f$k\_$zero;\n";
	}
    } 
    elsif($i > 100 && $i <= 150) {
	print FH "  ifc$j ifc$j\_$one;\n";
    }
    print FH "  b$k () {\n";
 
    print FH "  }\n";
    print FH "};\n\n";

#unit c
    print FH "csl_unit c$k {\n";
    print FH "  b$k b$k\_$zero;\n";
    if($i <= 50) {
	print FH "  ifc$j ifc$j\_$one;\n";
    }
    elsif($i > 50 && $i <= 100) {
	print FH "  sg$m sg$m\_$zero;\n";
	print FH "  ifc$j ifc$j\_$zero;\n";
    }
    print FH "  c$k () {\n";
#connect_by_name : ifc.p---sg (PC)
    if($i <= 50) {
	print FH "    ifc$j\_$one.ps_x$i.connect_by_name(a$k\_$zero.sg$j\_$zero);  // ifc.p---sg (PC)\n";
    }
#connect_by_name : ifc.p---sg.sg (CP)
    elsif($i > 50 && $i <= 100) {
	print FH "    b$k\_$zero.a$k\_$zero.ifc$j\_$one.ps_z$i.connect_by_name(sg$m\_$zero.sg$j\_$one);  // ifc.p---sg.sg (CP)\n";
    }
#connect_by_name : ifc.p---rf (PC)
    elsif($i > 100 && $i <= 150) {
	print FH "    b$k\_$zero.ifc$j\_$one.ps_z$i.connect_by_name(b$k\_$zero.a$k\_$zero.rf$k\_$zero);  // ifc.p---rf (PC)\n";
    }
    print FH "  }\n";
    print FH "};\n\n";

#unit d
    print FH "csl_unit d$k {\n";
    print FH "  c$k c$k\_$zero;\n";
    if($i > 100 && $i <= 150) {
	print FH "  reg$k reg$k\_$zero;\n";
    }
    print FH "  d$k () {\n";
#connect_by_name : ifc.p---ifc (CP)
    if($i <= 50) {
	print FH "    c$k\_$zero.b$k\_$zero.ifc$j\_$zero.ps_y$i.connect_by_name(c$k\_$zero.ifc$j\_$one,pa$i);  // ifc.p---ifc (CP)\n";
    }
#connect_by_name : ifc---fifo (PC)
    elsif($i > 50 && $i <= 100) {
	print FH "    c$k\_$zero.ifc$j\_$zero.connect_by_name(c$k\_$zero.b$k\_$zero.f$k\_$zero);  // ifc---fifo (PC)\n";
    }
#connect_by_name : ifc.p---reg (CP)
    elsif($i > 100 && $i <= 150) {
	print FH "    c$k\_$zero.b$k\_$zero.ifc$j\_$one.ps_y$i.connect_by_name(reg$k\_$zero,pa$i);  // ifc.p---reg (CP)\n";
    }
    print FH "  }\n";
    print FH "};\n\n";




}

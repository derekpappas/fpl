<div class="colmask threecol">
  <div class="colmid">
    <div class="colleft">
      <div class="col1">
		<!-- Column 1 start -->
		<h2 class="caps">Infrastructure Specification System</h2>
		Designs are becoming so complex that the existing design languages such as Verilog and VHDL have simply run out of steam. Therefore, there is a strong need to specify designs and their underlying infrastructure at a much higher level of abstraction, thereby bridging the complexity gap.  This higher level design specification system is required to build the RTL design, verification components, functional simulators, and system software hooks. The Fastpath Logic solution offers a high-level specification which is based on C++ with additional hardware extensions. This specification is used to fully describe a chip design's infrastructure design, simulation, and verification components at a high level of abstraction using C++ object oriented classes and constructs (structured C++). The language is simple and intuitive and closely parallels existing RTL languages such as Verilog and SystemC at the expression and statement level. 
		However, the FPL specification is more than just another RTL description. It is designed to raise the level of abstraction used to specify and describe a chip design. It also provides the end user with a flexible specification system that facilitates rapid changes and design exploration. In addition it is a single source for the common design, verification, and simulation components. Using a single source guarantees consistency between the different domains and eliminates parallel book keeping between them. The input specification is compiled by the Fastpath Logic compiler which in turn synthesizes the specification and generates industry standard RTL (Verilog/VHDL), C++, SystemC, and the underlying documentation. The user then adds the control logic and any low level implementation details and the combined infrastructure and user written logic can be compiled with industry standard RTL, C++, and SystemC compilers. This ensures that the FPL solution is completely plug and play with existing design flows.
		The FPL input specification is applicable for multiple design environments including ASIC, FPGA, and custom design environments such as for microprocessor designs. 
It reduces the amount of work required to develop the infrastructure on a chip design project by a factor of 30x-50x due to its high level of abstraction and high degree of automation. Since it is based on C++ with a few hardware extensions, the learning curve is pretty smooth compared to other more proprietary solutions. Furthermore, since it supports existing industry standards and toolsets, it can be easily integrated into existing and new design projects. 
		<!-- Column 1 end -->
      </div>
      <div class="col2">
		<!-- Column 2 start -->
		$cslMenu$
		<!-- Column 2 end -->
      </div>
      <div class="col3">
		<!-- Column 3 start -->
		<!-- Column 3 end -->
      </div>
    </div>
  </div>
</div>

